<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0052)http://nciweb1.doe.mass.edu/pdp/config/functions.inc -->
<HTML><HEAD>
<META http-equiv=Content-Type content="text/html; charset=windows-1252">
<META content="MSHTML 6.00.2462.0" name=GENERATOR></HEAD>
<BODY><PRE>&lt;!--#include virtual="/pdp/config/adovbs.inc"--&gt;

&lt;%
Public Function isNullStr(str)
	' isNull(str) and str = "" are exclusive, so check for either
	isNullStr = (str = "" OR isNull(str))
End Function


Public Function cleanSQL(instr)
	' if instr is null or "", return instr
	If (isNullStr(instr)) Then
		cleanSQL = instr
	Else
		' replace ' with '' (' preceded by the SQL escape character)
		' replace the SQL keyword "&amp;" with " and "
		' call cleanEOL
		' surround the string with quotes
		cleanSQL = replace(instr,"'","''")
		cleanSQL = replace(cleanSQL,"&amp;"," and ")
		cleanSQL = cleanEOL(cleanSQL)
		cleanSQL = "'" &amp; cleanSQL &amp; "'"
	End If
End Function


Public Function textCleanSQL(instr)
	' if instr is null or "", return instr
	If (isNullStr(instr)) Then
		textCleanSQL = instr
	Else
		' replace "'" with "''" ("'" preceded by the SQL escape character)
		' replace the SQL keyword &amp; with and
		' call replaceEOL
		' surround the string with quotes
		textCleanSQL = replace(instr,"'","''")
		textCleanSQL = replace(textCleanSQL,"&amp;"," and ")
		textCleanSQL = replaceEOL(textCleanSQL)
		textCleanSQL = "'" &amp; textCleanSQL &amp; "'"
	End If
End Function


Public Function cleanEOL(instr)
	' replace carriage returns and new line characters with spaces
	instr = replace(instr,Chr(10)," ")
	instr = replace(instr,Chr(13)," ")
	cleanEOL = instr
End Function


Public Function replaceEOL(instr)
	' if instr is null or "", return instr
	If (isNullStr(instr)) Then
		replaceEOL = instr
	Else
		' replace VbCrLf with "\r" for storage in the database
		' when retrieved it will be replaced with "&lt;BR&gt;" for text areas (addBR())
		' or VbCrLf for form fields(addBR()) 
		replaceEOL = replace(instr,VbCrLf,"\r")
    End If
End Function


Public Function addBR(instr)
	' if instr is null or "", return instr
	If (isNullStr(instr)) Then
		addBR = instr
	Else
		' replace "\r" with "&lt;BR&gt;"
		addBR = replace(instr,"\r","&lt;BR&gt;")
	End If
End Function


Public Function addCR(instr)
	' if instr is null or "", return instr
	If (isNullStr(instr)) Then
		addCR = instr
	Else
		' replace "\r" with VbCrLf
		addCR = replace(instr,"\r",VbCrLf)
	End If
End Function


Public Function checkNull(input,default)
	' if input isNullStr, return default
	' otherwise return input
	If (isNullStr(input)) Then
		checkNull = default
	Else
		checkNull = input
	End If
End Function


Public Sub go(url)
	' if the user does not have access to a page or no longer has an active session,
	' then redirect them to an explanatory page;
	' otherwise redirect them to the url that is passed
	If (url = "noaccess") Then
		Response.Redirect("/pdp/gen/noaccess.asp")
	ElseIf (url = "nosession") Then
		Response.Redirect("/pdp/gen/nosession.asp")
	Else
		Response.Redirect(url)
	End If
End Sub


Public Function print(str)
	' just an abbreviation for Response.Write
	print = Response.Write(str)
End Function


Public Sub checkSession(obj)
	If (isNullStr(obj)) Then
		go("nosession")
	End If
End Sub


Public Sub checkProvider(actlvl)
	If (isNullStr(actlvl)) Then
		go("nosession")
	ElseIf (actlvl &lt;&gt; "p" AND actlvl &lt;&gt; "s") Then
		go("noaccess")
	End If
End Sub


Public Sub checkAdmin(actlvl)
	If (isNullStr(actlvl)) Then
		go("nosession")
	ElseIf (actlvl &lt;&gt; "s") Then
		go("noaccess")
	End If
End Sub


Public Function checkBrowser()
	detect = Request.ServerVariables("HTTP_USER_AGENT")
	
	str = Right(detect, len(detect) - 8)
	main_version = Left(str, 1)
	
	If (InStr(detect,"MSIE") &lt;&gt; 0) Then
		browser = "Microsoft Internet Explorer"
	ElseIf (InStr(detect,"; I;") &lt;&gt; 0 OR InStr(detect,"; I ;") &lt;&gt; 0 OR InStr(detect,"; I)") &lt;&gt; 0 OR InStr(detect,"; U;") &lt;&gt; 0 OR InStr(detect,"; U ;") &lt;&gt; 0 OR InStr(detect,"; U)") &lt;&gt; 0) Then
		browser = "Netscape Navigator"
	Else
		browser = ""
	End If
	
	If (browser = "Microsoft Internet Explorer" AND int(main_version) &lt; 4) Then
	
		version_os = split(str,"MSIE")
		version = split(version_os(1),";")
		
		If (UBound(version) = 0) Then
			sub_version = main_version
		Else
			sub_version = LTrim(version(0))
		End If
		
		checkBrowser = "&lt;P&gt;&lt;STRONG&gt;NOTE!&lt;/STRONG&gt; You appear to be using &lt;STRONG&gt;" &amp; browser &amp; " " &amp; sub_version &amp; "&lt;/STRONG&gt;.  This application requires, at minimum, &lt;A HREF=""http://www.netscape.com/download/""&gt;Netscape Navigator&lt;/A&gt; Version 3 or &lt;A HREF=""http://www.microsoft.com/ie/""&gt;Microsoft Internet Explorer&lt;/A&gt; Version 4.&lt;/P&gt;" &amp; VbCrLf &amp; "&lt;P&gt;Although you will be able to log in, we cannot guarantee that all features and functions will work correctly.&lt;/P&gt;"
		
	ElseIf (browser = "Netscape Navigator" AND int(main_version) &lt; 3) Then
	
		version = split(str," ")
		
		If (UBound(version) = 0) Then
			sub_version = main_version
		Else
			sub_version = RTrim(version(0))
		End If
		
		checkBrowser = "&lt;P&gt;&lt;STRONG&gt;NOTE!&lt;/STRONG&gt; You appear to be using &lt;STRONG&gt;" &amp; browser &amp; " " &amp; sub_version &amp; "&lt;/STRONG&gt;.  This application requires, at minimum, &lt;A HREF=""http://www.netscape.com/download/""&gt;Netscape Navigator&lt;/A&gt; Version 3 or &lt;A HREF=""http://www.microsoft.com/ie/""&gt;Microsoft Internet Explorer&lt;/A&gt; Version 4.&lt;/P&gt;" &amp; VbCrLf &amp; "&lt;P&gt;Although you will be able to log in, we cannot guarantee that all features and functions will work correctly.&lt;/P&gt;"
		
	ElseIf (browser = "") Then
		checkBrowser = "&lt;P&gt;&lt;STRONG&gt;NOTE!&lt;/STRONG&gt; This application requires, at minimum, &lt;A HREF=""http://www.netscape.com/download/""&gt;Netscape Navigator&lt;/A&gt; Version 3 or &lt;A HREF=""http://www.microsoft.com/ie/""&gt;Microsoft Internet Explorer&lt;/A&gt; Version 4.&lt;/P&gt;" &amp; VbCrLf &amp; "&lt;P&gt;Although you will be able to log in, we cannot guarantee that all features and functions will work correctly.&lt;/P&gt;"
	End If
End Function


Public Function ButtonPushed(button_name)
	ButtonPushed = (NOT isNullStr(Request(button_name)))
End Function


Public Function markChecked(value,checkbox)
	If (value = checkbox) Then
		markChecked = " CHECKED"
	End If
End Function


Public Function isItSelected(current,selection)
	If (trim(current) = trim(selection)) Then isItSelected = true
End Function

Public Function markSelected(selected)
	If (selected) Then markSelected = " SELECTED"
End Function

Public Function markChecked(selected)
	If (selected) Then markChecked = " CHECKED"
End Function

Public Function writeNullJS(str)
	If (isNullStr(str)) Then
		writeNullJS = "null"
	Else
		writeNullJS = str	
	End If
End Function


'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'	Validation Functions
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


Public Function isNumber(num,min_len,max_len,min_val,max_val,allow_neg,allow_dec,allow_nulls)
	isNumber = true

	If (allow_nulls AND isNullStr(num)) Then
		Exit Function
	ElseIf (isNullStr(num)) Then
		isNumber = false
	ElseIf (NOT isNumeric(num)) Then
		isNumber = false
	ElseIf (len(num) &lt; min_len OR len(num) &gt; max_len) Then
		isNumber = false
	ElseIf (Abs(num) &lt; min_val OR Abs(num) &gt; max_val) Then
		isNumber = false
	ElseIf (NOT allow_neg AND (int(num) &lt; 0 OR inStr(num,"-") &lt;&gt; "0")) Then
		isNumber = false
	ElseIf (NOT allow_dec AND inStr(num,".") &lt;&gt; "0") Then
		isNumber = false
	End If
End Function


Public Function isValidPhone(area,exchange,number,ext,allow_nulls)
	isValidPhone = true	
	
	If (allow_nulls AND isNullStr(area) AND isNullStr(exchange) AND isNullStr(number) AND isNullStr(ext)) Then
		Exit Function
	Else
		If (NOT isNumber(area,3,3,0,999,false,false,false) OR NOT isNumber(exchange,3,3,0,999,false,false,false) OR NOT isNumber(number,4,4,0,9999,false,false,false) OR NOT isNumber(ext,1,5,0,99999,false,false,true)) Then
			isValidPhone = false
		End If
	End If
End Function


Public Function isValidState(state,allow_nulls)	 
	isValidState = false
		
	If (allow_nulls AND isNullStr(state)) Then
		isValidState = true 
		Exit Function
	Else
		ucstate = UCase(state) 
		USStateCodes = Array("AL","AK","AS","AZ","AR","CA","CO","CT","DE","DC","FM","FL","GA","GU","HI","ID","IL","IN","IA","KS","KY","LA","ME","MH","MD","MA","MI","MN","MS","MO","MT","NE","NV","NH","NJ","NM","NY","NC","ND","MP","OH","OK","OR","PW","PA","PR","RI","SC","SD","TN","TX","UT","VT","VI","VA","WA","WV","WI","WY","AE","AA","AE","AE","AP")
        For each USstate in USStateCodes 
            If (ucstate = USstate) Then 
            	isValidState = True 
            	Exit For 
            End If 
        Next
	End If
End Function


Public Function isValidZip(zip,plus4,code_req,allow_nulls)											
	isValidZip = true
	
	If (allow_nulls AND isNullStr(zip) AND isNullStr(plus4)) Then
		Exit Function
	ElseIf (code_req AND isNullStr(plus4)) Then
		isValidZip = false 
	Else
		If (NOT isNumber(zip,5,5,0,99999,false,false,false) OR NOT isNumber(plus4,4,4,0,9999,false,false,true)) Then
			isValidZip = false
		End If
    End If
End Function


Public Function isValidEmail(email,allow_nulls)
	' set to true, and remains true if not changed to false
	isValidEmail = true
	
	' if nulls are allowed and email is null, then exit
	If (allow_nulls AND isNullStr(email)) Then
		Exit Function
	Else
		email_array = split(email,"@")
		'this should create an array with only two elements, since there should only be one "@"
		
		email_array_size = UBound(email_array)
		
		'since there should be only two elements, the position of the second element must be 1
		If (email_array_size &lt;&gt; 1) Then
			isValidEmail=false
		Else
			'the "domain" part of the address is the second element
			domain=email_array(1)
			
			'the "." must be in the "domain" part, but not right at the beginning or end
			If (inStr(domain,".") = "0" OR inStr(domain,".") = 1 OR inStrRev(domain,".") = len(domain)) Then
				isValidEmail = false
			End If
		End If
	End If
End Function


Public Function isValidDate(m,d,y,startyr,endyr,allow_nulls)										
	' set to true, and remains true if not changed to false
	isValidDate = true
	' if nulls are allowed and all is null, then exit
	If (allow_nulls AND isNullStr(m) AND isNullStr(d) AND isNullStr(y)) Then
		Exit Function
	Else
		' if any are null, then return false
		If (isNullStr(m) OR isNullStr(d) OR isNullStr(y)) Then
			isValidDate = false
		' if any are not numeric, then return false
		ElseIf (NOT isNumeric(m) OR NOT isNumeric(d) OR NOT isNumeric(y)) Then
			isValidDate = false
		' if d or m are greater or less than the max possible day or month, then return false
		' if y is less startyr or greater than endyr, then return false
		ElseIf (m &lt; 1 OR m &gt; 12 OR d &lt; 1 OR d &gt; 31 OR int(y) &lt; startyr OR int(y) &gt; endyr) Then
			isValidDate = false
		' the results of dateExists are returned for isValidDate
		Else
			isValidDate = (dateExists(m,d,y))
		End If
	End If
End Function


Public Function dateExists(m,d,y)
	' set to true, and remains true if not changed to false												  
	dateExists = true

	' create an array of the days in each month,
	' with the maximum days possible for February
	month_days = array(31,29,31,30,31,30,31,31,30,31,30,31)

	' if the input d is greater than the days in that month, then the output is false
	' note: (m - 1) since January would be a one, its index in the array would be 0 
	If (int(d) &gt; month_days(m - 1)) Then
		dateExists = false
	' if input is February - d can be 29 only if:
	' y is divisible by 4 and
	' if divisible by 100, it must also be divisible by 400  
	ElseIf  ((m = 2 and d &gt; 28) AND ((y MOD 4 &lt;&gt; 0) OR (y MOD 100 = 0 AND y MOD 400	&lt;&gt; 0))) Then
		dateExists = false
	End If
End Function


Public Function isDateInPast(m,d,y)										
	' set to false, and remains false if not changed to true
	isDateInPast = false
	' if all is null, then exit
	If (isNullStr(m) AND isNullStr(d) AND isNullStr(y)) Then
		Exit Function
	ElseIf (dateExists(m,d,y)) Then
		' create a date from its components
		indate = m &amp; "/" &amp; d &amp; "/" &amp; y
		' if the difference of days between today and the date passed is negative,
		' then isDateInPast returns true; otherwise it returns false
		isDateInPast = (dateDiff("d",now,indate) &lt; 0)
	End If
End Function


Public Function isValidLevelPulldown(level1ID,level2ID,level3ID,allow_nulls)
	' set to true, and remains true if not changed to false
	isValidLevelPulldown = true
	' if nulls are allowed and all is null, then exit
	If (allow_nulls AND isNullStr(level1ID) AND isNullStr(level2ID) AND isNullStr(level3ID)) Then
		Exit Function
	Else
		' if any are null, then return false
		If (isNullStr(level1ID) OR isNullStr(level2ID) OR isNullStr(level3ID)) Then
			isValidLevelPulldown = false
		End If
	End If
End Function


'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'	Error Functions
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


Public Function errorMsg(err)
	' if theres one error, display "error" 
	' if more than one error, display "errors"
	' if theres already a record with this First Name, Email, and Conference, display Error
	If (dictError.count = 1) Then 
		errorMsg = "&lt;P&gt;&lt;STRONG&gt;NOTE!&lt;/STRONG&gt; Please correct the following error (&amp;nbsp;&lt;IMG SRC=""/pdp/images/triangle.gif"" ALT=""!"" WIDTH=""10"" HEIGHT=""12"" BORDER=""0""&gt;&amp;nbsp;):&lt;/P&gt;"	
		
		aError = dictError.Items
		errorMsg = errorMsg &amp; "&lt;DL&gt;" &amp; VbCrLf
		errorMsg = errorMsg &amp; "&lt;DD&gt;" &amp; aError(0) &amp; VbCrLf
		errorMsg = errorMsg &amp; "&lt;/DL&gt;" &amp; VbCrLf
	ElseIf (dictError.count &gt; 1) Then
		errorMsg = errorMsg &amp; "&lt;P&gt;&lt;STRONG&gt;NOTE!&lt;/STRONG&gt; Please correct the following errors (&amp;nbsp;&lt;IMG SRC=""/pdp/images/triangle.gif"" ALT=""!"" WIDTH=""10"" HEIGHT=""12"" BORDER=""0""&gt;&amp;nbsp;):&lt;/P&gt;"
		
		errorMsg = errorMsg &amp; "&lt;DL&gt;" &amp; VbCrLf
		For each item in dictError.Items
			errorMsg = errorMsg &amp; "&lt;DD&gt;" &amp; item &amp; VbCrLf
		Next
		errorMsg = errorMsg &amp; "&lt;/DL&gt;" &amp; VbCrLf
	Else
		errorMsg = err
	End If
End Function


Public Function errorMark(field)
	' if an item exists in the error scripting dictionary with a key equal to field,
	' then the function returns HTML for a red triangle to mark the error
	If (dictError.Exists(field)) Then
		errorMark = "&amp;nbsp;&lt;IMG SRC=""/pdp/images/triangle.gif"" ALT=""!"" WIDTH=""10"" HEIGHT=""12"" BORDER=""0""&gt;"
	End If
End Function


Public Function errorRed(err)
	' if the error string passed to this function is not null,
	' then the function returns the error surrounded by HTML for red text
	If (isNullStr(err)) Then
		errorRed=""
	Else
		errorRed="&lt;FONT COLOR=""#FF0000""&gt;" &amp; err &amp; "&lt;/FONT&gt;" &amp; vbCrLf
	End If 
End Function

Public Function sendMail(send_name, send_email, subject, body)
		Set Mailer = Server.CreateObject("SMTPsvg.Mailer")
		Mailer.FromName = "PDPortfolio"
    		Mailer.FromAddress = "pdp@doe.mass.edu"
		Mailer.RemoteHost = "mail.doe.mass.edu"
    		Mailer.AddRecipient send_name, send_email
    		Mailer.Subject = subject
  		Mailer.BodyText = body
    		sendMail = (Mailer.SendMail)
End Function   							
%&gt;</PRE></BODY></HTML>
