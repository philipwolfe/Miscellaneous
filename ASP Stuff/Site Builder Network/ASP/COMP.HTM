
<HTML>
<HEAD>


<TITLE>SBN Server: Developing Active Server Components with ATL</TITLE>

<META NAME="Description" CONTENT="Developing Active Server Components with ATL. This article tells you how to write an Active Server Pages (ASP) component with ATL and when you might want to." />
<META NAME="Keywords" CONTENT="ATL, IIS, active server components" />
<META NAME="Robots" CONTENT="All" />

<META NAME="Author" CONTENT="George V. Reilly" />
<META NAME="Posted" CONTENT="" />
<META NAME="Updated" CONTENT="09/23/1998" />

<META NAME="MS.LOCALE" CONTENT="EN-US" />
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1" />

<LINK REL="stylesheet" TYPE="text/css" HREF="../../../sitebuilder/shared/css/navbar.css" />
<LINK REL="stylesheet" TYPE="text/css" HREF="../../../sitebuilder/shared/css/ie4-wks.css" />


<SCRIPT LANGUAGE="JavaScript"><!--

// -----------------------------------------------------------
// Client-side BrowserData constructor
// Populated using data from server-side oBD object to avoid redundancy
// -----------------------------------------------------------

function BrowserData()
{
this.userAgent = "Mozilla/4.0 (compatible; MSIE 4.01; Windows NT)";
this.browser = "MSIE";
this.majorVer = "4";
this.minorVer = "01";
this.betaVer = 0;
this.platform = "NT";
this.getsNavBar = true;
this.doesActiveX = true;

}
var oBD = new BrowserData();

//--></SCRIPT>

<SCRIPT LANGUAGE="Javascript"><!--

// -----------------------------------------------------------
// window_load()
// Container function for load.
// -----------------------------------------------------------

function window_load()
{
if (oBD.getsNavBar)
{
if ("function" == typeof(InitNavLinks)) InitNavLinks();
if ("function" == typeof(CheckToTop)) CheckToTop();
}
}
window.onload = window_load;

//--></SCRIPT>

</HEAD>

<BODY TOPMARGIN="0" LEFTMARGIN="0" MARGINHEIGHT="0" MARGINWIDTH="0" BGCOLOR="#FFFFFF">


<TABLE WIDTH="100%" CELLPADDING="0" CELLSPACING="0" BORDER="0">
<TR>
<TD ROWSPAN="2" WIDTH="460" VALIGN="top"><NOBR><A HREF="http://www.microsoft.com/" TARGET="_top"><IMG SRC="../../../library/images/gifs/toolbar/home.gif" WIDTH="103" HEIGHT="21" ALT="Microsoft Home" BORDER="0"></A><A HREF="http://www.microsoft.com/PRODUCTS/DEFAULT.asp?DIVISIONID="10"" TARGET="_top"><IMG SRC="../../../library/images/gifs/toolbar/prod.gif" WIDTH="81" HEIGHT="21" ALT="products" BORDER="0"></A><A HREF="http://www.microsoft.com/search/default.asp" TARGET="_top"><IMG SRC="../../../library/images/gifs/toolbar/search.gif" WIDTH="68" HEIGHT="21" ALT="search" BORDER="0"></A><A HREF="http://www.microsoft.com/ISAPI/GOSUPPORT.asp?TARGET=/SUPPORT/" TARGET="_top"><IMG SRC="../../../library/images/gifs/toolbar/support.gif" WIDTH="74" HEIGHT="21" ALT="support" BORDER="0"></A><A HREF="http://www.microsoft.com/referral/default.asp" TARGET="_top"><IMG SRC="../../../library/images/gifs/toolbar/shop.gif" WIDTH="55" HEIGHT="21" ALT="shop" BORDER="0"></A><A HREF="http://www.microsoft.com/ISAPI/GOREGWIZ.asp?TARGET=/REGWIZ/REGWIZ.asp" TARGET="_top"><IMG SRC="../../../library/images/gifs/toolbar/write.gif" WIDTH="78" HEIGHT="21" ALT="Write Us" BORDER="0"></A><IMG SRC="../../../library/images/gifs/toolbar/spacer.gif" WIDTH="1" HEIGHT="21" ALT="" BORDER="0"></NOBR></TD>
<TD BGCOLOR="#000000" WIDTH="100%" HEIGHT="20">&nbsp;</TD>
<TD ROWSPAN="2" WIDTH="91" ALIGN="right" VALIGN="top"><A HREF="http://www.microsoft.com/" TARGET="_top"><IMG SRC="../../../library/images/gifs/toolbar/msft.gif" WIDTH="91" HEIGHT="21" ALT="Microsoft Home" BORDER="0"></A></TD>
</TR>
<TR>
<TD COLSPAN="3" BGCOLOR="#FFFFFF" WIDTH="100%" HEIGHT="1"></TD>
</TR>
</TABLE>

<TABLE ID="tblNavBar" BORDER="0" CELLPADDING="0" CELLSPACING="0">
<TR VALIGN="top">
<TD CLASS="clsSBNLogo" TITLE="SBN Home" HEIGHT="34" WIDTH="90"><A HREF="/sitebuilder/default.htm" TARGET="_top" expNoTOC="true"><IMG HEIGHT="34" WIDTH="90" BORDER="0" SRC="../../../sitebuilder/shared/navbar/graphics/sbnbrand2.gif" ALT="SBN Home" /></A></TD>
<TD CLASS="clsNavBarItem" expItemNum="1">Magazine<BR><IMG HEIGHT="4" WIDTH="7" BORDER="0" SRC="../../../sitebuilder/shared/navbar/graphics/arrow.gif"></TD>
<TD>&nbsp;|&nbsp;</TD>
<TD CLASS="clsNavBarItem" expItemNum="2">Community<BR><IMG HEIGHT="4" WIDTH="7" BORDER="0" SRC="../../../sitebuilder/shared/navbar/graphics/arrow.gif"></TD>
<TD>&nbsp;|&nbsp;</TD>
<TD CLASS="clsNavBarItem" expItemNum="3">Workshop<BR><IMG HEIGHT="4" WIDTH="7" BORDER="0" SRC="../../../sitebuilder/shared/navbar/graphics/arrow.gif"></TD>
<TD>&nbsp;|&nbsp;</TD>
<TD CLASS="clsNavBarItem" expItemNum="4">Tools&nbsp;&amp;&nbsp;Samples<BR><IMG HEIGHT="4" WIDTH="7" BORDER="0" SRC="../../../sitebuilder/shared/navbar/graphics/arrow.gif"></TD>
<TD>&nbsp;|&nbsp;</TD>
<TD CLASS="clsNavBarItem" expItemNum="5">Training<BR><IMG HEIGHT="4" WIDTH="7" BORDER="0" SRC="../../../sitebuilder/shared/navbar/graphics/arrow.gif"></TD>
<TD>&nbsp;|&nbsp;</TD>
<TD CLASS="clsNavBarItem" expItemNum="6">Site&nbsp;Info<BR><IMG HEIGHT="4" WIDTH="7" BORDER="0" SRC="../../../sitebuilder/shared/navbar/graphics/arrow.gif"></TD>
<TD WIDTH="100%"></TD>
</TR>
</TABLE>


<TABLE ID="tblNavLinks" CLASS="clsNavLinks" CELLPADDING="0" CELLSPACING="0" BORDER="0" WIDTH="100%">
<TR>
<TD COLSPAN="2" HEIGHT="8"><IMG WIDTH="1" HEIGHT="8" SRC="../../../sitebuilder/shared/graphics/trans.gif"></TD>
<TD ROWSPAN="2"><A HREF="../../../workshop/default.htm" TARGET="_top"><IMG ALIGN="right" HEIGHT="30" WIDTH="106" BORDER="0" ALT="Click to return to the Workshop home page" SRC="../../../workshop/graphics/wrkbrand2.gif" /></A><BR /></TD>
</TR>
<TR>
<TD ROWSPAN="2">
<A HREF="../../../workshop/server/pg00164.htm"><IMG HEIGHT="32" WIDTH="31" HSPACE="25" BORDER="0" ALT="Click to return to the Server Technologies home page" SRC="../../../workshop/graphics/icons//server.gif" /></A>
</TD>
<TD>
<TABLE CELLPADDING="3" CELLSPACING="0" BORDER="0">
<TR>

<TD><A ID="lnkShowImg" HREF="../../../workshop/server/toc.htm" TARGET="_top"><IMG ID="imgShow" CLASS="clsLeftMenu" HEIGHT="15" WIDTH="18" BORDER="0" SRC="../../../workshop/graphics/icons/nl-show-0.gif" ALT="" /></A><BR></TD>
<TD NOWRAP><A ID="lnkShowText" CLASS="clsLeftMenu" HREF="../../../workshop/server/toc.htm" TARGET="_top">show toc</A> &nbsp;&nbsp; </TD>

<TD><A ID="lnkSyncImg" HREF="../../../workshop/pg01517.htm#/workshop/server/asp/comp.htm" TARGET="_top"><IMG ID="imgSync" CLASS="clsLeftMenu" HEIGHT="15" WIDTH="18" BORDER="0" SRC="../../../workshop/graphics/icons/nl-sync-0.gif" ALT="" /></A><BR></TD>
<TD NOWRAP><A ID="lnkSyncText" CLASS="clsLeftMenu" HREF="../../../workshop/pg01517.htm#/workshop/server/asp/comp.htm" TARGET="_top">sync toc</A> &nbsp;&nbsp; </TD>

<TD><A ID="lnkSearchImg" HREF="http://www.microsoft.com/isapi/gosearch.asp?TARGET=/dev/web/default.asp" TARGET="_top"><IMG ID="imgSearch" CLASS="clsLeftMenu" HEIGHT="15" WIDTH="18" BORDER="0" SRC="../../../workshop/graphics/icons/nl-search-0.gif" ALT="" /></A><BR></TD>
<TD NOWRAP><A ID="lnkSearchText" CLASS="clsLeftMenu" HREF="http://www.microsoft.com/isapi/gosearch.asp?TARGET=/dev/web/default.asp" TARGET="_top">search</A> &nbsp;&nbsp; </TD>

<TD><A ID="lnkIndexImg" HREF="../../../workshop/index/pg00001.htm"><IMG ID="imgIndex" CLASS="clsLeftMenu" HEIGHT="15" WIDTH="18" BORDER="0" SRC="../../../workshop/graphics/icons/nl-index-0.gif" ALT="" /></A><BR></TD>
<TD NOWRAP><A ID="lnkIndexText" CLASS="clsLeftMenu" HREF="../../../workshop/index/pg00001.htm">index</A> &nbsp;&nbsp; </TD>

</TR>
</TABLE>
</TD>
</TR>
<TR>
<TD COLSPAN="2" WIDTH="100%">
<TABLE CELLPADDING="2" CELLSPACING="0" BORDER="0">
<TR>
<TD>&nbsp;</TD>
</TR>
</TABLE>
</TD>
</TR>
</TABLE>

<BR CLEAR="all" />
<DIV CLASS="clsBucketBranch"><A HREF="../../../workshop/pg00004.htm" TARGET="_top">Workshop</A>&nbsp;&nbsp;|&nbsp;&nbsp;<A HREF="../../../workshop/pg01517.htm#/workshop/server/pg00164.htm" TARGET="_top">Server Technologies</A></DIV>

<DIV CLASS="clsDocBody">

<!-- DOCUMENT CONTENT START -->

<H1><A NAME="DEVELOP" IDX_TYPE="task" IDX_CONCEPT="stopindex;Developing Active Server Components with ATL">Developing Active Server Components with ATL</A></H1>
<HR SIZE="1" />
<H6><A NAME="top2" IDX_TYPE="sbngen" IDX_CONCEPT="Components, server: developing with ATL;Active Server, developing components with ATL"></A></H6>
<P>George V. Reilly
<BR>Software Design Engineer, Internet Information Server
<P>April 2, 1997

<P>
<a name="top"></a><B>Contents</B>
<br><a href="comp.htm#why-bother"> Why Bother</a>?
<BR><a href="comp.htm#ATL"> ATL: Active Template Library</a>
<BR><a href="comp.htm#ATL-2.x"> ATL 2.<i>x</i></a>
<BR><a href="comp.htm#new-component"> Creating a component with ATL</a>
<BR><a href="comp.htm#simple-example"> Simple Example</a>
<BR><a href="comp.htm#ASP-intrinsics"> ASP Intrinsics</a>
<BR><a href="comp.htm#threading"> Threading</a>
<BR><a href="comp.htm#reporting-errors"> Reporting Errors</a>
<BR><a href="comp.htm#exceptions"> Exceptions</a>
<BR><a href="comp.htm#char-sets"> Character Sets</a>
<BR><a href="comp.htm#samples"> Samples</a>

<P>This article tells you how to write an Active Server Pages (ASP) component
with the Active Template Library (ATL), and when you might want to.  It
assumes that you're familiar with C++, know a little about Component Object Model (COM)
and ActiveX, and have a basic understanding of how ASP
works.

<h2><a name="why-bother" IDX_TYPE="sbngen" IDX_CONCEPT="Components, server: when and why to write">Why Bother?</a></h2>

<p>
Why would you want to bother with writing C++ components for
your Web server now that ASP is an integral part
of Microsoft's Internet Information Server (IIS) version 3.0?  Surely you can
throw away all of those laboriously written ISAPI extension DLLs
and CGI programs and just whip up a concoction of HTML and
Visual Basic&#174; Scripting Edition (VBScript) in a tenth of the time?

<p>
Yes and no.  It's certainly true that you can replace many ISAPI
extension DLLs and CGI programs with ASP scripts that are easier
to write, easier to customize, and easier to update, but there
is still a place for C++ programs on your Web server.

<p>
VBScript and JScript&#151; are powerful and useful, but they have
disadvantages, too.

<ul>
  <li><em>Performance</em>.
Interpreted languages are inherently slower than
well-written C++.  There is also overhead associated
with parsing and executing them, which uses CPU cycles
that might be put to better use in making the server
more responsive to other users.
<P>
  <li><em>Access to the operating system</em>.
Many features of the operating system are
difficult or impossible to use from VBScript: no access
to the system registry; no thread support; no file
mapping; and so forth.
<P>
  <li><em>Access to the missing features of Visual Basic</em>.
VBScript is missing many of the features of Visual
Basic.  Some of those features, such as forms, have no
place in a server-side scripting language; but being
able to use all of, say, the date-formatting facilities
would sometimes be very convenient.
<P>
  <li><em>Leverage existing code/code reuse</em>.
You may have existing C++ code that you want to use in
an ASP application; just wrap it up in an ASP component.
<P>
  <li><em>Separate the UI from the data processing</em>.
You can put ever-fancier VBScript user interfaces on
your applications, while keeping the guts of the
application in a common core.
<P>
  <li><em>Encapsulating business logic</em>.
Wrapping your business logic in a component makes it
easier to debug and easier to distribute.
<P>
  <li><em>Protect your Intellectual Property</em>.
If you're in the business of selling ASP applications to
other Web sites and you're writing those ASP applications in VBScript, then you're selling your source code to
your customers.
</ul>

The first two reasons apply only to components written in C++.  The
other reasons apply equally to components written in Visual Basic,
Java, or other languages.

<p>
Do not underestimate the usefulness of VBScript.  You can produce
working ASP applications using VBScript in a fraction of the time that
it takes to write C++ code, and they'll be good enough most of the
time.  The edit-compile-debug cycle is notably shorter, and it's much
easier to tweak the look of your pages.



<a name="when-write"></a>
<h3>When to Write a Component</h3>

<P>A few points you should bear in mind when deciding whether to
write a component:

<ul>
  <li>Writing components is time consuming.  You're likely to spend
considerably more time writing and debugging a component in C++
than you would writing an equivalent ASP program.  If you're
writing the component in the name of the great god Efficiency,
be sure that you really need to write the component.
Prototype it first in VBScript, and measure the performance.
Be sure that it really is a bottleneck, that it really is too
slow, that it really does use too much CPU time.
<P>
  <li>Writing components is expensive.  They take more time to write
and time is money.  They require more skilled, and hence more
expensive, programmers.
<P>
  <li>Components can't do everything that you might want to do on a
Web server.  Neither can ISAPI extension DLLs.  If you want to
do custom logging or change the HTML data stream sent back
to users' browsers, you'll have to write an ISAPI filter DLL.
That's beyond the scope of this article.
</ul>




<a name="which-lang"></a>
<h3>Which Language?</h3>

<P>Which language should you use to write a component?

<ul>
  <li><b>Visual Basic version 5</b><br>
Visual Basic version 5 components are easy to write because Visual Basic takes care of
lots of things for you, such as memory management and hiding
many of the details of COM.  Visual Basic version 5 can create
<a href="comp.htm#threading">apartment-threaded objects</a>, which are
recommended for good performance, whereas Visual Basic version 4 is restricted to
single-threaded objects and its runtime is not thread-safe.
There are some disadvantages: Visual Basic version 5, like VBScript, restricts
you in accessing the operating system.

  <li><b>Java/Visual J++&#153;</b><br>
Java is a powerful language, well suited for creating
server-side components.  It too takes care of many of the
tedious details for you, and it gives you better access to the
operating system than Visual Basic version 5 or VBScript, but there are some
things that you cannot do.  For example, some of the Win32
APIs expect pointers, and Java has no notion of a pointer.

  <li><b>C++</b><br>
C++ gives you the most power.  It's faster than Visual Basic version 5 or Java,
and it gives you full access to the operating system.  The
down side is that it's harder to write, and even with good
class libraries like ATL, you have more bookkeeping to do.

  <li><b>Other languages</b><br>
Any language capable of creating COM Automation servers can be
used to build ASP components.  For best results, you should
build both- or apartment-threaded in-proc servers.
</ul>

Later articles in this series will discuss writing components with Visual Basic,
Java, and MFC, and debugging components.

<P> <A HREF="comp.htm#top" CLASS="clsBackTop"><IMG SRC="../../../workshop/graphics/top.gif"  WIDTH="18" HEIGHT="8" BORDER="0" ALT="Top">Back to top</A>
<P>


<h2><a name="ATL" IDX_TYPE="sbngen" IDX_CONCEPT="ATL, for server components;Components, server: steps to create in ATL">ATL: Active Template Library</a></h2>

ATL, Microsoft's <A HREF="http://www.microsoft.com/visualc/prodinfo/" target="_top">
Active Template Library</a> <IMG SRC="../../../sitebuilder/graphics/leave-site.gif" WIDTH="17" HEIGHT="11" BORDER="0" ALT="Non-SBN link"> (formerly the ActiveX Template Library), is used to build simple COM objects that can be called
from an ASP page, Visual Basic, or other automation clients.

<p>
ATL is the recommended library for writing ASP and other ActiveX
components in C++ for the following reasons:
<ul>
  <li>It produces small, fast, industrial-strength components ("lean and mean")
  <li>It supports all COM threading models (single, apartment, free)
  <li>It supports IDispatch interfaces
  <li>It makes dual interfaces easy
  <li>It supports the COM error mechanism
  <li>It calls methods very quickly
  <li>It gives fine control over COM features ("closer to the metal")
  <li>It allows you to build several different types of objects
and controls, including:
<ul>
  <li>Minimal COM objects
  <li>Full controls
  <li>Internet Explorer controls
  <li>Property pages
  <li>Dialog boxes
</ul>
</ul>

<P> <A HREF="comp.htm#top" CLASS="clsBackTop"><IMG SRC="../../../workshop/graphics/top.gif"  WIDTH="18" HEIGHT="8" BORDER="0" ALT="Top">Back to top</A>
<P>

<a name="ATL-2.x"></a>
<h2>ATL version 2.<i>x</i></h2>

ATL version 2.<i>x</i> was released in mid-February, 1997.  ATL version 2.0 is available
for <A HREF="http://www.microsoft.com/visualc/prodinfo/" target="_top">
download</a> <IMG SRC="../../../sitebuilder/graphics/leave-site.gif" WIDTH="17" HEIGHT="11" BORDER="0" ALT="Non-SBN link"> for Microsoft Visual C++&#174; version 4.2, and ATL version 2.1 is an integral part
of Visual C++ 5.0 (available mid-March, 1997).

<p>
ATL version 2.0 requires  Visual C++ version 4.2b.  If you are using Visual C++ version
4.2, you must upgrade to Visual C++ version 4.2b with the
<A HREF="http://www.microsoft.com/visualc/prodinfo/archives/download/vc42b.htm" target="_top">
Visual C++ 4.2b Technology Update</a> <IMG SRC="../../../sitebuilder/graphics/leave-site.gif" WIDTH="17" HEIGHT="11" BORDER="0" ALT="Non-SBN link">.  Note that this patch
will not work with earlier or later versions of Visual C++, only
with Visual C++ version 4.2.

<P> <A HREF="comp.htm#top" CLASS="clsBackTop"><IMG SRC="../../../workshop/graphics/top.gif"  WIDTH="18" HEIGHT="8" BORDER="0" ALT="Top">Back to top</A>
<P>

<a name="new-component"></a>
<h2>Creating a Component with ATL</h2>

To create a new component:
<ul>
  <li>Start a New Project Workspace in Developer Studio.
  <li>Select ATL COM AppWizard.
  <li>Enter the name and location of the project.
  <li>Click Create.
  <li>Accept the defaults and click Finish.
</ul>

If you're worried about 8.3 names, be sure that the base name
of your project is no more than six characters, as IDL will generate
<i>Project</i>_i.c,
<i>Project</i>_p.c,
<i>Project</i>PS.def,
and
<i>Project</i>PS.mak.

<p>
Now that you've created the project, it's time to create a COM object
within the project.  In Visual C++ version 4.2, go to the <i>Insert</i> menu
of Developer Studio and select <i>Component...</i>.  The Component
Gallery will appear.  A number of tabs will appear at the bottom of
the picture, such as <i>Microsoft</i> and <i>OLE Controls</i>.  Scroll
right until you see the <i>ATL</i> tab.  Double-click the <i>ATL
Object Wizard</i>.

<p>
In Visual C++ version 5.0, go to the <i>Insert</i> menu, where you'll
see <i>New ATL Object...</i>. Or you can right-click the classes in
the <i>ClassView</i> pane, where you'll also see <i>New ATL
Object...</i>.

<p>
When the <i>ATL Object Wizard</i> pops up, you'll see two panes.  In
the left pane, click <i>Objects</i>.  In the right pane,
double-click <i>Simple Object</i>.  If you have Visual C++ version 5.0, you'll see
a number of additional objects; click <i>ActiveX Server
Component</i> instead.

<p>
The <i>ATL Object Wizard Properties</i> dialog box will appear.
On the <i>Names</i> tab, type the short name of your object.
The other names will be filled in automatically.  You can edit
them if you wish.  It's quite likely that you'll want to edit
the Prog ID.

<p>
On the <i>Attributes</i> tab, you may want to change the <i>Threading
Model</i> to <i>Both</i> (see <a href="comp.htm#threading">Threading</a> below
for a discussion of threading models).  You probably don't need to
support <i>Aggregation</i>.  See <a href="comp.htm#reporting-errors">Reporting
Errors</a> below for why you ought to support <i>ISupportErrorInfo</i>.
The other attributes should not need to be changed.

<p>
On the <i>ASP</i> tab (only present in Visual C++ version 5), you'll see a number of
options that will make much more sense after you read the section on
<a href="comp.htm#ASP-intrinsics">ASP intrinsics</a> below.  You can
selectively enable which intrinsics you want to use.

<P> <A HREF="comp.htm#top" CLASS="clsBackTop"><IMG SRC="../../../workshop/graphics/top.gif"  WIDTH="18" HEIGHT="8" BORDER="0" ALT="Top">Back to top</A>
<P>


<h2><a name="simple-example" IDX_TYPE="sbngen" IDX_CONCEPT="Components, server: ATL example">Simple Example</a></h2>

Let's build a really simple component,
<b>Upper</b>.
It has one method,
<b>ToUpper</b>,
which takes a string and converts it to uppercase.  For the sake of
this example, we'll use
<b>Upper1</b> as the
"short name" of the component.

<p>
To create a method that returns a value to VBScript, make the return
value be the last parameter to the method and declare it as
<b>[out, retval]</b>.

<p>
If you're using Visual C++ version 4.2, put the following in your
Upper.idl
file, in the
interface <b>IUpper1 : IDispatch</b> block:

<pre class=clsCode>
    [helpstring("Convert a string to uppercase")]
    HRESULT ToUpper([in] BSTR bstr,
                    [out, retval] BSTR* pbstrRetVal);
</pre>

If you're using Visual C++ version 5, right-click
<b>IUpper1</b> in
the <i>ClassView</i> pane and click <i>Add Method...</i>.  Type
<b>ToUpper</b>
as the <i>Method Name</> and
<pre class=clsCode>[in] BSTR bstr,
[out, retval] BSTR* pbstrRetVal</pre> in the
<i>Parameters</i>.  Use the <i>Attributes...</i> button to change the
helpstring.  When you click OK, appropriate code will be added to your
.IDL, .H, and .CPP files.
Of course, you still need to add the body of the
<b>ToUpper</b>
method, as shown below.

<p>
In Visual C++ version 4.2, declare the method in your component's
Upper1.h
file, at the end of the
<b>CUpper1</b> class:

<pre class=clsCode>
    public:
        STDMETHOD(ToUpper)(BSTR bstr, BSTR* pbstrRetVal);
</pre>

and define the
<b>ToUpper</b>
method thus in your component's
Upper1.cpp file:

<pre class=clsCode>
    STDMETHODIMP
    CUpper1::ToUpper(
        BSTR bstr,
        BSTR* pbstrRetVal)
    {
        // validate parameters
        if (bstr == NULL || pbstrRetVal == NULL)
        return E_POINTER;

    // Create a temporary CComBSTR
    CComBSTR bstrTemp(bstr);

    if (!bstrTemp)
        return E_OUTOFMEMORY;

    // Make string uppercase
    wcsupr(bstrTemp);

    // Return m_str member of bstrTemp
    *pbstrRetVal = bstrTemp.Detach();

    return S_OK;
    }
</pre>

Note the use of the wrapper class,
<b>CComBSTR</b>,
which adds some useful functionality to the native COM datatype,
<b>BSTR</b>.
Another useful class is
<b>CComVariant</b>,
which wraps
<b>VARIANT</b>s.
Two other wrapper classes,
<b>CComPtr</b> and
<b>CComQIPtr</b>,
are discussed below in the section on
<a href="comp.htm#ASP-intrinsics">ASP intrinsics</a>.

<p>
This code is quite paranoid.  For quick-and-dirty tests, you
can probably safely eliminate both tests, as ASP will call you with
valid parameters and the
<b>CComBSTR</b>
constructor is unlikely to fail.  In production code, you ought to
handle these potential failures.

<p>
The <b>ToUpper</b>
method can be called with the following script,
Upper.asp.
Don't forget to put the script in an executable virtual directory.

<pre class=clsCode>
    &lt;%
      Set oUpper = Server.CreateObject("Upper.Upper1.1")
      str = "Hello, World!"
      upper = oUpper.ToUpper(str)
    %&gt;

    The uppercase of "&lt;% = str %&gt;" is "&lt;%  = upper %&gt;".
</pre>

VBScript checks the
<b>HRESULT</b>
return value for you under the covers.  If you return a failure
error code, then the script will abort with an error message,
unless there's some error handling in it (e.g.,
<b>On Error Next</b>).

<p>
If you move the component to another machine, you'll have to run
regsvr32.exe
to register it.  The wizard-generated makefile does this automatically whenever you recompile the component.

<p>
<b>Note:</b> If you're testing your components inside Active Server
Pages 1.0 (instead of, say, Visual Basic version 5), you will have to <i>stop and
restart</i> the Web service before you can relink your components.
You will also have to stop and restart the FTP and Gopher services, if
you're running them.  On a development machine, just turn the FTP
and Gopher services off permanently unless you really need them.

<p>
You can make restarting the Web service considerably faster if you
create the following value in the registry, of type REG_DWORD, and set
it to zero:
<pre class=clsCode>
   HKEY_LOCAL_MACHINE
    \SYSTEM
     \CurrentControlSet
      \Services
       \<em>W3SVC</em>
        \Parameters
         \EnableSvcLoc
</pre>

Do the same for MSFTPSVC and GOPHERSVC, if you're running them.  On a
production server, the service locater should be enabled.


<P> <A HREF="comp.htm#top" CLASS="clsBackTop"><IMG SRC="../../../workshop/graphics/top.gif"  WIDTH="18" HEIGHT="8" BORDER="0" ALT="Top">Back to top</A>
<P>


<h2><a name="ASP-intrinsics" IDX_TYPE="sbngen" IDX_CONCEPT="Components, server: ASP intrinsics">ASP Intrinsics</a></h2>

The ASP intrinsics are the built-in Application, Session, Server,
Request, and Response objects.  Most ASP components need one or more
of them to make full use of ASP's facilities.

<p>
To use the intrinsics, you must provide two methods in your object,
<b>OnStartPage</b> and
<b>OnEndPage</b>.
These optional methods are called by ASP on an object whenever a
page is opened or closed by the user's Web browser, and they bracket
the lifetime of the page.

<p>
The <b>OnStartPage</b>
method receives an
<b>IDispatch*</b>
that can be QueryInterface'd for a pointer to an
<b>IScriptingContext</b>
interface, which provides methods for getting pointers to the
intrinsic objects.

<p>
Visual C++ version 5.0 allows you to automatically add these methods when you
create the object, by using the <i>ASP</i> tab in the <i>ATL Object
Wizard Properties</i> dialog box.

<p>
In Visual C++ version 4.2, add the following method declarations to your
.IDL file:

<pre class=clsCode>
    HRESULT OnStartPage(IDispatch* pScriptContext);
    HRESULT OnEndPage();
</pre>

In your .H file, add

<pre class=clsCode>
    #include &lt;asptlb.h&gt;
</pre>

near the top and add the following declarations at the bottom of the class,
<b>C<i>Obj</i></b>:

<pre class=clsCode>
public:
  STDMETHOD(OnStartPage)(IDispatch*);
  STDMETHOD(OnEndPage)();

private:
    // ASP intrinsic objects
    CComPtr<IRequest>           m_piRequest;
    CComPtr<IResponse>          m_piResponse;
    CComPtr<IApplicationObject> m_piApplication;
    CComPtr<ISessionObject>     m_piSession;
    CComPtr<IServer>            m_piServer;
</pre>

Finally, add the following method definitions to your
.CPP file:

<pre class=clsCode>
    STDMETHODIMP
    CObj::OnStartPage(
        IDispatch* pScriptContext)
    {
        if (pScriptContext == NULL)
            return E_POINTER;

        // Get the IScriptingContext Interface
        CComQIPtr&lt;IScriptingContext, &amp;IID_IScriptingContext&gt;
            pContext = pScriptContext;

        if (!pContext)
            return E_NOINTERFACE;

        // Get Request Object Pointer
        HRESULT hr = pContext-&gt;get_Request(&amp;m_piRequest);

        // Get Response Object Pointer
        if (SUCCEEDED(hr))
            hr = pContext-&gt;get_Response(&amp;m_piResponse);

        // Get Application Object Pointer
        if (SUCCEEDED(hr))
            hr = pContext-&gt;get_Application(&amp;m_piApplication);

        // Get Session Object Pointer
        if (SUCCEEDED(hr))
            hr = pContext-&gt;get_Session(&amp;m_piSession);

        // Get Server Object Pointer
        if (SUCCEEDED(hr))
            hr = pContext-&gt;get_Server(&amp;m_piServer);

        if (FAILED(hr))
        {
            // Release all pointers upon failure
            m_piRequest.Release();
            m_piResponse.Release();
            m_piApplication.Release();
            m_piSession.Release();
            m_piServer.Release();
        }

        return hr;
    }



    STDMETHODIMP
    C<em>Obj</em>::OnEndPage()
    {
        m_piRequest.Release();
        m_piResponse.Release();
        m_piApplication.Release();
        m_piSession.Release();
        m_piServer.Release();

        return S_OK;
    }
</pre>

If you don't need all five objects, remove the ones you don't
need from your code.



<a name="CComPtr"></a>
<h3>CComPtr and CComQIPtr</h3>

<P>Take note of the use of the
<b>CComPtr</b> and
<b>CComQIPtr</b>
variables above.  These are type-safe smart pointer classes that
encapsulate traditional pointers to interfaces and can be used
interchangeably with them.  They give you considerable notational
convenience and the assurance that their destructors will automatically
<b>Release</b> interfaces.
A <b>CComQIPtr</b>
automatically queries an interface when it is constructed; a
<b>CComPtr</b>
does not.

<p>
Note that for variables of both classes, you should use
<b>piFoo.Release()</b>
and not
<b>piFoo-&gt;Release()</b>.
<b>piFoo.Release()</b>
resets
<b>piFoo.p</b> to
<b>NULL</b>
after calling
<b>piFoo.p-&gt;Release()</b>,
while
<b>piFoo-&gt;Release()</b>
uses the overloaded
<b>operator-&gt;</b>
to call
<b>p-&gt;Release()</b>
directly, leaving
<b>piFoo</b>
in an inconsistent state.  That apart, you treat a
<b>CComPtr&lt;IFoo&gt;&nbsp;piFoo</b>
exactly as you would an
<b>IFoo*&nbsp;piFoo</b>.



<a name="object-scope"></a>
<h3>Object Scope</h3>
<P>
<b>Note</b>:
<br><b>OnStartPage</b> and
<b>OnEndPage</b>
are only called on page-level and session-level objects.  If your object
has application-level scope (e.g., if it was created in
<b>Application_OnStart</b>
in global.asa
and added to the Application object), these methods will <i>not</i>
be called.

<p>
If your object is somehow created by some means other than
<b>Server.CreateObject</b>
or <b>&lt;OBJECT RUNAT=Server ...&gt;</b>,
your <b>OnStartPage</b>
and <b>OnEndPage</b>
methods will not be called either.

<p>
Therefore, check that your pointers to the intrinsics are
valid before you use them, with code such as this:

<pre class=clsCode>
    if (!m_piRequest || !m_piResponse)
        return ::ReportError(E_NOINTERFACE);
</pre>

<p>
You might wonder how <b>!</b>
is being used on objects.  Simple:
<b>CComPtr</b> and
<b>CComQIPtr</b>
both define
<b>operator!</b>
to check their internal pointer,
<b>p</b>,
and return <b>TRUE</b>
if it's NULL.  See <a href="comp.htm#reporting-errors">Reporting Errors</a>
for an explanation of
<b>ReportError</b>.



<a name="asptlb.h"></a>
<h3>asptlb.h</h3>
<P>
To build an object that uses
<b>IScriptingContext</b>,
you will need to copy
<b><i>InstallDir</i>\ASP\Cmpnts\asptlb.h</b>
to your include directory,
<b>\Program&nbsp;Files\DevStudio\VC\include</b>.
On Windows NT, the default installation directory is
<b>%SystemRoot%\System32\Inetsrv</b>.
On Windows 95, it is
<b>\Program&nbsp;Files\WebSvr\System</b>.
If you get linker errors, you may need to
<b>#include &lt;initguid.h&gt;</b>
in <i>one</i> .CPP
file before you
<b>#include &lt;asptlb.h&gt;</b>.

<P> <A HREF="comp.htm#top" CLASS="clsBackTop"><IMG SRC="../../../workshop/graphics/top.gif"  WIDTH="18" HEIGHT="8" BORDER="0" ALT="Top">Back to top</A>
<P>

<h2><a name="threading" IDX_TYPE="sbngen" IDX_CONCEPT="IIS, threading model definitions">Threading</a></h2>

These are the threading models that you need to understand.

<ul>
  <li><b>Single-threading model</b>.
Only one thread uses COM and all calls to COM objects are
synchronized by COM.  Except for the simplest of applications,
this leads to unacceptable performance on a server such as ASP.

  <li><b>Apartment-threading model</b>.
One or more threads in a process use COM, and calls to COM
objects are synchronized by COM.  An instance of an object is
always called on the same thread, guaranteeing serial access
to it.  Interfaces are marshalled between threads.  You need to
protect shared data only, not per-instance data.
Apartment-threaded objects give acceptable performance.

  <li><b>Free-threading model</b>.
One or more threads in a process use COM, and calls to COM
objects are synchronized by the objects themselves.
Interfaces are not marshalled between threads.  You must also
protect per-instance data.

  <li><b>"Both"-threading model</b>.
Objects are marked as both apartment-threaded and
free-threaded.  This is the default for objects produced by
ATL, and this is the recommended model.
</ul>

<b>Note:</b> With Active Server Pages, a pure free-threaded object will not
perform as well as a both-threaded object or an apartment-threaded
object.

<p>
Your objects must be thread-safe and they must not deadlock.  It is up
to you to protect shared data and global data with critical sections
or other synchronization mechanisms.  Remember: Static data in
functions, classes, and at file level is also shared data, as may be
files, registry keys, mail slots, and other external system resources.

<p>
For a comprehensive discussion of threading models, see Knowledge Base
article Q150777,
<a href="http://support.microsoft.com/support/kb/articles/q150/7/77.asp" target="_top">
Descriptions and Workings of OLE Threading Models</a> <IMG SRC="../../../sitebuilder/graphics/leave-site.gif" WIDTH="17" HEIGHT="11" BORDER="0" ALT="Non-SBN link">.

<P> <A HREF="comp.htm#top" CLASS="clsBackTop"><IMG SRC="../../../workshop/graphics/top.gif"  WIDTH="18" HEIGHT="8" BORDER="0" ALT="Top">Back to top</A>
<P>

<h2><a name="reporting-errors" IDX_TYPE="sbngen" IDX_CONCEPT="Components, server: error reporting">Reporting Errors</a></h2>

If you want to be a little friendlier to the users of your component, you can
set the <b>Error Info</b>.  It's up to the calling application to decide what to
do with it.  By default, ASP/VBScript will print the error number (and
message, if there is one) and abort the page.  Use
<b>On Error Next</b>
to override this behavior.

<p>

Here is some code
 that takes a Win32 error or an HRESULT, gets the
associated error message (if it exists) and reports that, and then
returns the error as an HRESULT.
<P><pre class=clsCode>
  HRESULT
  ReportError(
      DWORD dwErr)
  {
      return ::ReportError(HRESULT_FROM_WIN32(dwErr), dwErr);
  }


  HRESULT
  ReportError(
      HRESULT hr)
  {
      return ::ReportError(hr, (DWORD) hr);
  }


  HRESULT
  ReportError(
      HRESULT hr,
      DWORD   dwErr)
  {
      HLOCAL pMsgBuf = NULL;

      // If there's a message associated with this error, report that
      if (::FormatMessage(
          FORMAT_MESSAGE_ALLOCATE_BUFFER | FORMAT_MESSAGE_FROM_SYSTEM,
          NULL, dwErr,
          MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT), // Default language
          (LPTSTR) &pMsgBuf, 0, NULL)
      &gt; 0)
  {
      AtlReportError(CLSID_C<em>Obj</em>, (LPCTSTR) pMsgBuf, IID_I<em>Obj</em>, hr);
  }

  // TODO: add some error messages to the string resources and
  // return those, if FormatMessage doesn't return anything (not
  // all system errors have associated error messages).

  // Free the buffer, which was allocated by FormatMessage
  if (pMsgBuf != NULL)
      ::LocalFree(pMsgBuf);

  return hr;
  }
</pre>

You might call it like this:

<pre class=clsCode>
    if (bstrName == NULL)
        return ::ReportError(E_POINTER);
</pre>

or like this:

<pre class=clsCode>
    HANDLE hFile = CreateFile(...);
    if (hFile == INVALID_HANDLE_VALUE)
        return ::ReportError(::GetLastError());
</pre>

<P> <A HREF="comp.htm#top" CLASS="clsBackTop"><IMG SRC="../../../workshop/graphics/top.gif"  WIDTH="18" HEIGHT="8" BORDER="0" ALT="Top">Back to top</A>
<P>


<h2><a name="exceptions" IDX_TYPE="sbngen" IDX_CONCEPT="Components, server: exception handling">Exceptions</a></h2>

C++ exceptions are turned off for ATL components, by default, to
reduce the size of the components, as the C Runtime Library is
required if exceptions are enabled.  This has a few implications,
notably that
<b>new</b> does
not throw exceptions, as it normally would.  Instead it
returns <b>NULL</b>.
C++ exception handling can be turned on, however, and it will be if
MFC is also being used.  Accordingly, the ATL source is sprinkled with
code like this:

<pre class=clsCode>
    CFoo* pFoo = NULL;
    ATLTRY(pFoo = new CFoo(_T("Hello"), 7))
    if (pFoo == NULL)
        return E_OUTOFMEMORY;
</pre>

where <b>ATLTRY</b>
is defined as:

<pre class=clsCode>
#if defined (_CPPUNWIND) & \
    (defined(_ATL_EXCEPTIONS) | defined(_AFX))
# define ATLTRY(x) try{x;} catch(...) {}
#else
# define ATLTRY(x) x;
#endif

</pre>

It's up to you to decide if you want to turn on exceptions.  Making a
component 25K larger by linking in the C Runtime Library is much less
of an issue for server components than for downloadable browser
components, and you probably want other features of the CRT anyway.
If you do turn on exceptions, be aware that it is considered extremely
bad form to throw C++ exceptions or SEH exceptions across COM
boundaries, so you should catch all exceptions thrown in your code.
If you leave exceptions disabled, then you must check for
<b>NULL</b>.

<P> <A HREF="comp.htm#top" CLASS="clsBackTop"><IMG SRC="../../../workshop/graphics/top.gif"  WIDTH="18" HEIGHT="8" BORDER="0" ALT="Top">Back to top</A>
<P>


<h2><a name="char-sets" IDX_TYPE="sbngen" IDX_CONCEPT="Components, server: character sets with">Character Sets</A></h2>

OLE/ActiveX is all-Unicode, Windows NT uses Unicode internally, but
Windows 95 uses the ANSI character set.  ASP runs on both NT and
Windows 95, so for maximum portability, you should not assume that
your components will be running on a Unicode platform and take short
cuts such as the following:

<pre class=clsCode>
     CreateFileW(..., bstrFilename, ...)
</pre>

as they will fail on Windows 95.  ATL comes with a number of
easy-to-use macros such as
<b>OLE2T</b>
for converting between
<b>BSTR</b>s,
Unicode, ANSI, and
<b>TCHAR</b>s.
One caveat: These macros use
<b>_alloca</b>
internally, which allocates memory on the <i>stack</i>, so you must
be careful about returning the results of these macros from functions.

<P> <A HREF="comp.htm#top" CLASS="clsBackTop"><IMG SRC="../../../workshop/graphics/top.gif"  WIDTH="18" HEIGHT="8" BORDER="0" ALT="Top">Back to top</A>
<P>


<h2><a name="samples" IDX_TYPE="sbngen" IDX_CONCEPT="Components, server: examples of with ATL">Samples</a></h2>

A number of samples are now available on the
<a href="http://www.microsoft.com/windows/downloads/default.asp?CustArea=bus&Site=nts&Product=Internet+Information+Server&Category=Administrative+Tools+%26+Accessories&x=11&y=10" target="_top">
Microsoft IIS Samples site</a> <IMG SRC="../../../sitebuilder/graphics/leave-site.gif" WIDTH="17" HEIGHT="11" BORDER="0" ALT="Non-SBN link">.  They include:

<ul>
  <li>Two small components, Simple and Power, each written in
ATL, MFC, Java, Visual Basic version 4, and Visual Basic version 5, so that you can compare and
contrast their implementations
  <li>A Registry Access component (ATL)
  <li>A Page Counter component (ATL)
  <li>A Permission Checker component (ATL)
  <li>An HTML Database Table formatting component (Java)
  <li>A Text Formatter component (parallel implementations in
ATL, Java, and Visual Basic version 5)
</ul>

Other components on the site include:
<ul>
  <li>The Adventure Works application
  <li>An IDC/HTX to ASP conversion utility
  <li>An ASP debugging script
  <li>An ISAPI filter that allows
.ASP
scripts to execute in virtual directories that lack execute
permissions
</ul>



<p><i><a href="mailto:georgere@microsoft.com">George V. Reilly</a>
works on ASP and IIS performance issues.  He wrote many of the
<a href="http://www.microsoft.com/isapi/gobackoffice.asp?TARGET=/downtrial/moreinfo/iissamples.asp" target="_top">
IIS Sample Components for Active Server Pages</a>.</i>
<P>
<P>
<P><A HREF="comp.htm#top" CLASS="clsBackTop"><IMG SRC="../../../workshop/graphics/top.gif" WIDTH="18" HEIGHT="8" BORDER="0" ALT="Back to top">Back to top</A></P>

<P>





<!-- DOCUMENT CONTENT END -->

</DIV>

<DIV CLASS="clsDocBody">
<HR SIZE="1" />
<P><I>Did you find this article useful? Gripes? Compliments? Suggestions for other articles? <A TITLE="Go ahead. Make our day! Send us your thoughts." HREF="../../../sitebuilder/pg01516.htm" TARGET="_top">Write us!</A></I></P>
<P ID="pBackTop"><A HREF="comp.htm#top" CLASS="clsBackTop"><IMG SRC="../../../workshop/graphics/top.gif" WIDTH="18" HEIGHT="8" BORDER="0" ALT="Back to top">Back to top</A></P>

<P CLASS="clsIncCpyRt">

</P>

&copy; <A CLASS="clsIncCpyRt" HREF="http://www.microsoft.com/misc/cpyright.htm" TARGET="_top">1998 Microsoft Corporation. All rights reserved. Terms of use</A>.

<P>&nbsp;</P>
</DIV>
<SCRIPT LANGUAGE="JavaScript"><!--

function CheckToTop()
{
var eBody = document.body;
if (eBody.scrollHeight > eBody.offsetHeight) pBackTop.style.display = 'block';
}

//--></SCRIPT>

<DIV ID="divMenu1" CLASS="clsMenu" ONMOUSEOVER="Menu_hover();" ONMOUSEOUT="Menu_hover();" ONCLICK="Menu_click();">
<DIV expURL="../../../sitebuilder/magazine/default.htm">Magazine Home</DIV>
<DIV expURL="../../../sitebuilder/magazine/jane.htm">Ask Jane</DIV>
<DIV expURL="../../../sitebuilder/magazine/dude.htm">DHTML Dude</DIV>
<DIV expURL="../../../sitebuilder/magazine/xml.htm">Extreme XML</DIV>
<DIV expURL="../../../sitebuilder/magazine/starters.htm">For Starters</DIV>
<DIV expURL="../../../sitebuilder/magazine/hess.htm">More or Hess</DIV>
<DIV expURL="../../../sitebuilder/magazine/server.htm">Servin' It Up</DIV>
<DIV expURL="../../../sitebuilder/magazine/site.htm">Site Lights</DIV>
<DIV expURL="../../../sitebuilder/magazine/webmen.htm">Web Men Talking</DIV>
</DIV>
<DIV ID="divMenu2" CLASS="clsMenu" ONMOUSEOVER="Menu_hover();" ONMOUSEOUT="Menu_hover();" ONCLICK="Menu_click();">
<DIV expURL="http://www.microsoft.com/sbnmember/default.asp">Member Community Home</DIV>
<DIV expURL="http://www.microsoft.com/sbnmember/freebies/default.asp">Benefits: Freebies &amp; Discounts</DIV>
<DIV expURL="http://www.microsoft.com/sbnmember/promote/default.asp">Benefits: Promote Your Site</DIV>
<DIV expURL="http://www.microsoft.com/sbnmember/connect/default.asp">Benefits: Connect with Your Peers</DIV>
<DIV expURL="http://www.microsoft.com/sbnmember/glance-lev.asp">Benefits at a Glance</DIV>
<DIV expURL="http://www.microsoft.com/sbnmember/osig/default.asp">Online Special-Interest Groups</DIV>
<DIV expURL="http://www.microsoft.com/sbnmember/levels/member.asp">Your Membership</DIV>
<DIV expURL="http://www.microsoft.com/sbnmember/freebies/stores.asp">SBN Stores</DIV>
<DIV expURL="http://www.microsoft.com/sbnmember/apply/registration.asp">Join Now</DIV>
</DIV>
<DIV ID="divMenu3" CLASS="clsMenu" ONMOUSEOVER="Menu_hover();" ONMOUSEOUT="Menu_hover();" ONCLICK="Menu_click();">
<DIV expURL="../../../workshop/default.htm">Workshop Home</DIV>
<DIV expURL="../../../workshop/c-frame.htm#/workshop/essentials/default.htm">Essentials</DIV>
<DIV expURL="../../../workshop/c-frame.htm#/workshop/delivery/default.htm">Content &amp; Component Delivery</DIV>
<DIV expURL="../../../workshop/c-frame.htm#/workshop/components/default.htm">Component Development</DIV>
<DIV expURL="../../../workshop/c-frame.htm#/workshop/database/default.htm">Data Access &amp; Databases</DIV>
<DIV expURL="../../../workshop/design/default.htm">Design</DIV>
<DIV expURL="../../../workshop/c-frame.htm#/workshop/author/default.htm">DHTML, HTML &amp; CSS</DIV>
<DIV expURL="../../../workshop/c-frame.htm#/xml/default.htm">Extensible Markup Language (XML)</DIV>
<DIV expURL="../../../workshop/c-frame.htm#/workshop/languages/default.htm">Languages &amp; Development Tools</DIV>
<DIV expURL="../../../workshop/c-frame.htm#/workshop/messaging/default.htm">Messaging &amp; Collaboration</DIV>
<DIV expURL="../../../workshop/c-frame.htm#/workshop/networking/default.htm">Networking, Protocols &amp; Data Formats</DIV>
<DIV expURL="../../../workshop/c-frame.htm#/workshop/browser/default.htm">Reusing Browser Technology</DIV>
<DIV expURL="../../../workshop/c-frame.htm#/workshop/security/default.htm">Security &amp; Cryptography</DIV>
<DIV expURL="../../../workshop/c-frame.htm#/workshop/server/default.htm">Server Technologies</DIV>
<DIV expURL="../../../workshop/c-frame.htm#/workshop/imedia/default.htm">Streaming &amp; Interactive Media</DIV>
<DIV expURL="../../../workshop/c-frame.htm#/workshop/management/default.htm">Web Content Management</DIV>
<DIV expURL="../../../workshop/index/default.htm">Workshop Index</DIV>
</DIV>
<DIV ID="divMenu4" CLASS="clsMenu" ONMOUSEOVER="Menu_hover();" ONMOUSEOUT="Menu_hover();" ONCLICK="Menu_click();">
<DIV expURL="../../../gallery/default.htm">Tools &amp; Samples Home</DIV>
<DIV expURL="../../../workshop/c-frame.htm#/gallery/tools/default.htm">Tools</DIV>
<DIV expURL="../../../workshop/c-frame.htm#/gallery/samples/default.htm">Samples, Headers, Libs</DIV>
<DIV expURL="../../../workshop/c-frame.htm#/gallery/images/default.htm">Images</DIV>
<DIV expURL="../../../workshop/c-frame.htm#/gallery/sounds/default.htm">Sounds</DIV>
<DIV expURL="../../../workshop/c-frame.htm#/gallery/stylesheets/default.htm">Style Sheets</DIV>
<DIV expURL="http://www.microsoft.com/typography/fontpack/win.htm">Web Fonts</DIV>
</DIV>
<DIV ID="divMenu5" CLASS="clsMenu" ONMOUSEOVER="Menu_hover();" ONMOUSEOUT="Menu_hover();" ONCLICK="Menu_click();">
<DIV expURL="../../../devtraining/default.htm">Training Home</DIV>
<DIV expURL="../../../workshop/c-frame.htm#/devtraining/seminars/default.htm">SBN Live Seminars</DIV>
<DIV expURL="../../../workshop/c-frame.htm#/devtraining/chat/default.htm">SBN Live Chats</DIV>
<DIV expURL="../../../workshop/c-frame.htm#/devtraining/atec.htm">Courses</DIV>
<DIV expURL="../../../workshop/c-frame.htm#/devtraining/peer/default.htm">Peer Support</DIV>
<DIV expURL="../../../workshop/c-frame.htm#/devtraining/mastering.htm">CD-ROM Training</DIV>
<DIV expURL="../../../workshop/c-frame.htm#/devtraining/books_kits.htm">Books & Training Kits</DIV>
<DIV expURL="../../../workshop/c-frame.htm#/devtraining/mscert/default.htm">Certification</DIV>
</DIV>
<DIV ID="divMenu6" CLASS="clsMenu" ONMOUSEOVER="Menu_hover();" ONMOUSEOUT="Menu_hover();" ONCLICK="Menu_click();">
<DIV expURL="../../../sitebuilder/default.htm">SBN Home</DIV>
<DIV expURL="../../../sitebuilder/siteinfo/newtosite.htm">New to SBN?</DIV>
<DIV expURL="../../../sitebuilder/whatsnew.htm">What's New on SBN</DIV>
<DIV expURL="../../../sitebuilder/siteinfo/sitemap.htm">Site Map</DIV>
<DIV expURL="http://www.microsoft.com/isapi/gosearch.asp?TARGET=/dev/web/default.asp">Site Search</DIV>
<DIV expURL="../../../sitebuilder/siteinfo/glossary/default.htm">Glossary</DIV>
<DIV expURL="../../../sitebuilder/write-us.htm">Write Us</DIV>
<DIV expURL="../../../sitebuilder/siteinfo/about.htm">About This Site</DIV>
</DIV>
<SCRIPT LANGUAGE="JavaScript" SRC="../../../sitebuilder/shared/js/navbar.js"></SCRIPT> 
<SCRIPT LANGUAGE="JavaScript" SRC="../../../sitebuilder/shared/js/navlinks.js"></SCRIPT>


</BODY>
</HTML>
