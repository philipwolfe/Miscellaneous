
<HTML>
<HEAD>


<TITLE>SBN Server: Microsoft Windows NT Server Migration Lab</TITLE>

<META NAME="Description" CONTENT="How to Migrate a UNIX-Based Web Server Running Netscape Enterprise Server or Apache to Windows NT Server 4.0 with IIS 4.0" />
<META NAME="Keywords" CONTENT="Windows NT Server, Web Server migration, IIS" />
<META NAME="Robots" CONTENT="All" />

<META NAME="Author" CONTENT="Microsoft Corporation" />
<META NAME="Posted" CONTENT="" />
<META NAME="Updated" CONTENT="10/09/1998" />

<META NAME="MS.LOCALE" CONTENT="EN-US" />
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1" />

<LINK REL="stylesheet" TYPE="text/css" HREF="../../../sitebuilder/shared/css/navbar.css" />
<LINK REL="stylesheet" TYPE="text/css" HREF="../../../sitebuilder/shared/css/ie4-wks.css" />


<SCRIPT LANGUAGE="JavaScript"><!--

// -----------------------------------------------------------
// Client-side BrowserData constructor
// Populated using data from server-side oBD object to avoid redundancy
// -----------------------------------------------------------

function BrowserData()
{
this.userAgent = "Mozilla/4.0 (compatible; MSIE 4.01; Windows NT)";
this.browser = "MSIE";
this.majorVer = "4";
this.minorVer = "01";
this.betaVer = 0;
this.platform = "NT";
this.getsNavBar = true;
this.doesActiveX = true;

}
var oBD = new BrowserData();

//--></SCRIPT>

<SCRIPT LANGUAGE="Javascript"><!--

// -----------------------------------------------------------
// window_load()
// Container function for load.
// -----------------------------------------------------------

function window_load()
{
if (oBD.getsNavBar)
{
if ("function" == typeof(InitNavLinks)) InitNavLinks();
if ("function" == typeof(CheckToTop)) CheckToTop();
}
}
window.onload = window_load;

//--></SCRIPT>

</HEAD>

<BODY TOPMARGIN="0" LEFTMARGIN="0" MARGINHEIGHT="0" MARGINWIDTH="0" BGCOLOR="#FFFFFF">


<TABLE WIDTH="100%" CELLPADDING="0" CELLSPACING="0" BORDER="0">
<TR>
<TD ROWSPAN="2" WIDTH="460" VALIGN="top"><NOBR><A HREF="http://www.microsoft.com/" TARGET="_top"><IMG SRC="../../../library/images/gifs/toolbar/home.gif" WIDTH="103" HEIGHT="21" ALT="Microsoft Home" BORDER="0"></A><A HREF="http://www.microsoft.com/PRODUCTS/DEFAULT.asp?DIVISIONID="10"" TARGET="_top"><IMG SRC="../../../library/images/gifs/toolbar/prod.gif" WIDTH="81" HEIGHT="21" ALT="products" BORDER="0"></A><A HREF="http://www.microsoft.com/search/default.asp" TARGET="_top"><IMG SRC="../../../library/images/gifs/toolbar/search.gif" WIDTH="68" HEIGHT="21" ALT="search" BORDER="0"></A><A HREF="http://www.microsoft.com/ISAPI/GOSUPPORT.asp?TARGET=/SUPPORT/" TARGET="_top"><IMG SRC="../../../library/images/gifs/toolbar/support.gif" WIDTH="74" HEIGHT="21" ALT="support" BORDER="0"></A><A HREF="http://www.microsoft.com/referral/default.asp" TARGET="_top"><IMG SRC="../../../library/images/gifs/toolbar/shop.gif" WIDTH="55" HEIGHT="21" ALT="shop" BORDER="0"></A><A HREF="http://www.microsoft.com/ISAPI/GOREGWIZ.asp?TARGET=/REGWIZ/REGWIZ.asp" TARGET="_top"><IMG SRC="../../../library/images/gifs/toolbar/write.gif" WIDTH="78" HEIGHT="21" ALT="Write Us" BORDER="0"></A><IMG SRC="../../../library/images/gifs/toolbar/spacer.gif" WIDTH="1" HEIGHT="21" ALT="" BORDER="0"></NOBR></TD>
<TD BGCOLOR="#000000" WIDTH="100%" HEIGHT="20">&nbsp;</TD>
<TD ROWSPAN="2" WIDTH="91" ALIGN="right" VALIGN="top"><A HREF="http://www.microsoft.com/" TARGET="_top"><IMG SRC="../../../library/images/gifs/toolbar/msft.gif" WIDTH="91" HEIGHT="21" ALT="Microsoft Home" BORDER="0"></A></TD>
</TR>
<TR>
<TD COLSPAN="3" BGCOLOR="#FFFFFF" WIDTH="100%" HEIGHT="1"></TD>
</TR>
</TABLE>

<TABLE ID="tblNavBar" BORDER="0" CELLPADDING="0" CELLSPACING="0">
<TR VALIGN="top">
<TD CLASS="clsSBNLogo" TITLE="SBN Home" HEIGHT="34" WIDTH="90"><A HREF="/sitebuilder/default.htm" TARGET="_top" expNoTOC="true"><IMG HEIGHT="34" WIDTH="90" BORDER="0" SRC="../../../sitebuilder/shared/navbar/graphics/sbnbrand2.gif" ALT="SBN Home" /></A></TD>
<TD CLASS="clsNavBarItem" expItemNum="1">Magazine<BR><IMG HEIGHT="4" WIDTH="7" BORDER="0" SRC="../../../sitebuilder/shared/navbar/graphics/arrow.gif"></TD>
<TD>&nbsp;|&nbsp;</TD>
<TD CLASS="clsNavBarItem" expItemNum="2">Community<BR><IMG HEIGHT="4" WIDTH="7" BORDER="0" SRC="../../../sitebuilder/shared/navbar/graphics/arrow.gif"></TD>
<TD>&nbsp;|&nbsp;</TD>
<TD CLASS="clsNavBarItem" expItemNum="3">Workshop<BR><IMG HEIGHT="4" WIDTH="7" BORDER="0" SRC="../../../sitebuilder/shared/navbar/graphics/arrow.gif"></TD>
<TD>&nbsp;|&nbsp;</TD>
<TD CLASS="clsNavBarItem" expItemNum="4">Tools&nbsp;&amp;&nbsp;Samples<BR><IMG HEIGHT="4" WIDTH="7" BORDER="0" SRC="../../../sitebuilder/shared/navbar/graphics/arrow.gif"></TD>
<TD>&nbsp;|&nbsp;</TD>
<TD CLASS="clsNavBarItem" expItemNum="5">Training<BR><IMG HEIGHT="4" WIDTH="7" BORDER="0" SRC="../../../sitebuilder/shared/navbar/graphics/arrow.gif"></TD>
<TD>&nbsp;|&nbsp;</TD>
<TD CLASS="clsNavBarItem" expItemNum="6">Site&nbsp;Info<BR><IMG HEIGHT="4" WIDTH="7" BORDER="0" SRC="../../../sitebuilder/shared/navbar/graphics/arrow.gif"></TD>
<TD WIDTH="100%"></TD>
</TR>
</TABLE>


<TABLE ID="tblNavLinks" CLASS="clsNavLinks" CELLPADDING="0" CELLSPACING="0" BORDER="0" WIDTH="100%">
<TR>
<TD COLSPAN="2" HEIGHT="8"><IMG WIDTH="1" HEIGHT="8" SRC="../../../sitebuilder/shared/graphics/trans.gif"></TD>
<TD ROWSPAN="2"><A HREF="../../../workshop/default.htm" TARGET="_top"><IMG ALIGN="right" HEIGHT="30" WIDTH="106" BORDER="0" ALT="Click to return to the Workshop home page" SRC="../../../workshop/graphics/wrkbrand2.gif" /></A><BR /></TD>
</TR>
<TR>
<TD ROWSPAN="2">
<A HREF="../../../workshop/server/pg00164.htm"><IMG HEIGHT="32" WIDTH="31" HSPACE="25" BORDER="0" ALT="Click to return to the Server Technologies home page" SRC="../../../workshop/graphics/icons//server.gif" /></A>
</TD>
<TD>
<TABLE CELLPADDING="3" CELLSPACING="0" BORDER="0">
<TR>

<TD><A ID="lnkShowImg" HREF="../../../workshop/server/toc.htm" TARGET="_top"><IMG ID="imgShow" CLASS="clsLeftMenu" HEIGHT="15" WIDTH="18" BORDER="0" SRC="../../../workshop/graphics/icons/nl-show-0.gif" ALT="" /></A><BR></TD>
<TD NOWRAP><A ID="lnkShowText" CLASS="clsLeftMenu" HREF="../../../workshop/server/toc.htm" TARGET="_top">show toc</A> &nbsp;&nbsp; </TD>

<TD><A ID="lnkSyncImg" HREF="../../../workshop/pg04074.htm#/workshop/server/migrlab/howto.htm" TARGET="_top"><IMG ID="imgSync" CLASS="clsLeftMenu" HEIGHT="15" WIDTH="18" BORDER="0" SRC="../../../workshop/graphics/icons/nl-sync-0.gif" ALT="" /></A><BR></TD>
<TD NOWRAP><A ID="lnkSyncText" CLASS="clsLeftMenu" HREF="../../../workshop/pg04074.htm#/workshop/server/migrlab/howto.htm" TARGET="_top">sync toc</A> &nbsp;&nbsp; </TD>

<TD><A ID="lnkSearchImg" HREF="http://www.microsoft.com/isapi/gosearch.asp?TARGET=/dev/web/default.asp" TARGET="_top"><IMG ID="imgSearch" CLASS="clsLeftMenu" HEIGHT="15" WIDTH="18" BORDER="0" SRC="../../../workshop/graphics/icons/nl-search-0.gif" ALT="" /></A><BR></TD>
<TD NOWRAP><A ID="lnkSearchText" CLASS="clsLeftMenu" HREF="http://www.microsoft.com/isapi/gosearch.asp?TARGET=/dev/web/default.asp" TARGET="_top">search</A> &nbsp;&nbsp; </TD>

<TD><A ID="lnkIndexImg" HREF="../../../workshop/index/pg00001.htm"><IMG ID="imgIndex" CLASS="clsLeftMenu" HEIGHT="15" WIDTH="18" BORDER="0" SRC="../../../workshop/graphics/icons/nl-index-0.gif" ALT="" /></A><BR></TD>
<TD NOWRAP><A ID="lnkIndexText" CLASS="clsLeftMenu" HREF="../../../workshop/index/pg00001.htm">index</A> &nbsp;&nbsp; </TD>

</TR>
</TABLE>
</TD>
</TR>
<TR>
<TD COLSPAN="2" WIDTH="100%">
<TABLE CELLPADDING="2" CELLSPACING="0" BORDER="0">
<TR>
<TD>&nbsp;</TD>
</TR>
</TABLE>
</TD>
</TR>
</TABLE>

<BR CLEAR="all" />
<DIV CLASS="clsBucketBranch"><A HREF="../../../workshop/pg00004.htm" TARGET="_top">Workshop</A>&nbsp;&nbsp;|&nbsp;&nbsp;<A HREF="../../../workshop/pg04074.htm#/workshop/server/pg00164.htm" TARGET="_top">Server Technologies</A></DIV>

<DIV CLASS="clsDocBody">

<!-- DOCUMENT CONTENT START -->

<H1><A NAME="ASP" IDX_TYPE="task" IDX_CONCEPT="stopindex;IIS 4.0, how to migrate your Web server to">Microsoft Windows NT Server Migration Lab</A></H1>
<HR SIZE="1" />
<H4>How to Migrate a UNIX-Based Web Server Running Netscape Enterprise Server or Apache to Windows NT Server 4.0 with IIS 4.0</H4>

<P>Microsoft Corporation


<P><P>October 9, 1998<P>
<P><a href="alldocs.zip"><IMG SRC="../../../sitebuilder/graphics/icodownl.gif" WIDTH=16 HEIGHT=20 BORDER=0 ALT="Download">Download this document and all sample documents in Microsoft Word (.DOC) format (zipped, 339K)</a>.

<P>
<a name="top"></a><B>Contents</B>
<BR> <A HREF="howto.htm#under">Understanding IIS</A>
<BR>&nbsp;&nbsp;&nbsp;<A HREF="howto.htm#topic19">IIS Architecture Overview</A>
<BR>&nbsp;&nbsp;&nbsp;<A HREF="howto.htm#topic20">Administrative Architecture</A>
<BR>&nbsp;&nbsp;&nbsp;<A HREF="howto.htm#topic21">Programmability Architecture</A>
<BR> <A HREF="howto.htm#prepare">Preparing to Migrate Services to IIS 4.0: Developing the Project's Vision</A>
<BR>&nbsp;&nbsp;&nbsp;<A HREF="howto.htm#topic22">Creating A Vision/Scope Document</A>
<BR>&nbsp;&nbsp;&nbsp;<A HREF="howto.htm#topic23">Writing the Vision Statement</A>
<BR>&nbsp;&nbsp;&nbsp;<A HREF="howto.htm#topic24">Creating the Conceptual Design</A>
<BR>&nbsp;&nbsp;&nbsp;<A HREF="howto.htm#topic25">Writing the High-Level Risk Assessment</A>
<BR> <A HREF="howto.htm#migserv">Preparing to Migrate Services to IIS 4.0: Planning the Migration</A>
<BR>&nbsp;&nbsp;&nbsp;<A HREF="howto.htm#topic26">Defining Project Structure</A>
<BR>&nbsp;&nbsp;&nbsp;<A HREF="howto.htm#topic27">Gathering Information: Surveying Your Current Network and Server Environment</A>
<BR>&nbsp;&nbsp;&nbsp;<A HREF="howto.htm#topic28">Conducting a Gap Analysis</A>
<BR>&nbsp;&nbsp;&nbsp;<A HREF="howto.htm#topic29">Defining the Service Offerings</A>
<BR>&nbsp;&nbsp;&nbsp;<A HREF="howto.htm#topic30">Review Operational Standards</A>
<BR>&nbsp;&nbsp;&nbsp;<A HREF="howto.htm#topic31">Capacity Planning</A>
<BR>&nbsp;&nbsp;&nbsp;<A HREF="howto.htm#topic32">Building the Master Project Plan</A>
<BR>&nbsp;&nbsp;&nbsp;<A HREF="howto.htm#topic33">Staff Resources</A>
<BR>&nbsp;&nbsp;&nbsp;<A HREF="howto.htm#topic34">Developing Test Plans</A>
<BR> <A HREF="howto.htm#newserv">Preparing the New Windows NT 4.0 Servers</A>
<BR>&nbsp;&nbsp;&nbsp;<A HREF="howto.htm#topic35">Back Up the Source UNIX Server</A>
<BR>&nbsp;&nbsp;&nbsp;<A HREF="howto.htm#topic36">Recommended OS Updates</A>
<BR>&nbsp;&nbsp;&nbsp;<A HREF="howto.htm#topic37">Configuring Security Settings</A>
<BR>&nbsp;&nbsp;&nbsp;<A HREF="howto.htm#topic38">Setting Up Windows NT Permissions</A>
<BR>&nbsp;&nbsp;&nbsp;<A HREF="howto.htm#topic39">Installing Tools and Utilities</A>
<BR>&nbsp;&nbsp;&nbsp;<A HREF="howto.htm#topic40">Populating Directories with Web Content</A>
<BR> <A HREF="howto.htm#config">Migrating Web Server Configuration Settings</A>
<BR>&nbsp;&nbsp;&nbsp;<A HREF="howto.htm#topic41">Migrating from Apache </A>
<BR>&nbsp;&nbsp;&nbsp;<A HREF="howto.htm#topic42">Migrating From Netscape Enterprise Server</A>
<BR>&nbsp;&nbsp;&nbsp;<A HREF="howto.htm#topic43">Migrating Administration Settings</A>
<BR>&nbsp;&nbsp;&nbsp;<A HREF="howto.htm#topic44">Migrating Program Settings</A>
<BR>&nbsp;&nbsp;&nbsp;<A HREF="howto.htm#topic45">Server Status Settings</A>
<BR>&nbsp;&nbsp;&nbsp;<A HREF="howto.htm#topic46">Content Management Settings</A>
<BR>&nbsp;&nbsp;&nbsp;<A HREF="howto.htm#topic47">Web Publishing Settings</A>
<BR>&nbsp;&nbsp;&nbsp;<A HREF="howto.htm#topic48">Agents and Search Settings</A>
<BR>&nbsp;&nbsp;&nbsp;<A HREF="howto.htm#topic49">Auto Catalog</A>
<BR> <A HREF="howto.htm#migapp">Migrating Applications</A>
<BR>&nbsp;&nbsp;&nbsp;<A HREF="howto.htm#topic50">Migrating CGI Applications Overview</A>
<BR>&nbsp;&nbsp;&nbsp;<A HREF="howto.htm#topic51">Comparing CGI Applications to Active Server Pages</A>
<BR>&nbsp;&nbsp;&nbsp;<A HREF="howto.htm#topic52">Migration Strategies</A>
<BR>&nbsp;&nbsp;&nbsp;<A HREF="howto.htm#topic53">Migrating to Active Server Pages</A>
<BR>&nbsp;&nbsp;&nbsp;<A HREF="howto.htm#topic54">Migrating Common CGI Applications to ASP</A>
<BR> <A HREF="howto.htm#migtools">Tools For Application Migration</A>
<BR>&nbsp;&nbsp;&nbsp;<A HREF="howto.htm#topic55">ASP Development Tools</A>
<BR>&nbsp;&nbsp;&nbsp;<A HREF="howto.htm#topic56">ActiveX Component Development</A>
<BR> <A HREF="howto.htm#testing">Testing and Troubleshooting</A>
<BR>&nbsp;&nbsp;&nbsp;<A HREF="howto.htm#topic57">Unit Testing</A>
<BR>&nbsp;&nbsp;&nbsp;<A HREF="howto.htm#topic58">Integration Testing</A>
<BR>&nbsp;&nbsp;&nbsp;<A HREF="howto.htm#topic59">Application Testing</A>
<BR>&nbsp;&nbsp;&nbsp;<A HREF="howto.htm#topic60">Pilot Testing</A>
<BR> <A HREF="howto.htm#deployment">Deployment</A>
<BR>&nbsp;&nbsp;&nbsp;<A HREF="howto.htm#topic61">Deployment Planning</A>
<BR>&nbsp;&nbsp;&nbsp;<A HREF="howto.htm#topic62">Taking the New Windows NT Server Live on the Network</A>
<BR>&nbsp;&nbsp;&nbsp;<A HREF="howto.htm#topic63">Monitoring Post-Deployment Performance</A>
<BR>&nbsp;&nbsp;&nbsp;<A HREF="howto.htm#topic64">Monitoring User Satisfaction</A>
<BR> <A HREF="howto.htm#resources">UNIX to Windows NT Migration Resources</A>
<BR>&nbsp;&nbsp;&nbsp;<A HREF="howto.htm#topic65">Books</A>
<BR>&nbsp;&nbsp;&nbsp;<A HREF="howto.htm#topic66">Training</A>
<BR>&nbsp;&nbsp;&nbsp;<A HREF="howto.htm#topic67">Web Sites</A>

<P>
<H2><A NAME="under"></A>Understanding IIS 
</H2>
This section provides an overview of the architecture and administration of Internet Information Server 4.0. This information will help you understand the relationship of settings and configurations in your UNIX-based Web server as compared to your new Windows NT Server.  
<P>
<H3><A NAME="topic19"></A>IIS Architecture Overview
</H3>
<P>IIS is a core product, which means that it is designed to work closely with many other products, including all products in the Windows NT Server 4.0 Option Pack.  Figure 1 shows the relationship between IIS and other products installed as part of the Windows NT Server 4.0 Option Pack.
<P><IMG SRC="figure1.gif" WIDTH="579" HEIGHT="220" BORDER="0" ALT="Non-MS link">
<P><b>Figure 1.  IIS Architecture</b>
<P>The standard Internet Services (FTP and Web servers) reside in a process called Inetinfo.  In addition to the Internet services, this process contains the shared thread pool, cache, logging, and SNMP services of Internet Information Server.  File Transfer Protocol (FTP) is the protocol used to transfer files between two computers on a network that uses Transmission Control Protocol/Internet Protocol (TCP/IP). FTP was one of the earliest protocols used on TCP/IP-based networks and the Internet.  Although the World Wide Web has replaced most of the functions of FTP, FTP is still a reliable way to copy files from a client computer to a server over the Internet.
<P>Internet Information Server is integrated with Microsoft Windows NT Server.  IIS uses the same directory database (user accounts) as Windows NT Server. Using the same directory database eliminates the need for additional user account administration.  Internet Information Server administration also uses existing Windows NT Server tools such as Performance Monitor, Event Viewer, and Simple Network Management Protocol (SNMP) support to maintain similar administrative procedures. In addition, the following products are tightly integrated with IIS:
<UL>


<LI>Microsoft Management Console
<LI>Microsoft Transaction Server
<LI>Active Server Pages and Microsoft Script Debugger
<LI>Microsoft Index Server
<LI>Microsoft Certificate Server
<LI>Internet Services for Remote Access Services
<LI>Site Server Express
<LI>Microsoft Message Queue
<LI>Microsoft Data Access Components

</UL>
<H3><A NAME="topic20"></A>Administrative Architecture
</H3>
<P>IIS provides a comprehensive set of tools for managing the Web server and its components. Administrators can use the tools provided by IIS to manage the Web server or an independent Web site.  In addition to these management tools included with IIS, you can create your own custom interfaces using the IIS administration objects (Admin Objects) that ship with IIS.
<P>Figure 2 illustrates the administrative tools provided with Internet Information Server and how they interact with IIS Admin Objects (IISAO).
<P><IMG SRC="figure2.gif" WIDTH="492" HEIGHT="349" BORDER="0" ALT="*">
<P><b>Figure 2.  Administrative tools provided with IIS </b>
<P>The IIS Admin Objects are programmable COM objects that an ASP script or custom application can call to change IIS configuration values stored in the IIS metabase.  For example, file and directory access permissions used by IIS are stored in the metabase.  You can efficiently set these permissions for one or many files and directories with a simple ASP script.  The Internet Service Manager snap-in to the MMC, the HTML-based version of the Internet Service Manager, the Windows Scripting Host, and third-party administration applications use the IIS Admin Objects to manage IIS.
<P><h4>Internet Service Manager</h4>
<P>With the Internet Service Manager, a snap-in for the Microsoft Management Console, administrators can manage many Internet Information Server sites from a single location anywhere on the Internet.  IIS also includes a browser-based version of Internet Service Manager. Using the Internet Service Manager (HTML), an administrator can configure IIS from almost any computer on the Internet or on a private intranet.
<P><h4>Windows Scripting Host</h4>
<P>The Windows Scripting Host (WSH) is a language-independent scripting environment for 32-bit Windows Platforms.  Microsoft provides both VBScript and JScript scripting engines with the Windows Scripting Host.  Third-party companies provide ActiveX scripting engines for other languages such as Perl.
<P>
<H3><A NAME="topic21"></A>Programmability Architecture
</H3>
<P>Web applications are maturing to become mission-critical, line-of-business applications.  Before the Web, most applications were written and executed on stand-alone computers as single-user applications, and most shared server code was written and executed within databases.  Web applications are deployed in a distributed, disconnected environment often running on many different data stores.  IIS adds the necessary technologies to the Windows NT Server platform so that organizations can develop and deploy reliable and scalable multi-user Web applications.
<P>Figure 3 illustrates the programmability architecture of IIS and the components described in this section.
<P><IMG SRC="figure3.gif" WIDTH="611" HEIGHT="371" BORDER="0" ALT="*">
<P><b>Figure 3.  Programmability architecture of IIS</b>
<P>Developing Web applications can be as complex as developing multi-user server applications.  For example, when creating a multiuser application, developers must invest time building complex routines for managing server process pools, thread pools, database connections, user context, and transactions usually associated with server applications.  IIS and the Windows NT Server 4.0 Option Pack eliminate much of this complexity by providing these routines within their server technologies.  Along with Windows NT Server 4.0, these features provide developers with a platform for developing Web applications.
<P><h4>ADSI Administration Scripts</h4>
<P>Using the ADSI administration scripts and the Windows Scripting Host, you can administer a Web site from the command line.  The  <A HREF="http://premium.microsoft.com/msdn/library/sdkdoc/iishelp/iis/htm/sdk/eadg_7f90.htm" TARGET="_top">IIS Resource Kit</A> <IMG SRC="../../../sitebuilder/graphics/leave-site.gif" WIDTH="17" HEIGHT="11" BORDER="0" ALT="Non-SBN link"> includes a set of sample scripts that you can run to perform many of the common tasks involved in maintaining an ISP or Web site.  
<P><h4>ISAPI Filters and Applications</h4>
<P>ISAPI is an API for developing extensions to the IIS server (and other HTTP servers) that support the ISAPI interface.  ISAPI filters are DLLs that allow pre-processing of requests and post-processing of responses, permitting site-specific handling of HTTP requests and responses.  ISAPI applications are DLLs that can be loaded into the same memory space occupied by the Web service, and perform some server-side tasks as an interface between the user and IIS.  The IIS Resource Kit CD contains a number of sample ISAPI filters and applications.
<P><h4>Admin Base Object</h4>
<P>The IIS Admin Base Object is a fully distributable COM object. Its methods enable your application to manipulate IIS configuration keys and data in the memory-resident metabase.  You can use IIS Admin Base Object to write applications, such as server administration or Web authoring tools, that check and update your server's configuration by manipulating keys and data in the metabase.  You can also use the IIS Admin Base Object to store your IIS-related custom application configuration data in the metabase (with faster access) without filling up the Windows NT registry.
<P><h4>Logging</h4>
<P>IIS logging enables you to track which users access your site and when they access your site.  Tracking users helps identify security and performance issues.  Logging can be directed either to a log file that can be processed offline and offers faster performance or to an ODBC Data Source Name for dynamic resolution.
<P>Several IIS features enable customization of the logging information from an IIS Web site:  
<UL>


<LI> <b>Custom Extended Logging.</b> IIS supports the new industry-standard W3C extended logging format.  The W3C format is a customizable ASCII format that provides administrators a variety of different fields (items) to record.  Administrators can gather detailed information while limiting log size by omitting unneeded fields.  These fields include about 20 different items, including date, time, client IP address, and browser type.
<b>
<LI></b> <b>Resource Logging. </b>As with most configuration settings in IIS, logging can be set on a per-file basis.  With resource logging, the administrator can choose which resources are logged, which improves performance, reduces log file size, and makes it easier to interpret the log files.  For example, to reduce the log file size, an administrator can put all the image files in one directory and choose not to log the files in that directory.
<b>
<LI></b> <b>COM Logging Interface. </b>Developers can create custom modules in which to log information regarding the Web site.  Each module is responsible for processing request events and writing to a SQL Server Data source or its own log file format.  IIS logging capabilities can be extended by plugging in additional logging modules that developers or third-party software vendors create.
</b>
</UL><h4>ActiveX Components</h4>
<P>Using development tools such as Visual C++, Visual Studio&#174;, or Java, you can develop ActiveX components and embed them in a Web page, adding a higher level of interactivity to the page.  ActiveX components can be run on the server, on the client, or both.  The IIS online documentation, for example, uses an ActiveX control called HTML Help in the left-hand frame of the browser for its table of contents.  You can use OLE DB, ADO, or other database access methods to access information stored in a Microsoft Access- or Microsoft SQL-compliant language such as Visual Basic, C++, SQL, or Java. 
<P><h4>Active Server Pages</h4>
<P>ASP applications can add functionality to your Web pages as well.  An ASP page is an HTML page that includes server-side script.  After the server-side script on an ASP page runs, the results are returned to the client in the form of a standard HTML document.
<P><h4>CGI</h4>
<P>The Common Gateway Interface (CGI) specification is a widely used method for creating executable programs that run on your Web server.  Remote users can start these executables by filling out an HTML form or by simply requesting a URL from your server.  Arguments following the question mark in the URL are passed to the CGI application as an environment string that is parsed and acted upon.
<P> <A HREF="howto.htm#top" CLASS="clsBackTop"><IMG SRC="../../../workshop/graphics/top.gif"  WIDTH="18" HEIGHT="8" BORDER="0" ALT="Top">Back to top</A>
<P>
<H2><A NAME="prepare"></A>Preparing to Migrate Services to IIS 4.0: Developing the Project's Vision 
</H2>

<H3><A NAME="topic22"></A>Creating A Vision/Scope Document
</H3>
<P> A vision/scope document guides your project team during the course of the migration.  In theory, a project's vision and scope are at opposite ends of the spectrum, but they complement each other in the real world because each enables you to define the migration project.  Creating both a vision and a scope document for the project is key for a successful Web server migration.
<P>The steps in creating a Web server migration vision/scope document are:
<OL>

<LI>   Writing the vision statement
<LI>   Defining the project's scope
<LI>   Building a vision/scope document

</OL>
<H3><A NAME="topic23"></A>Writing the Vision Statement
</H3>
<P>The vision statement is a high-level visionary view of your reasons for wanting to migrate a Web server from UNIX to Windows NT Server, and a broad description of your expected outcomes from the migration.  The vision statement should clearly outline why the project was conceived and broadly define the overall results of the successful migration.
<P>The vision statement is owned by the project's leader or manager, and should be developed with input from the team members.  Get the vision statement approved by your executive management to ensure that migration results are consistent with expectations.
<P>Never underestimate the difficulty of writing a comprehensive and usable vision document. The process of writing this document cannot be considered an unnecessary exercise or delegated to just any member of the team.  The vision statement should reflect the enterprise-wide goals and objectives of everyone involved, including upper management.
<P>The vision statement should be SMART: <b>S</b>pecific, <b>M</b>easurable, <b>A</b>chievable, <b>R</b>ealistic, and <b>T</b>ime Oriented. The following table provides a definition of S-M-A-R-T.
<P>S-M-A-R-T Definitions
<P>
<TABLE CLASS=clsRef WIDTH=95% BORDER=0 CELLPADDING=5 CELLSPACING=2>
<TR ALIGN=LEFT VALIGN=MIDDLE BGCOLOR="#A6CAF0">

<TD><b>Action</b>
</TD>

<TD><b>Definition</b>
</TD>
</TR>
<TR ALIGN=LEFT VALIGN=TOP>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>Specific
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>Specify results to be achieved (for example, what action will be taken or what application will be deployed).

</TD>
</TR>
<TR ALIGN=LEFT VALIGN=TOP>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>Measurable
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>Clearly specify what will be achieved (for example, the number of seats deployed or the number of business units completed).

</TD>
</TR>
<TR ALIGN=LEFT VALIGN=TOP>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>Achievable
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>Identify what the enterprise will achieve by this action (for example, ease of use and management, higher network throughput, and a complete set of tools for developing and managing intranets).

</TD>
</TR>
<TR ALIGN=LEFT VALIGN=TOP>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>Realistic
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>Establish realistic outcomes based on company resources and project parameters.

</TD>
</TR>
<TR ALIGN=LEFT VALIGN=TOP>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>Time Oriented
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>Set a realistic time frame to achieve specific goals (for example, will commence on <i>X</i> date, and complete on <i>Y </i>date).

</TD>
</TR>

</TABLE>
<P>An example of a S-M-A-R-T vision statement might be the following document from Contoso Pharmaceuticals,<i> </i>a fictitious company:
<P>
<BLOCKQUOTE>Contoso Pharmaceuticals will replace its current UNIX Web server environment with a more efficient and flexible solution that will maximize competitiveness in our industry while reducing operational costs. Microsoft Windows NT Server 4.0 has been selected to achieve an enterprise Web server solution. Contoso Pharmaceuticals will initiate a scheduled deployment program for all four Web servers by 3Q99. 
<P>Contoso Pharmaceuticals will reduce the overall cost of operations by migrating from the current UNIX system to a Windows NT system, which will decrease administrative costs and improve customer responsiveness. Contoso Pharmaceuticals will implement a global Windows NT domain model in conjunction with this project. 
<P>Because our company's current Web servers primarily run Sun Solaris, implementation will require a conversion and coexistence infrastructure to seamlessly move existing Internet and intranet sites to the new platform. To accomplish this, the company will use Windows NT Server 4.0 and specifically apply the third-party UNIX conversion tools. 
</BLOCKQUOTE>
<P>The vision statement establishes parameters for the entire planning and deployment process. It should not be hurried, nor should it be left to the last moment. The process of writing the vision/scope document should begin early because it is key to determining the outcome of each phase.
<P><h4>Defining the Project Scope</h4>
<P>The project scope document expands on the vision statement with specific details, including business reasons for deployment, features, resources, and schedule framework. As with the vision statement, the project scope presents a high-level view, but it also provides sufficient detail to direct and guide deployment. 
<P>Vision specifications in the scope document will be expanded during deployment. The scope document should be no more than three pages long.
<P>Be sure your project scope document includes: 
<UL>


<LI> Identification of business drivers and constraints 
<LI> Identification of critical dates 
<LI> Statement of assumptions 

</UL><h4>Identifying Business Drivers and Constraints</h4>
<P>It's essential to have a clear understanding of the business drivers behind your deployment of Windows NT Server.
<P>Business drivers are compelling, enterprise-level changes that can be achieved by deploying new technology. Here are examples of business drivers that apply to a migration to Windows NT Server: 
<UL>


<LI> Decrease hardware costs as a result of broader platform selection 
<LI> Reduce support costs and risks associated with the use of noncommercial software 
<LI> Increase business flexibility by leveraging an expanded choice of software solutions 
<LI> Reduce customer service response times by 20 percent 
<LI> Decrease cycle time for problem resolution by 40 percent 

</UL>If you start with a list of business drivers from another engagement, add or delete customer-specific items. Then interview your customer to collect the high-level requirements for a new server operating system, using these examples as a guide. 
<P><h4>Identifying Critical Dates</h4>
<P>It's important to identify any fixed deployment dates in the vision/scope document and record the business reasons for them. 
<P>Critical dates generally focus on business events such as year-end closing, funding availability, new applications, and other essential information such as specific costs, schedules, or features. An example of a critical date might involve a business unit that must deploy before a year-end closing in January but needs specific features to accommodate its operational needs. 
<P>When you write the project scope document, determine any company-related dates or scheduling constraints and amend your deployment schedule as necessary.
<P><h4>Stating Assumptions</h4> 
<P>Include a list of project assumptions, constraints, dependencies, and anything else that is required or assumed necessary for successful deployment. It's important to list and examine your assumptions early. Mistaken assumptions discovered during the pilot, controlled introduction, or actual deployment could cause significant and costly delays in enterprise-wide implementation.
<P>Here are some examples of assumptions you might make that would require verification: 
<UL>


<LI> A validated network is in place. 
<LI> Third-party UNIX software is available on the Windows NT platform. 

<LI> The project team has experience with Windows NT Server 4.0 installation and configurations. 

<LI> Your server hardware is compatible and listed on the  <A HREF="http://www.microsoft.com/ntserver/nts/techdetails/compat/WebServers.asp" TARGET="_top">Windows NT Server Hardware Compatibility List (HCL)</A> <IMG SRC="../../../sitebuilder/graphics/leave-site.gif" WIDTH="17" HEIGHT="11" BORDER="0" ALT="Non-SBN link">. 

</UL><h4>Building the Vision/Scope Document</h4>
<P>The vision/scope document is the first written commitment made to the planning team, executives, and IT management. It should: 
<UL>


<LI> Define a Web server operating system vision for the company 
<LI> Describe the shift in Web server technologies and why the change needs to be made 
<LI> Define overall deployment planning objectives 
<LI> Provide text for developing the logical design 

</UL>Approval of the vision/scope document marks the first important milestone in the planning process. It signifies upper management approval of the overall direction and scope of the project. Obtaining approval is a two-tiered process consisting of: 
<UL>


<LI> Planning the approval meeting 
<LI> Getting vision/scope document approval and signoff 

</UL><h4>Planning the Approval Meeting</h4>
<P>The vision/scope approval meeting should focus on the vision/scope document and its supporting information. Planning a vision/scope approval meeting involves: 
<UL>


<LI> Notifying all participants, including: 

</UL>
<BLOCKQUOTE>
<UL>

<LI> Planning team members 
<LI> Managers with approval authority 
<LI> Information technology and MIS management 
<LI> Other service providers or vendors 
<LI> Participant substitutes 

</UL>
</BLOCKQUOTE>
<UL>


<LI> Preparing a vision/scope document and supporting materials 
<LI> Identifying approval-related questions, concerns, and decisions 
<LI> Checking to ensure the document front page includes an approval signature 
<LI> Establishing a mutually convenient and appropriate time for the meeting 
<LI> Establishing a mutually convenient location 

</UL><h4>Getting Vision/Scope Document Approval and Sign-Off</h4>
<P>Approval and formal sign-off of the vision/scope document provide a milestone for moving to the next activity. Approval is a fundamental building block in the overall planning and deployment of Microsoft Windows NT Server. At this point, the team should have identified and handled any major considerations or enterprise policy issues. Other issues, such as company-specific wording or expressions of company policy, should also have been approved. Present the document in a final design format suitable as a company document for archiving.
<P>Present the final vision/scope document to all participants to ensure all departmental requirements are met. Include one (or more, as appropriate) signature blocks for the appropriate signers. Have appropriate parties sign the document, and make copies and distribute them to all participants and any other departmental managers who require knowledge of the approval. Prepare a completed copy for senior management and archive the document in the appropriate company location.
<P><A HREF="vision.zip" TARGET="_top">Download and complete your own vision/scope document (zipped, 6K)</A>.

<P>
<H3><A NAME="topic24"></A>Creating the Conceptual Design
</H3>
<P>The conceptual design graphically depicts the vision and scope of the proposed Microsoft Windows NT Server network. The diagram should show the relationship of Windows NT to other existing server environments as well as such UNIX servers as Solaris and HP/UX. This diagram should be expanded during planning and development activities.
<P><h4>Developing the Conceptual Design</h4>
<P>At this stage you are most interested in graphically representing the interrelationship between the existing and new server environments, especially how Microsoft Windows NT Server will connect to points within the existing server environment.
<P>You can use details from the vision/scope document's deployment objectives to provide specific information in the conceptual design. Here is a sample conceptual design:
<P><img src="figure4.gif" WIDTH="460" HEIGHT="417" ALT="[OLM3600B  7825 bytes ]">
<P><b>Figure 4.  Sample conceptual design</b>
<P><A HREF="concept.zip" TARGET="_top">Download a sample conceptual design (zipped, 29K)</A>.

<P>
<H3><A NAME="topic25"></A>Writing the High-Level Risk Assessment
</H3>
<P>It's important for you to help your company develop a high-level risk assessment in close association with the vision/scope document and the conceptual design. Conducting all three activities in parallel with each other (or at least immediately sequentially) will help ensure that you have identified the most prominent high-level risks.
<P>Identify possible risks as early in a migration as possible. By conducting a high-level risk assessment, you can isolate technical issues, financial constraints, process-limiting factors, and other problems before you begin the planning and logical design portions of the engagement. A sample of important issues to consider might be: 
<UL>


<LI> Do all participants (representing different business units) agree on the vision/scope? 
<LI> What are the risks to modifying the vision/statement? 

<LI> What factors are essential for mitigating risks? 

</UL>The high-level risk assessment is the first of several that you will conduct during this deployment. It should include five to seven items describing the most highly rated risks, their potential effects, and mitigation methods for each. Be sure to include:
<UL>


<LI> The budget source for each risk area identified 
<LI> The task owner for each activity in which a risk is identified 
<LI> A ranking and prioritizing of each risk against achieving overall enterprise- and deployment-specific goals 
<LI> High-level mitigation procedures 

</UL>Use the sample risk assessment categories to identify broad risk categories. Use the high-level risk assessment form to define risks and mitigation procedures specific to your customer's deployment. Circulate the high-level risk assessment to all vision/scope development participants for review and approval.
<P><A HREF="riskases.zip" TARGET="_top">Download and complete your own risk assessment document (zipped, 7K)</A>.

<P><b>Project Risks and Mitigation Methods</b>
<P>
<TABLE CLASS=clsRef WIDTH=95% BORDER=0 CELLPADDING=5 CELLSPACING=2>
<TR ALIGN=LEFT VALIGN=MIDDLE BGCOLOR="#A6CAF0">

<TD><b>Risk</b>
</TD>

<TD><b>Mitigation Methods</b>
</TD>
</TR>
<TR ALIGN=LEFT VALIGN=TOP>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>Server down time
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>Utilize staging servers.
<P>Make sure servers pass all tests prior to deployment.
<P>Test and debug all applications prior to deployment.

</TD>
</TR>
<TR ALIGN=LEFT VALIGN=TOP>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>Applications not functioning correctly after migration
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>Make sure you have adequate and skilled resources to perform porting or migration work, especially for mission-critical applications. 
<P>Test and debug all applications on a staging server running Windows NT Server 4 .0 and IIS.

</TD>
</TR>
<TR ALIGN=LEFT VALIGN=TOP>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>Project not completed on schedule
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>During the planning process, be generous with your estimates of the expected work, and then allocate backup resources in the event that a task takes longer than anticipated.

</TD>
</TR>
<TR ALIGN=LEFT VALIGN=TOP>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>Expenditures exceed budget
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>Estimate costs liberally, and allow for unexpected expenses; for example, hardware that malfunctions and must be replaced or software that must be upgraded (adding 10 percent to your base cost estimate would give you a reasonable cushion).

</TD>
</TR>
<TR ALIGN=LEFT VALIGN=TOP>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>Applications or tools don't run on Windows NT Server or IIS</FONT>
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>Make a careful inventory of applications and tools currently in use and replace any that are incompatible prior to system implementation. </FONT>
</TD>
</TR>
<TR ALIGN=LEFT VALIGN=TOP>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>Resistance to change by customers or others within the company 
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>If possible, provide advance information about the project to all affected people, and involve them in the planning process. This will help give them a sense of ownership of the new system.

</TD>
</TR>

</TABLE>
<P> <A HREF="howto.htm#top" CLASS="clsBackTop"><IMG SRC="../../../workshop/graphics/top.gif"  WIDTH="18" HEIGHT="8" BORDER="0" ALT="Top">Back to top</A>
<P>
<H2><A NAME="migserv"></A>Preparing to Migrate Services to IIS 4.0: Planning the Migration 
</H2>

<H3><A NAME="topic26"></A>Defining Project Structure
</H3>
<P>The process of defining project structure involves: 
<UL>


<LI> Assigning team roles and responsibilities 

<LI> Assessing and mitigating risks 

<LI> Building a test lab and developing test procedures 
<LI> Communicating progress

</UL><h4>Assigning Team Roles and Responsibilities</h4> 
<P>The complexity of a large-scale Microsoft Windows NT Server integration or migration makes it advisable to divide project tasks by functional areas. This approach enables: 
<UL>


<LI> The project manager to arrange team members into appropriate groups and to divide the work into packets relating to each functional area 
<LI> The deployment team members to complete the work in parallel and focus on their areas of expertise 

</UL>
<P>A Microsoft Windows NT Server migration team typically includes the following work groups: 
<UL>


<LI> Engineering 
<LI> Technical support 
<LI> Operations 
<LI> Training 
<LI> Project management 
<LI> Deployment 
<LI> Coexistence/migration 

</UL><A HREF="roles.zip">Download a sample roles document (zipped, 6K)</A>.

<P>Once the project team has been formed, it must be trained on Microsoft Windows NT Server. Two primary benefits of training are that: 
<UL>


<LI> Every team member will have the same technical proficiency. This allows effective communication throughout the group on technical issues. 
<LI> The team will have a solid understanding of Microsoft Windows NT Server capabilities. This will enable the team to effectively add functionality to the planned implementation. 

</UL>The most successful approach for training is to send an entire team at the same time to Windows NT Server training. The Windows NT Server course is available from Microsoft Authorized Training Centers (ATECs). Refer to Microsoft Premier Support Services for more information or http://www.microsoft.com/train_cert/.
<P><h4>Assessing and Mitigating Risks</h4> 
<P>You'll need to assess risks and develop corresponding mitigation strategies. It will be performed on a regular basis throughout the project duration. Information about risks enables the project team to take actions necessary to maintain the project schedule.
<P>The Microsoft Windows NT Server readiness document provides the basis for assessing risks. Use this document to assist in developing mitigation strategies.
<P><A HREF="riskhigh.zip">Download and complete your high-level risk and mitigation document (zipped, 6K)</A>.

<P><h4>Building a Test Lab and Developing Test Procedures</h4>
<P>At points during the planning and development phases, design or implementation strategies should be validated. This requires a testing environment. Because of the time lag usually attributed to ordering equipment, this process should begin as early as possible. This part of the project planning phase includes two sets of activities: 
<UL>


<LI> Building a test lab 
<LI> Developing testing and quality assurance procedures 

</UL>The test lab should contain both UNIX servers and Windows NT servers representative of the desired environment. In addition to validating the logical design, you should use the testing environment to reproduce any problems that occur throughout any phase of the deployment process. 
<P>Along with creating the physical testing environment, you should create procedures to ensure that component testing is completed and that the results are documented.
<P><h4>Communicating Progress</h4>
<P>As the project becomes operational, it is important to communicate its progress to potential users. This will enable them to begin deployment preparations and help establish appropriate expectations of how Microsoft Windows NT Server will change their server operating system activities. Customers are typically interested in: 
<UL>


<LI> When the system will reach them 
<LI> How much disruption they will undergo (collectively and individually) 

</UL>
<P>A guiding principle in communicating progress of Microsoft Windows NT Server deployments is <i>under-promise and over-deliver.</i>
<P>A communications plan requires such details as: 
<UL>


<LI> Communication type (for example, Microsoft PowerPoint presentation, e-mail, newsgroups, NetMeeting&#153;). 
<LI> Audiences for each type of communication. 
<LI> Frequency with which each type of communication is updated and distributed. 

</UL>
<P>To create a communications plan, refer to communication plan types and distribution media in this document: 
<P><A HREF="commtype.zip" TARGET="_top">Download the communication types document (zipped, 13K)</A>.

<P>
<H3><A NAME="topic27"></A>Gathering Information: Surveying Your Current Network and Server Environment
</H3>
<P>This activity focuses on gathering the information necessary to making accurate design decisions. The basic steps are: 
<UL>


<LI> Documenting organizational structure and locations 
<LI> Documenting the current network infrastructure 
<LI> Documenting the current UNIX infrastructure 
<LI> Documenting the current server environment 
<LI> Establishing functional requirements
<LI> Describing the desired end state

</UL>
<P>For further information on these topics, see the  <A HREF="howto.htm#resources">Resources</A> section.
<P><h4>Documenting Organizational Structure and Locations</h4> 
<P>Documenting the current UNIX environment begins with describing where system resources and users are distributed within the enterprise. The types of information involved include: 
<UL>


<LI> Geographic locations 
<LI> Sites at each location 
<LI> Business units at each site 

</UL>
<P>This task seeks detailed information about where users will be located, including the geographic distribution of business units and the interoperability dependencies between departments. That information helps determine how to locate servers and how to synchronize the timing of implementations. 
<P><h4>Documenting Current Network Infrastructure</h4>
<P>It's important to collect information about connectivity between physical locations and network services, including Windows NT Server domains. This information will help determine what constraints the Windows NT Server network must be built within, limitations on the design of a enterprise domain plan, and what services must be implemented or improved so Microsoft Windows NT Server will work effectively. 
<P>Information about the Windows NT Server domain structure and its condition is important, because accessing and sharing information about Windows NT Server requires a domain architecture for authentication. Documenting the current network environment requires descriptions of: 
<UL>


<LI> Physical network topology 
<LI> Protocol management 
<LI> Host name resolution services 
<LI> Windows NT Server domain structure 
<LI> Network operations/performance management 

</UL><h4>Describing Physical Network Topology</h4>
<P>Understanding the physical network upon which Microsoft Windows NT Server will ride is critical to the design of the routing topology, server placement, and response time. 
<UL>


<LI> <b>Bandwidth. </b>Knowing bandwidth availability helps determine whether a server should be located at that facility. 

<LI> <b>Backbone Topology. </b>Knowing backbone topology helps determine whether fault-tolerant routes can be established. 

</UL>
<P>To document network topology you need to describe: 
<UL>


<LI> Router locations 
<LI> Line speeds between routers 
<LI> Average use of links 
<LI> Redundancy (dial backup in place) 
<LI> Remote dial-in points of presence 
<LI> Protocols supported on the links 

</UL>
<P><h4>Describing Protocol Address Management</h4>
<P>Network protocols provide connectivity between the workstation and the server. The most common protocol in use for client/server computing is TCP/IP. Although it is efficient, TCP/IP requires a system for allocating network addresses or use of services that appropriately assign addresses to workstations. Basic network protocol information includes the management technology used and the server location.
<P><h4>Host Name Resolution Services</h4> 
<P>For compatibility with the existing UNIX environment, you should host Domain Name System (DNS) on Windows NT to provide integration with WINS. This will enable UNIX systems to access Windows-based systems by name and provide meaningful information in log files.
<P>You should gather this sort of information: 
<UL>


<LI> Locations of DNS servers 

<LI> Enterprise DNS domain plan 
<LI> Groups involved in maintaining DNS systems 
<LI> Processes for updating DNS 

</UL><h4>Microsoft Windows NT Server Domain Structure</h4>
<P>Windows NT Server requires a domain architecture for authentication so that it can access and share information. Therefore, you should document the existing Windows NT Server domain structures to determine if they will provide coverage for the planned Microsoft Windows users. 
<P>To do that requires gathering this sort of information: 
<UL>


<LI> Existing account domains 
<LI> Existing resource domains 
<LI> Existing trust relationships 

</UL>For more information, see <A HREF="ntdomain.zip">Microsoft Windows NT Server Domain Planning</A>. <i> </i>
<P><h4>Describing Desired End State</h4> 
<P>The goal of this activity is to expand the conceptual design (created during the envisioning phase) to develop a more detailed picture of the desired end state for the Windows NT system. The desired end state is similar to functional requirements, but it also graphically presents the long-term relationship of Microsoft Windows NT Server to other UNIX systems if any exist on the current network and will not be replaced with Windows NT. This diagram will include Microsoft Windows NT Server locations and the interaction of other operating systems. It should also include interactions with other systems for directory synchronization. 
<P>This activity should result in: 
<UL>


<LI> An end state diagram 
<LI> Explanatory text

</UL>
<H3><A NAME="topic28"></A>Conducting a Gap Analysis
</H3>
<P>The goal of this activity is to compare the current networking environment with the desired end state and identify all high-level activities that will close the gap.
<P><h4>Four primary areas deserve attention:</h4> 
<UL>


<LI> Identifying improvements that must be made to infrastructure components that the end state Microsoft Windows NT Server will rely on. 
<LI> Identifying systems that must be implemented to support the coexistence of Microsoft Windows NT Server with other Web servers. 
<LI> Identifying areas where new functionality is strongly desired by users, administrators, or operations. 
<LI> Identifying functionality points that users will no longer have, or that will have significantly changed. 

</UL><h4>Identifying Needed Infrastructure Improvements</h4>
<P>Documenting infrastructure readiness requires using network infrastructure information gathered during the information gathering phase. The state of the environment should be compared to the information in the Microsoft Windows NT Server network dependencies document. 
<P>Each item that needs additional work should be captured and carried forward to the project plan creation step. For help in documenting this information, use the <A HREF="gapanal.zip" TARGET="_top">Gap Analysis checklist</A>.
<P><h4>Identifying New Needed Systems </h4>
<P>During this phase you will identify the systems required to enable Microsoft Windows NT Server to coexist with the existing UNIX environment, using the documentation that was gathered during the previous information-gathering phase. Each high-level section that is identified for requiring additional work should be captured and carried forward to the project plan creation step. The following areas should be evaluated: 
<UL>


<LI> Network naming by service 
<LI> Security database 
<LI> File services 

</UL><b>Network Naming by Service</b>
<P>When migrating services from UNIX to Windows NT, it may be easiest to move individual services one at a time.  To ease the migration, clients should refer to the system with the desired service by a name based on the service rather than the physical machine. For example, a UNIX system providing corporate mail and Usenet news might be accessed with the name unix01.example.microsoft.com. To make this easier, define several aliases so users access mail with mail.example.microsoft.com and access Usenet news with news.example.microsoft.com. This way, either Usenet or e-mail can be moved off the system, the DNS name can be changed to point to the Windows NT Server, and users can continue to access the service without any impact.
<P><b>Security Database</b>
<P>Companies maintaining both UNIX and Windows NT Server systems must deal with two or more separate security databases containing information on users and groups. UNIX uses either a local security database or NIS/NIS+, which are both incompatible with the Windows NT Server local security database and Windows NT Server domain security database. This is discussed further in the  <A HREF="http://www.microsoft.com/isn/techcenter/unixnt/default.asp" TARGET="_top">UNIX/Windows NT Integration SDK</A> <IMG SRC="../../../sitebuilder/graphics/leave-site.gif" WIDTH="17" HEIGHT="11" BORDER="0" ALT="Non-SBN link">. 
<P>If users will access secure services on both systems, a solution is needed to maintain up-to-date information on both systems. One solution is to add software to the UNIX systems that enables them to join the Windows NT Server domain, using a product such as Advanced Server for UNIX (ASU) from AT&amp;T. If this isn't possible, the alternative is to manually maintain the disparate security databases through processes that ensure changes occur on both systems and limit using such options as expired passwords.
<P><b>File Services</b>
<P>Access to files that reside on a file server is typically provided through the network file system (NFS) file sharing protocol. 
<P>As a company converts clients and servers to Windows NT Server, it may continue to need access to the files on NFS. If this is the case, some of the options available include: moving the files to a Windows NT Server and loading NFS server software, loading an NFS client on those systems requiring file access, using an NFS gateway product on Windows NT Server such as the one available from Intergraph, or using a file server that understands both protocols (such as those from Network Appliance).
<P><h4>Identifying High-Priority New Functionality</h4>
<P>Users in existing UNIX environments are accustomed to a particular level of functionality. Functionality is usually defined as a combination of functions provided by a commercial operating system, third-party application software, and additional custom features. 
<P>User functionality provided by existing systems should be compared to the functionality that will be provided by the client against the new Windows NT Server back end. If specific existing features are not available during migration or are taken away altogether, note these features and place them in the project plan for later resolution.
<P>Compared to traditional UNIX operating systems, Microsoft Windows NT Server provides a significant number of additional functions for users, administrators, and operations personnel. Some of the new functions can be enabled with very little additional cost, whereas others will require more effort. 
<P>For more information, see the  <A HREF="howto.htm#resources">Resources</A> section of this document. For examples of IIS solutions, see this information on  <A HREF="http://www.microsoft.com/backstage/" TARGET="_top">Microsoft's Web site</A> <IMG SRC="../../../sitebuilder/graphics/leave-site.gif" WIDTH="17" HEIGHT="11" BORDER="0" ALT="Non-SBN link">.
<P>
<H3><A NAME="topic29"></A>Defining the Service Offerings
</H3>
<P>The service offering supplies a detailed list of the functionality to be implemented in this version of the Microsoft Windows NT Server operating system. The list of functionality to be implemented may not be the full list identified in the gap analysis, but may instead be the minimal amount of functionality required to start the integration or migration. Additional functionality can be provided in subsequent phases.

<P>The use of phases, or versioning, enables the project team to implement functionality in stages, keeping the scope manageable and delivery on a set schedule. Once the functionality of a particular version has been determined, it should be frozen and clearly communicated to customers. Requests for additional functionality should be noted, but slated for inclusion in later releases.

<P>Decisions to provide specific functionality should be based on a formula of value perceived versus the cost to implement and support. 
<P>This activity: 
<UL>


<LI> Starts with a list of functional requirements and function points generated during the gap analysis 
<LI> Examines each requirement in terms of costs and potential risks 
<LI> Identifies and places acceptable requirements in the service offering, which then become part of the project plan 

</UL>Once this document has been agreed upon, it should not change without agreement from all team members and other signatories to the sign-off.

<P><h4>Identifying Functionality to Be Delivered</h4> 
<P>This process determines what functions will be delivered as part of integrating Windows NT Server in a UNIX environment or in migrating from UNIX to Microsoft Windows NT Server. To assist in determining which functions and services will be included, rank the entire list of possible items into priority groups. Then evaluate those in the highest groups to determine the cost of implementation and ongoing support. 
<P>Start a secondary list for items to be included in the subsequent version. Naturally some items will have a higher priority as a required function. Without these functions, the system will not operate.

<P>It is usually helpful to separate the functions into groups such as: 
<UL>


<LI> User functions 
<LI> Administrative functions 
<LI> Operational functions 
<LI> Coexistence functions or dependencies 
<LI> Infrastructure dependencies 
<LI> Legacy CGI code to be ported or rewritten

</UL>
<P><h4>Specifying Performance Criteria</h4> 
<P>During this activity, you will specify performance criteria for system operations. Common criteria include: 
<UL>


<LI> Availability of the Microsoft Windows NT Servers 
<LI> Number of concurrent connections
<LI> Average traffic load per day
<LI> Number of CGI applications and their function

</UL>
<P><h4>Specifying Operational Constraints</h4>
<P>In conjunction with identifying the performance criteria, define certain constraints likely to affect the data that will be traveling through the network. If these constraints are not defined, it is difficult to accurately design the system. Items that are usually constraints are: 
<UL>


<LI> Server processing capacity 
<LI> Server disk space 
<LI> Network interface speed (shared Ethernet, switched Ethernet, FDDI) 
<LI> Network proximity to the backbone 
<LI> Number of concurrent connections 
<LI> Migration strategy for legacy CGI code

</UL>
<P><h4>Signing Off on Service Offering</h4> 
<P>Once the team has agreed to the functionality that will be delivered, the project manager and other influential managers who have a significant stake in the outcome of the project should sign off. 
<P><A HREF="servoff.zip">Download a sample service offering document (zipped, 6K)</A>.

<P>
<H3><A NAME="topic30"></A>Review Operational Standards
</H3>
<P>The planning phase of the project is an excellent time to review your current and future operational standards and procedures.  Windows NT Server and IIS will change the way you develop and administer your Web servers. We recommend that you review the following operational standards and make a list of any adjustments that might need to be made to them after the migration is completed:
<P><b>Policy and Procedure Review</b>
<P>
<TABLE CLASS=clsRef WIDTH=95% BORDER=0 CELLPADDING=5 CELLSPACING=2>
<TR ALIGN=LEFT VALIGN=MIDDLE BGCOLOR="#A6CAF0">

<TD><b>Policy or Procedure</b>
</TD>

<TD><b>Issues</b>
</TD>
</TR>
<TR ALIGN=LEFT VALIGN=TOP>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>Content Publishing
</TD>
<P>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>General guidelines, such as page formatting and information type 
<P>Instructions on how to publish a Web page to be served by IIS
<P>Directory access policies for distributed authoring and versioning (DAV)
</TD>
</TR>
<TR ALIGN=LEFT VALIGN=TOP>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>Disaster Recovery
</TD>
<P>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>Recovery plans 
<P>Off-site or on-site spare server location
<P>Spare server availability 
<P>Rehearsal provisions
</TD>
</TR>
<TR ALIGN=LEFT VALIGN=TOP>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>Internet Services
</TD>
<P>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>Contact person for each service
<P>Access control
</TD>
</TR>
<TR ALIGN=LEFT VALIGN=TOP>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>Maintenance
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>Preventative maintenance procedures
<P>System monitoring policy and tools
</TD>
</TR>
<TR ALIGN=LEFT VALIGN=TOP>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>Network
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>Escalation procedures for downed links
<P>Contacts for network services
</TD>
</TR>
<TR ALIGN=LEFT VALIGN=TOP>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>Redundant Servers
</TD>
<P>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>Fault-tolerant servers
<P>Load-balancing servers
</TD>
</TR>

</TABLE>
<P>
<H3><A NAME="topic31"></A>Capacity Planning
</H3>
<P>Migrating your Web server to Windows NT Server will prompt some questions about how to best plan your hardware requirements.  PC server hardware can be purchased from a variety of vendors, with many possible configurations available from each vendor.  The following section will aid you in selecting the correct server hardware for your needs.
<P><h4>Meeting Server Hardware Requirements</h4>
<P>The minimum hardware requirements for running Windows NT Server 4.0 with IIS 4.0 are:
<UL>


<LI> Processor -- 66 MHz 486  
<LI> Level 2 Cache 
<LI> 32 MB RAM

</UL>
<P>The recommended server requirements for running  Windows NT Server 4.0 with IIS 4.0 are:
<UL>


<LI> Processor -- 90 MHz Pentium or higher
<LI> Level 2 Cache -- Maximum available 
<LI> 128 MB or higher

</UL>
<P>Disk space requirements for installing IIS 4.0:
<UL>


<LI> Minimum -- 30 MB
<LI> Typical -- 50 MB
<LI> Full -- 100 MB

</UL><b>Processor</b>
<P>Often the importance of the processor speed is overemphasized in selecting the correct hardware for a server.  If a server is hosting a site that primarily contains static HTML pages and images, chances are that even an older processor can max out the full network bandwidth available to it.  A fast processor does not always equal a fast server, especially if the network it is connected to is slow or poorly designed.  
<P>If your servers host large sites with high volumes of traffic, you need to be concerned about processor speed, especially if the site contains dynamically generated content or application logic.  Dynamic content and heavy use of Active Server Pages will always require a more powerful processor.  Bottlenecks on static HTML pages usually reside in network components, slow hard disks, and lack of memory, which can all be gradually upgraded.
<P>Should you wish to add another processor to your server at a later date, remember that all processors in a single server still share the same system resources.  Adding another processor for a total of two could improve IIS performance by roughly 50%, and from two to three an additional 25%.    
<P><b>System Bus</b>
<P>All PCs rely on a system bus to transfer data among the various system components.  Today most computers that are intended for use as servers are based on the PCI system bus, which runs at 50 to 66 MHz.  In the future, we should see PCI implementations at 100 MHz or more.  With 64-bit-wide data paths, current versions of the PCI bus can transfer data at rates in excess of 500 Mbps.  The nature of a Web server is to quickly take requests, process them, and deliver the requested content as quickly as possible, so it is wise to get a system with the fastest system bus available.
<P><b>Memory</b>
<P>As a rule of thumb (as long as your server's performance is not limited by its bandwidth), the more RAM your server has the better it will perform.  One way to determine the amount of RAM needed in any given system is to add up the RAM requirements of all the applications and services you need to run, add that to the sum of the size of your commonly used files, add the RAM required by Windows NT Server and IIS, and double it.  The only way to accurately determine if your RAM requirements are being met is to monitor system performance on an ongoing basis and add RAM as needed.
<P><b>Hard Disks and Controllers</b>
<P>Older IDE controllers are too slow for Web servers, and are not recommended for Windows NT Server.  IDE is limited to two or four disks per controller, whereas SCSI is limited to 7 or 15, depending on which standard you choose.
<P>Among SCSI controllers that are recommended for Windows NT Server, there is a wide range of characteristics, including controllers that support RAID in hardware, controllers with large RAM caches, etc.  The SCSI standard has evolved in to several forms:
<P>SCSI-1 (de facto) Data path width, bits = 8  Maximum transfer rate, Mbps = 5
<P>SCSI-2 Data path width, bits = 8  Maximum transfer rate, Mbps = 5
<P>Fast SCSI-2 Data path width, bits = 8  Maximum transfer rate, Mbps = 10
<P>Fast/Wide SCSI-2 Data path width, bits = 16  Maximum transfer rate, Mbps = 20
<P>Ultra SCSI-3 Data path width, bits = 8  Maximum transfer rate, Mbps = 20
<P>Ultra Wide SCSI-3 Data path width, bits = 16  Maximum transfer rate, Mbps = 40
<P>Make sure your disk drives are matched to your controller.  It is pointless to buy a disk that supports high transfer rates and put it on a controller that does not.  In addition it is also a bad idea to put slow devices and fast devices on the same bus, because errors can occur.
<P>
<H3><A NAME="topic32"></A>Building the Master Project Plan
</H3>
<P>After system functions have been identified and the gap analysis has been completed, an overall project plan can be constructed. The project plan provides more detailed information on timeline and overall implementation costs. It is not uncommon to revisit system functionality for future versions after compiling a project plan. 
<P>Building the master project plan requires: 
<UL>


<LI> Identifying the plan owner 
<LI> Defining the plan's scope (time, money, and people) 
<LI> Building the plan 
<LI> Updating the plan 

</UL><h4>Identifying the Plan Owner</h4>
<P>The owner of the project plan is usually the person assuming the role of the project manager. The individual must be able to influence resource decisions and effectively track the work progress.

<P><h4>Defining the Plan Scope</h4>
<P>Project scope should be defined, first, by using the preliminary scope questions to assess customer needs and, second, by conducting a gap analysis to discover new areas of messaging functionality that the customer requires at the present time. Use the deliverables from the gap analysis as input to build the master project plan.

<P><h4>Building the Master Project Plan</h4>
<P>Once the owner of the project plan has been identified, it's time to start building the project plan. It is important that the project planner include estimates from those who will be actually performing the work, so that there is sense of ownership. 
<P>Items to be included in the project plan for each task include: 
<UL>


<LI> Estimated work effort 
<LI> Task assignment 
<LI> Predecessor, if appropriate 

</UL>
<P>During this activity you will use the  <A HREF="sampmpp.zip" TARGET="_top">Sample Project Plan</A> <IMG SRC="../../../sitebuilder/graphics/leave-site.gif" WIDTH="17" HEIGHT="11" BORDER="0" ALT="Non-SBN link">  (.mpp file) to assist you in developing a project plan specific to your customer's requirements. 
<P><b>Note   </b>Once the project plan has been developed and project costs itemized, it is appropriate for the service provider to submit an additional proposal for work involved in the remainder of the project.

<P><h4>Updating the Project Plan </h4>
<P>Once the project plan has been created and the project started, it is important to update the data on a regular basis. The project plan should be reviewed with the members of the project team on a weekly or biweekly basis to ensure accuracy. This will serve to determine early on whether the project is on time and on budget.

<P>For help in documenting this information, use the Master Plan<i> </i> <A HREF="mastrpln.zip" TARGET="_top">checklist</A>. 
<P>
<H3><A NAME="topic33"></A>Staff Resources
</H3>
<P>Staff implementing a migration to IIS must have the following skills:
<UL>


<LI> Knowledge of Windows NT Server 4.0 networking and administration, including domain design, Web services, and security setup
<LI> Understanding of general Internetworking concepts and TCP/IP technologies
<LI> Familiarity with Microsoft Internet technologies, including Active Server Pages (ASP)
<LI> For migrations involving interoperation between UNIX and Windows NT Server, a firm grasp of the relevant concepts and awareness of the available tools
<LI> For migrations from UNIX Web services, the ability to port applications and utilities from UNIX to Windows NT Server 

</UL>These skills may be available within your company already, or you may decide to hire a consulting firm to round out your capabilities or even to handle the entire effort. If your migration project is small, you may find all the skills you need in one or two experienced members of your staff. In any event, any personnel who will be working with IIS during or after the migration will benefit from taking a Microsoft-certified course in IIS administration. 
<P>In addition to training the staff who will be performing the migration and administering the servers, you'll probably want to provide user training and support as well. To allow users to gain the most benefit from IIS tools and technologies, training should be offered on subjects such as creating ASP-based Web applications. For more information on available training, go to <A HREF="http://www.microsoft.com/msdn/training/" TARGET="_top">http://www.microsoft.com/msdn/training/</A> <IMG SRC="../../../sitebuilder/graphics/leave-site.gif" WIDTH="17" HEIGHT="11" BORDER="0" ALT="Non-SBN link">.

<P>For information on other available training materials and guides, go to  <A HREF="http://mspress.microsoft.com/" TARGET="_top">http://mspress.microsoft.com/</A> <IMG SRC="../../../sitebuilder/graphics/leave-site.gif" WIDTH="17" HEIGHT="11" BORDER="0" ALT="Non-SBN link">.
<P>
<H3><A NAME="topic34"></A>Developing Test Plans
</H3>
<P>You'll need to thoroughly test your newly migrated server and applications once the migration process is complete and before you deploy. You can develop solid test plans by keeping your project goals in mind and defining a test plan that measures your success at meeting them. 
<P><h4>Unit Testing</h4>
<P>Unit testing, the first test phase, is conducted in a lab environment. Unit testing involves each server alone, outside the context of the network and other servers and operating systems with which it may coexist. If your migration involves multiple servers, you should migrate, test, and tune one server initially to ensure that it performs properly before proceeding to the others. This learning process will help improve your approach for migrating subsequent servers. 
<P><h4>Integration Testing</h4>
<P>Once the server has passed unit testing, you're ready to evaluate it as a member of your network or server group during integration testing. 
<P><h4>Application Testing</h4>
<P>Prior to deployment on a production server, each application you migrate or port to IIS should be tested on a staging server running Windows NT Server 4.0 and IIS 4.0. It's best to begin this process well in advance of your final deadline for completion: as you know, Web applications can present unexpected problems. Following are a few examples of application tests. 
<P><h4>Pilot Testing</h4>
<P>Pilot testing involves a group of users who use the system prior to its full deployment to provide feedback on IIS features and functions. During an initial, pre-pilot phase, select a small group of users who have some technical savvy to try out the technology. You might not want to provide support during this phase because it can draw resources away from system development and affect your schedule. After making adjustments based on input from pre-pilot users you can begin the actual pilot. For this phase, a larger group of users should review and fully use the system features. These users should be at about the same technical level as your system users in general. During this phase, plan to provide support for all issues, errors, or problems reported by users. The support team can then report the issues to the design team if they require architectural changes. When changes are made to the system, the system should be completely re-tested.
<P>Be sure to include the following in your pilot planning:
<UL>


<LI> Adequate training for participants
<LI> A roll-out plan for staging the configurations and preparing systems for the pilot
<LI> Documentation of the installation process so improvements can be added as more is learned
<LI> A mechanism for users to provide constant feedback to the design and testing teams
<LI> Evaluation criteria for the pilot, including information about the number of users who were dissatisfied, number of problems reported, number of support calls and requests, and the resolution rate for problems

</UL><A HREF="testing.zip">Download and complete your own test plan checklist (zipped, 72K)</A>.

<P> <A HREF="howto.htm#top" CLASS="clsBackTop"><IMG SRC="../../../workshop/graphics/top.gif"  WIDTH="18" HEIGHT="8" BORDER="0" ALT="Top">Back to top</A>
<P>
<H2><A NAME="newserv"></A>Preparing the New Windows NT 4.0 Servers 
</H2>
Taking the time to properly prepare the new Windows NT Servers prior to migrating content and application code will contribute to a smooth migration process.  Attention should be paid to ensuring that your new Windows NT Servers are properly configured with the latest Windows NT Server Option Packs, Service Packs, and hot fixes before migrating the content from the source UNIX server.  In addition, your new Windows NT Server should be configured with the new administrators and users, and security configured for your environment prior to migration.  This section assumes that you have already properly installed and configured your new Windows NT Server, and that the server is live on your network.  For more information on installing and setting up Windows NT Server 4.0, see the  <A HREF="http://www.microsoft.com/ntserver/default.asp" TARGET="_top">Windows NT Server Documentation</A> <IMG SRC="../../../sitebuilder/graphics/leave-site.gif" WIDTH="17" HEIGHT="11" BORDER="0" ALT="Non-SBN link">.
<P>
<H3><A NAME="topic35"></A>Back Up the Source UNIX Server
</H3>
<P>Regular backup procedures should be a part of every server administrator's day.  It is best to back up the current UNIX source servers in the event that an unforeseen problem should arise during the migration process.  The backup should be separate from your normal rotation and available on-site if you need to perform recovery during the migration.  Be sure to properly label the backup medium so that it does not get mixed up with the regular backup group. We also recommend that you do <i>not</i> use a production server for the migration. Use a separate machine.
<P>
<H3><A NAME="topic36"></A>Recommended OS Updates
</H3>
<P>Microsoft makes software updates to Windows NT Server available in the form of Service Packs and Option Packs. These OS updates contain new features and services, upgrades to existing services, and fixes and patches to make your server run smoothly and more securely.  It is important that you install the following recommended updates to ensure that your server's OS is up to date and secure.    
<P>You can download the latest Service Packs from the following URLs: 
<P><A HREF="http://www.microsoft.com/windows/downloads/default.asp" TARGET="_top">http://www.microsoft.com/windows/downloads/default.asp</A> <IMG SRC="../../../sitebuilder/graphics/leave-site.gif" WIDTH="17" HEIGHT="11" BORDER="0" ALT="Non-SBN link">
<P><A HREF="http://www.microsoft.com/windows/downloads/contents/Updates/NT4SvcPk3/default.asp" TARGET="_top">Microsoft Windows NT Service Pack 3</A> <IMG SRC="../../../sitebuilder/graphics/leave-site.gif" WIDTH="17" HEIGHT="11" BORDER="0" ALT="Non-SBN link">
<P> <A HREF="http://www.microsoft.com/windows/downloads/contents/Updates/NT40ptPk/default.asp" TARGET="_top">Microsoft Windows NT Server 4.0 Option Pack</A> <IMG SRC="../../../sitebuilder/graphics/leave-site.gif" WIDTH="17" HEIGHT="11" BORDER="0" ALT="Non-SBN link">
<P> <A HREF="http://www.microsoft.com/windows/downloads/contents/Updates/NT4y2kfix/default.asp" TARGET="_top">Y2K Fixes for Windows NT Server</A> <IMG SRC="../../../sitebuilder/graphics/leave-site.gif" WIDTH="17" HEIGHT="11" BORDER="0" ALT="Non-SBN link">
<P> <A HREF="http://www.microsoft.com/windows/downloads/contents/Updates/NTEuroPatch/default.asp" TARGET="_top">Microsoft Euro Currency Support for Windows NT Server 4.0</A> <IMG SRC="../../../sitebuilder/graphics/leave-site.gif" WIDTH="17" HEIGHT="11" BORDER="0" ALT="Non-SBN link">
<P>
<H3><A NAME="topic37"></A>Configuring Security Settings
</H3>
<P><h4>Windows NT Server and UNIX Security Compared</h4>
<P>Windows NT Server and UNIX handle their respective user accounts very differently, complicating the integration of these accounts in a mixed environment. If you plan a multi-step approach to migrating from UNIX to the more secure Windows NT Server environment, you might find it necessary to use a mixed authentication scheme during the early stages.
<P>Microsoft also developed the IIS 4.0 UNIX Integration SDK to provide a foundation through which IIS can integrate Windows NT Server authentication with UNIX authentication. With the tools provided, users who have accounts on a UNIX server can still access protected content on IIS in a transparent manner.
<b> </b>For more information about this SDK, go to <A HREF="http://www.microsoft.com/isn/techcenter/unixnt/default.asp" TARGET="_top">http://www.microsoft.com/isn/techcenter/unixnt/default.asp</A> <IMG SRC="../../../sitebuilder/graphics/leave-site.gif" WIDTH="17" HEIGHT="11" BORDER="0" ALT="Non-SBN link">.
<P><h4>Security For IIS Applications</h4>
<P>IIS provides three authentication schemes to control access to IIS resources: Anonymous, Basic, and Windows NT Challenge/Response. Each of these schemes has a different effect on the security context of an application launched by IIS. This includes ISAPI extension agents, CGI applications, IDC scripts, and future scripting capabilities. 
<P><h4>Anonymous Authentication</h4>
<P>Setting Anonymous Authentication in the Internet Service Manager means that IIS will not use any HTTP authentication mechanism to control access to resources on the machine. By default, when IIS is installed, it creates a user account called <b>IUSR_&lt;servername&gt;</b>, where &lt;<i>servername</i>&gt; is the name of the server on which IIS is running. This user account is added to the Guests group on the machine, which implies that its access to resources is limited. When an HTTP request that uses Anonymous authentication is received by IIS, IIS will impersonate the <b>IUSR_&lt;servername&gt;</b> account to execute any code or access any files that are involved in the request. This allows a level of security by limiting accessibility to such things as system files by an unauthenticated user. IIS is able to impersonate the <b>IUSR_&lt;servername&gt;</b> account because the user name and password credentials for this account are known by IIS. 
<P>You can change the account that is used for anonymous authentication in  Internet Service Manager. You can also change the security privileges for the <b>IUSR_&lt;servername&gt;</b> account in Windows NT Server User Manager. 
<P>
<BLOCKQUOTE><b>Important</b> Be aware that any changes will result in changes to every anonymous HTTP request that is serviced by IIS. Also note that if the anonymous account configured in Internet Service Manager does not have the Log On Locally right (not a right given to Guest accounts by default on domain controllers), IIS will not be able to service any anonymous requests. The IIS installation specifically gives the Log On Locally right to the <b>IUSR_&lt;servername&gt;</b> account. 
</BLOCKQUOTE>
<P>Most resources that allow Guests to access them, such as the <b>IUSR_&lt;servername&gt;</b> account,  do so by allowing access to the special group Everyone. You can set permissions on files and other resources specifically to allow or disallow the <b>IUSR_&lt;servername&gt;</b> account to access them, but most people end up managing access by controlling access to the Everyone or Guests groups. 
<P>
<BLOCKQUOTE><b>Note</b>   Because you can configure IIS to use an anonymous account that is different than the <b>USR_&lt;servername&gt;</b> account set up by default, wherever this discussion refers to the <b>IUSR_&lt;servername&gt;</b> account, you should think of it as a placeholder for the account name configured as the Anonymous Logon account in the Internet Service Manager. 
</BLOCKQUOTE>
<P><h4>Basic Authentication</h4>
<P>Basic authentication is a scheme that causes the client to be prompted for a User name and Password that are then Base64-encoded and passed to IIS. IIS receives the user name and password credentials and verifies them against the Windows NT Server user database on the machine or the applicable domain controllers in any trusted Windows NT Server domains. If the credentials are valid, IIS will impersonate the specified user when allowing access to resources by IIS or any applications that the request is launching. Thus, the application being executed, whether it is an ISAPI extension a DLL, a CGI application, or a scripting mechanism, will be executed with the permissions of the corresponding user account passed by the Basic authentication. 
<P>Because Basic authentication provides the user name and password credentials to IIS, access to items that require credential knowledge can successfully be performed when using Basic authentication. For example, if an ISAPI application mapped a drive letter across a network, it would require knowledge of the current user's credentials. Because IIS is given the user name and password credentials as part of Basic authentication, this task will succeed if the account specified has access to the network resource. 
<P><h4>Windows NT Server Challenge/Response Authentication</h4>
<P>Windows NT Server Challenge/Response authentication (often called NTLM authentication) is the most secure form of authenticating a user because the user name and password are not sent across the wire. Rather, the Windows Security Provider interface is used to provide an encrypted challenge/response handshake mechanism that is functionally unbreakable. The Windows security provider interface allows IIS to validate and impersonate the user. Unlike Basic authentication, NTLM authentication does not prompt users for their user name and password by default. The current Windows user account on the client machine is used for the NTLM authentication. Then, if this fails, it will prompt the user for the user name and password to be used. If NTLM authentication succeeds, the requested application or resource is executed in the context of the specified user. 
<P>Because of the one way encryption is used, NTLM authentication validates the user for IIS without providing knowledge of the user's password to IIS. Therefore, a full set of user name and password credentials is not available to IIS for doing such tasks as mapping a network drive. If an ISAPI application calls <b>WNetAddConnection2</b> without specifying a user name and password, it will fail under NTLM authentication. 
<P><h4>Multiple Authentication Schemes Selected</h4>
<P>You can select any combination of Anonymous, Basic, and NTLM authentication in Internet Service Manager. If Anonymous authentication is checked, the request will try to be handled without any actual authentication and IIS will execute the request in the context of the global <b>IUSR_&lt;servername&gt;</b> account. If, for some reason, the <b>IUSR_&lt;servername&gt;</b> account does not have access to the resource, IIS will send an access-denied error to the client indicating that the client needs to use one of the other authentication schemes. This scenario could occur if you limited access to the actual ISAPI DLL file to a specific user, such as User1. IIS would receive the initial anonymous request and attempt to launch the ISAPI DLL under the <b>IUSR_&lt;servername&gt;</b> user context, only to get an access-denied error from the NTFS file system. IIS would respond to the client with a message saying that access was denied and the client needs to submit the request using either the Basic or NTLM authentication schemes (depending on which one is enabled, possibly even both). The client can then resubmit the request with the Basic authentication credentials or with the initial NTLM challenge/response sequence. If either of these responses provides validation of the User1 account, IIS will impersonate the User1 account and successfully launch the ISAPI DLL. 
<P>It is worth noting that if both NTLM and Basic authentication schemes are checked, IIS responds to requests indicating that both schemes are acceptable. It is up to the client to determine which authentication schemes it supports and to respond appropriately. For browsers such as Internet Explorer, which support both Basic and NTLM Authentication, they will respond using the first supported authentication scheme indicated by IIS. On IIS 1.0, when both Basic and NTLM authentication schemes were checked, Basic authentication was listed first. On IIS 2.0, NTLM is listed before Basic. The result is that for a server running IIS 1.0 using both, Internet Explorer will use Basic authentication. For an IIS 2.0 server using both, Internet Explorer will use NTLM authentication. 
<P><h4>Registry Issues</h4>
<P>Many IIS applications access resources provided by other software components. For example, an ISAPI extension DLL may call an OLE Automation server from a third-party software company, or a CGI application may launch an applet built with Microsoft Visual Basic. These components may have persistent information stored in the registry that they require in order to execute properly. For standard desktop use of these components, the registry information is read from the profile of the user currently logged onto the Windows NT Server machine. 
<P>These applications often have problems when launched by IIS because the profile made available to an IIS application is that of the "default user." The default user profile is filled with information generic to all users, but, unfortunately, is specific to no user or users. Therefore, a component may run as expected when User1 executes it interactively on his or her desktop because it is reading information from User1's profile in the registry. The same application may not run at all from IIS because it will not have access to User1's profile. This is true even if IIS is impersonating User1's account using Basic or NTLM authentication. 
<P><h4>Desktop Issues</h4>
<P>Windows NT Server uses the concept of having multiple desktops on the same machine. A desktop can be thought of as the screen that you view when you are logged on a Windows NT Server machine. Your desktop receives all the mouse and keyboard messages that you create as the user in front of the machine, and it allows for applications to interact with one another to a certain extent. For instance, one application on a desktop can post messages to other applications on the desktop. NT supporting multiple desktops implies that there are other desktops running; you just can't see them and you have no way of sending keyboard or mouse messages to them. This may seem like a futile concept, but, in fact, many applications that run as Windows NT Services require the capabilities that a desktop provides yet don't want to interact with the interactive user's desktop. Therefore, each service gets its own desktop that won't be interfered with by the currently logged-on user. 
<P>The effect of this, to IIS applications, is that the IIS service has its own desktop. If your IIS application interacts with a desktop in any way (for instance, if it displays a message box), it will display that message box on a desktop that cannot be seen on the computer's monitor. Similarly, an IIS application will not be able to send or post messages to an application on the interactive desktop. If your IIS application needs to interact with the interactive desktop, you should use another form of inter-process communication such as named pipes. 
<P><h4>ISAPI Filter DLLs </h4>
<P>ISAPI Filter DLLs, not to be confused with ISAPI Extension DLLs, run in the original context of the IIS service. All services run by default under the Local System account of the machine on which they are installed. The Local System account has access to almost all resources on the local machine not specifically denied to it, and no resources on any other machines on the network. 
<P><h4>COM and OLE Permissions</h4>
<P>Launching an OLE or COM object on a Windows NT Server 4.0 machine requires certain permissions. This is normally not an issue for most interactive users because the default permissions for launching and accessing OLE and COM objects on an NT machine allow access to anyone logged on the local machine interactively. An IIS application, whether it is running in the context of the <b>IUSR_&lt;servername&gt;</b> account or an impersonated user account from Basic or NTLM authentication, is <i>not</i> interactively logged on. Therefore, the default permissions for launching and accessing OLE and COM objects will not allow an ISAPI extension DLL, CGI application, or Internet script to launch these objects successfully. 
<P>The utility DCOMCNFG on Windows NT Server 4.0 enables you to set the default permissions for <i>all</i> COM and OLE objects on your machine. You can use this utility to provide OLE and COM access to the <b>IUSR_&lt;servername&gt;</b> account as well as all user accounts that might be impersonated by your IIS configuration. You can even grant permissions to the Everyone group. 
<P>However, providing global access to all OLE and COM objects may not be in your best interest, so DCOMCNFG will also enable you to specify permissions for specific applications so you can provide access to only the applications you'll need to access from your IIS application. OLE and COM applications also have the ability to determine what permissions are associated with launching and accessing themselves. To do this from inside your OLE or COM server, see the <b>CoInitializeSecurity</b> function in Windows NT Server 4.0, as well as <b>CoCreateInstanceEx</b> (in particular, the COSERVERINFO and COAUTHINFO structures) for manipulating OLE access from the client side. 
<P>Distributed COM (DCOM), also referred to as Remote Automation, requires all of the OLE/COM permissions discussed above. In addition, it needs to access resources across the network. If a request is received using Anonymous authentication, the <b>IUSR_&lt;servername&gt;</b> account user name and password credentials will be used to connect to the remote DCOM server. Unless your IIS server machine is also a domain controller, the remote machine by default will not know who the <b>IUSR_&lt;servername&gt;</b> account is (it only exists on the local IIS server machine). Adding access and launch permissions to the group Everyone does not help in this case because DCOM will not map access by an unknown account to the guest account in the same way that the Lanman Server service does for file sharing. The DCOM server machine must explicitly know the account that is being used. 
<P>To deal with a scenario where you have IIS applications accessing resources (including DCOM resources) on remote machines, you need to have all the machines involved participate in a domain relationship. Then, in Internet Service Manager, you can change your anonymous account to an account in the local or trusted domain. All machines in the domain structure will recognize the account, and can explicitly add/delete access to their network resources for that account or any groups of which that account is a member. 
<P>Be aware that if Basic authentication is used for an IIS request, access to network resources (including DCOM servers) will be done in the context of the user whose credentials were passed with the request. If the user specified does not have permissions to launch or access the DCOM server, the request will fail. 
<P>If the IIS request is validated using NTLM authentication, the impersonation level does not imply knowledge of the user name and password credentials. Therefore access to network resources, regardless of the permissions on the resource, will be denied (with the exception of NULL Session resources).
<P>For more information, see the Security and Cryptography section of the SBN Workshop, and the  <A HREF="http://www.microsoft.com/security/" TARGET="_top">Security Advisor site</A> <IMG SRC="../../../sitebuilder/graphics/leave-site.gif" WIDTH="17" HEIGHT="11" BORDER="0" ALT="Non-SBN link">.

<P>
<H3><A NAME="topic38"></A>Setting Up Windows NT Server Permissions
</H3>
<P><h4>User and Administrator Accounts</h4>
<P>Depending on your particular requirements for allowing or denying access to server resources, you'll need to set up necessary user and administrator accounts.  Administrator accounts are reserved for those who need system-level access to the entire server and user accounts for restricted user-level access. Each type of account has a set of permissions that allow or restrict certain actions.
<P><h4>Web Site Operator Accounts</h4>
<P>Delegating administrative rights to customers in an ISP environment is challenging in light of security considerations.  An administrator needs to ensure that each customer can administer only his/her own Web site.  ISPs who are hosting multiple sites on a single server can use IIS' Web Site Operators feature to give the individual site administrators complete control over the properties, applications, and security of their site -- without jeopardizing the security or configuration of other sites running on the same server.  A Web Site Operator is not permitted to change bindings or port numbers, configure anonymous user names and passwords, change the identification of the Web site, throttle bandwidth, change accounts on the server, add virtual directories, configure process isolation or ISAPI filters, or stop, pause, or restart a site. 
<P><h4>Access Privileges</h4>
<P>IIS provides several new access levels. The following values can set the type of access allowed to specific directories:
<P><b>Read</b>
<P>Enables Web Clients to read or download files stored in a home directory or a virtual directory. If a client sends a request for a file that is in a directory without read permission, the Web server will return an error.
<P><b>Write</b>
<P>Enables Web clients to upload files to the enabled directory on your server, or to change content in a write-enabled file.
<P><b>Script</b>
<P>Enables trusted applications to run in this directory without having execute permissions set.  Use the script permission for ASP scripts, Internet Database Connector scripts, and others.  Script permission is safer than execute permission because you can limit the applications that can be run in the directory.
<P><b>Execute</b>
<P>Enables Web clients to run programs and scripts stored in a home directory or a virtual directory. If a client sends a request to run a program or a script in a directory that does not have execute permission, the Web server returns an error message.
<P><b>Log Access</b>
<P>Enables the recording of visits to a site to a system's log file.  You must enable logging for the Web Site to establish a log file.
<P><b>Directory Browsing</b>
<P>Enable a hypertext listing of the files and subdirectories in this virtual directory. A hypertext directory listing is generated automatically and sent to the user when a browser request does not include a specific HTML filename and when no default document is provided for in the specified directory.
<P>
<H3><A NAME="topic39"></A>Installing Tools and Utilities
</H3>
<P>When migrating your Web server from UNIX to Windows NT Server, make an inventory of all the third-party tools and utilities that you currently use on your UNIX server and locate their Windows NT Server counterparts if you intend to continue their use on your new Windows NT Server.  Many UNIX scripting engines are available for Windows NT Server as well as a great deal of third-party tools and utilities that are available for UNIX.  This section should help you get a head start on tracking down and installing these tools.
<P><h4>UNIX Scripting Engines</h4>
<P><b>Perl</b>
<P>Perl scripting engines are currently available in several forms for the Win32&#174; platform. ActiveState Tool Corporation provides three options for running Perl scripts on Windows NT Server: Scripts can run as CGI executables (Perl for Win32), as DLLs within the IIS process (Perl for ISAPI), or within the ASP environment (PerlScript).  The ASP environment option provides the best performance, but you will need to modify your scripts to run within it. If you want to migrate a script with minimal or no modification, PERL for ISAPI offers best performance.  The advantage of Perl for ISAPI is that a separate process is not generated for every request, as is the case for CGI executables on Windows NT Server. 
<P>For more information and to download a Win32 Perl scripting engine go to:
<P><A HREF="http://www.activestate.com/" TARGET="_top">http://www.activestate.com</A> <IMG SRC="../../../sitebuilder/graphics/leave-ms.gif" WIDTH="33" HEIGHT="11" BORDER="0" ALT="Non-MS link">
<P><b>Tcl/TK</b>
<P>Sun has officially stopped their efforts to update Tcl/TK and has passed the torch on to several other groups.  Currently you can get information on and download Tcl/TK for Windows NT Server from the Tcl/TK Consortium and Scriptics Corporation:  
<P><A HREF="http://www.scriptics.com/" TARGET="_top">http://www.scriptics.com/</A> <IMG SRC="../../../sitebuilder/graphics/leave-ms.gif" WIDTH="33" HEIGHT="11" BORDER="0" ALT="Non-MS link">
<P><A HREF="http://www.tclconsortium.org/" TARGET="_top">http://www.tclconsortium.org/</A> <IMG SRC="../../../sitebuilder/graphics/leave-ms.gif" WIDTH="33" HEIGHT="11" BORDER="0" ALT="Non-MS link">
<P><b>Python</b>
<P>You can obtain information on Python for Windows and download a Python scripting engine for Windows NT Server from:
<P><A HREF="http://www.python.org/windows" TARGET="_top">http://www.python.org/windows</A> <IMG SRC="../../../sitebuilder/graphics/leave-ms.gif" WIDTH="33" HEIGHT="11" BORDER="0" ALT="Non-MS link">
<P><b>Gzip AND TAR</b>
<P>Gzip, the popular UNIX compression utility, is available for Windows NT Server.  This can come in handy when transferring large chunks of Web content from UNIX Web servers and uncompressing them on Windows NT Server.  Both TAR and Gzip support are available in WinZip 6.3 as well as several other useful formats such as UUencode XXencode, BinHex, MIME, and UNIX compress:
<P><A HREF="http://www.winzip.com/" TARGET="_top">http://www.winzip.com/</A> <IMG SRC="../../../sitebuilder/graphics/leave-ms.gif" WIDTH="33" HEIGHT="11" BORDER="0" ALT="Non-MS link">
<P><A HREF="http://www.gzip.org/" TARGET="_top">http://www.gzip.org/</A> <IMG SRC="../../../sitebuilder/graphics/leave-ms.gif" WIDTH="33" HEIGHT="11" BORDER="0" ALT="Non-MS link">
<P><b>FTP Clients</b>
<P>There are many different shareware and freeware FTP clients available for download on the Web.  Each one takes advantage of a different UI and has different features.  You can download an FTP client from:
<P><A HREF="http://www.shareware.com/" TARGET="_top">http://www.shareware.com/</a> <IMG SRC="../../../sitebuilder/graphics/leave-ms.gif" WIDTH="33" HEIGHT="11" BORDER="0" ALT="Non-MS link">
<P>
<H3><A NAME="topic40"></A>Populating Directories with Web Content
</H3>
<P><h4>IIS Directory Structure</h4>
<P>When you install IIS 4.0 for the first time it creates a default directory structure for your HTTP server at C:\\Inetpub\wwwroot. This directory is the root directory for your "default Web site".   It is best to rename the "default Web site" to better reflect the name of the newly migrated site.   This directory will function as the root directory for your Web site by default.
<P><h4>Virtual Directories</h4>
<P>IIS enables you to store content for a Web site outside of the wwwroot directory tree, using a feature called Virtual Directories.  Virtual Directories enables you to store Web content such as HTML files, scripts, images, and other files associated with your site, in any directory in your Windows NT Server.  Virtual Directories can be located either on your primary server or another computer on your network.  The only restriction in using remote virtual directories is that the network drive must be in the same Windows NT Server Domain as the IIS system.
<P><h4>Virtual Hosts/Roots/Servers</h4>
<P>Virtual Hosts/Servers are very common for ISPs and volume hosting environments.  IIS 4.0 supports Virtual Hosts/Servers in two ways.  IIS 4.0 will support multiple Virtual Servers with multiple IP addresses and multiple Virtual Servers on a single IP address.  The method you choose depends on how your current server infrastructure has been established.  IIS 4.0 supports multiple virtual servers on a single IP address through the use of a host header that most new browsers support.  For a browser to support host header names, the browser must be HTTP 1.1-compliant.  If you wish to target browsers that do not support HTTP 1.1, you can use cookies or URL-munging to enable the browser to correctly view multiple virtual servers running on a single IP address.   For more information on configuring virtual servers, see the IIS documentation.
<P><h4>Transferring Files and Directories</h4>
<P>Once you have properly configured your IIS settings and established a directory scheme, you can copy content from the source UNIX server to the newly prepared Windows NT Server.  You need to choose the transfer method that works best for your environment.  Depending on your situation, it might be best to run a batch UNIX2DOS shell script to avoid "control M's" from appearing at each carriage return in the HTML files on the Windows NT Server. 
<P> A simple approach to moving the entire Web site intact is to run TAR on the entire site, FTP it to the new Windows NT Server, and use a de-compression utility such as WinZip to &quot;un-tar&quot; the Web site in the correct directory.  This approach enables you to easily transfer the entire Web site directory tree in one file.  Remember to transfer any CGI scripts that you plan to keep using on Windows NT Server and to follow similar steps as above.
<P> <A HREF="howto.htm#top" CLASS="clsBackTop"><IMG SRC="../../../workshop/graphics/top.gif"  WIDTH="18" HEIGHT="8" BORDER="0" ALT="Top">Back to top</A>
<P>
<H2><A NAME="config"></A>Migrating Web Server Configuration Settings 
</H2>

<H3><A NAME="topic41"></A>Migrating from Apache 
</H3>
<P>Migrating the server configuration settings from Apache to IIS 4.0 is a simple process.  The most significant difference between setting your server configuration on Apache and IIS is the fact that IIS uses a graphic administration tool, Internet Services Manager module of the Microsoft Management Console, instead of a plain text file. Each of the configuration settings contained within httpd.conf, srm.conf, and access.conf are listed in the table below.  The compatibility or counterpart of each setting in their respective configuration files is listed next to the setting in the table below.  Be sure to migrate all of your server settings to ensure proper performance.
<P>For in-depth documentation on the configuration settings and capabilities of IIS 4.0, see the IIS documentation, the Internet Information Server Resource Kit, or one of the many books available from Microsoft Press and other publishers (linked to in our  <A HREF="howto.htm#resources">Resources</A> section).
<P><b>Migrating Apache httpd.conf Configuration Settings </b>
<P>
<TABLE CLASS=clsRef WIDTH=95% BORDER=0 CELLPADDING=5 CELLSPACING=2>
<TR ALIGN=LEFT VALIGN=MIDDLE BGCOLOR="#A6CAF0">

<TD><b>Setting</b>
</TD>

<TD><b>Migrates</b>
</TD>

<TD><b>Comment</b>
</TD>
</TR>
<TR ALIGN=LEFT VALIGN=TOP>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT><b>ServerType</b>
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>No
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>IIS 4.0 always runs in Stand-alone mode.  Once IIS 4.0 is started, its process will remain in memory and listen to the set HTTP port.  You cannot configure IIS 4.0 to dynamically load as with an <b>inetd</b> server on Apache.

</TD>
</TR>
<TR ALIGN=LEFT VALIGN=TOP>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT><b>Port</b>
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>Yes
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>You set the port that your Web server should listen to by right-clicking a Web site in the MMC, choosing Properties, and selecting the Web Site tab, and entering a port number in the field labeled TCP Port.

</TD>
</TR>
<TR ALIGN=LEFT VALIGN=TOP>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT><b>HostnameLookups</b>
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>Yes
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>IIS 4.0 log files capture the IP addresses of visitors to your Web site.  If you wish to look up the host name of a given IP address, you'll have to use the Usage Import tool that is included in the Site Server Express component of IIS 4.0.

</TD>
</TR>
<TR ALIGN=LEFT VALIGN=TOP>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT><b>User/Group</b>
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>No
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>IIS 4.0 does not run under a user account or group.  You need to be logged in as an administrator or operator to start and stop the IIS 4.0 service, but the process does not retain your permissions.

</TD>
</TR>
<TR ALIGN=LEFT VALIGN=TOP>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT><b>ServerAdmin</b>
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>No
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>IIS 4.0 does not have a configuration setting for displaying the administrator's name and contact information.  This information could be added to your pages using ASP if needed.

</TD>
</TR>
<TR ALIGN=LEFT VALIGN=TOP>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT><b>ServerRoot</b>
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>Yes
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>To migrate this setting, right-click a Web site in the MMC, choose Properties, and select the Home Directory tab.  Specify the default directory for your Web site as well as access permissions in the fields on this tab.

</TD>
</TR>
<TR ALIGN=LEFT VALIGN=TOP>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT><b>BindAddress</b>
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>Yes
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>IIS 4.0 enables you to specify Virtual hosts.  To migrate this setting, right-click a Web site, choose Properties, and select the Web Site tab.  Click the Advanced button on the Web Site tab and add the correct IP address and TCP Port.  
</TD>
</TR>
<TR ALIGN=LEFT VALIGN=TOP>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT><b>ErrorLog</b>
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>No
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>All errors with the Inetinfo process are logged to the Windows NT Server event log and do not need to be specified in the Web server configuration.

</TD>
</TR>
<TR ALIGN=LEFT VALIGN=TOP>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT><b>TransferLog</b>
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>No
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>IIS does not use a transfer log.

</TD>
</TR>
<TR ALIGN=LEFT VALIGN=TOP>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT><b>PidFile</b>
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>No
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>IIS 4.0 does not offer the option to log its process ID to a file. 
</TD>
</TR>
<TR ALIGN=LEFT VALIGN=TOP>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT><b>ScoreBoardFile</b>
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>No
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>IIS does not have a Scoreboard file.

</TD>
</TR>
<TR ALIGN=LEFT VALIGN=TOP>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT><b>ServerName</b>
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>No
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>The host name for your Web Server is stored in your DNS server and is not required in the IIS 4.0 configuration settings.  Your IP address and HTTP port is still required in IIS 4.0 for your server to serve content.

</TD>
</TR>
<TR ALIGN=LEFT VALIGN=TOP>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT><b>CacheNegotiatedDocs</b>
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>No
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>IIS 4.0 enables you to specify when content expires in a browser or proxy cache.  To migrate this setting, right-click a Web site, choose Properties and select the HTTP<b> </b>Headers tab.  Enter your expiration dates in the  Enable Content Expiration option on the tab.

</TD>
</TR>
<TR ALIGN=LEFT VALIGN=TOP>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT><b>Timeout</b>
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>Yes
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>You can specify the maximum amount of idle time that can pass before your server drops the connection.  To migrate this setting, right-click a Web site, choose Properties, and select  the Web Site tab.  Enter the maximum timeout value in the field titled Connection Timeout.

</TD>
</TR>
<TR ALIGN=LEFT VALIGN=TOP>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT><b>KeepAlive</b>
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>Yes
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>To migrate this setting, right-click a Web site, choose <b>Properties</b> and select the <b>Performance</b> tab.  This tab contains a check box that will allow the use of HTTP Keep-Alives.  IIS 4.0 does not allow you to specify the number of persistent requests to accept per connection.

</TD>
</TR>
<TR ALIGN=LEFT VALIGN=TOP>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT><b>KeepAliveTimeout</b>
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>No
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>IIS 4.0 will allow HTTP Keep-Alives but will not enable you to specify the number of seconds to wait for the next request.

</TD>
</TR>
<TR ALIGN=LEFT VALIGN=TOP>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT><b>Min/MaxSpareServers</b>
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>No
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>IIS 4.0 runs in a single process and as a result does not need to have a number of server processes accounted for.  
</TD>
</TR>
<TR ALIGN=LEFT VALIGN=TOP>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT><b>StartServers</b>
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>No
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>See above note for <b>Min/MaxSpareServers</b>.

</TD>
</TR>
<TR ALIGN=LEFT VALIGN=TOP>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT><b>MaxClients</b>
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>Yes
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>To migrate this setting, right-click a Web site, choose Properties and select the Web Site tab.   Specify Unlimited or Limited numbers of connections in the Connections options.

</TD>
</TR>
<TR ALIGN=LEFT VALIGN=TOP>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT><b>MaxRequestsPerChild</b>
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>No
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>Because IIS 4.0 runs in a single process there is no need to set the maximum number of requests per child process as with Apache.

</TD>
</TR>
<TR ALIGN=LEFT VALIGN=TOP>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT><b>ProxyRequests</b>
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>No
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>IIS 4.0 cannot function as a proxy server on its own.  Microsoft Proxy Server is recommended as a proxy server for use with Windows NT Server.

</TD>
</TR>
<TR ALIGN=LEFT VALIGN=TOP>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT><b>Proxy Cache Parameters</b>
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>No
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>See above.

</TD>
</TR>
<TR ALIGN=LEFT VALIGN=TOP>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT><b>Listen</b>
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>Yes
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>IIS 4.0 enables you to specify a port for IIS to listen to for virtual hosts using host header names.  To migrate this setting, right-click a Web site, choose Properties, and select the Web Site tab.  Click the Advanced button and enter the TCP port.

</TD>
</TR>
<TR ALIGN=LEFT VALIGN=TOP>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT><b>VirtualHost</b>
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>Yes
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>IIS 4.0 allows the creation of Virtual Hosts through multiple IP addresses and a single IP address using Host Header Names supported in HTTP 1.1.  To create a Virtual Host, select the Web Site tab, and click the button next to the IP Address field labeled Advanced.

</TD>
</TR>

</TABLE>
<P><b>Migrating Apache srm.conf Configuration Settings</b>
<P>
<TABLE CLASS=clsRef WIDTH=95% BORDER=0 CELLPADDING=5 CELLSPACING=2>
<TR ALIGN=LEFT VALIGN=MIDDLE BGCOLOR="#A6CAF0">

<TD><b>Setting</b>
</TD>

<TD><b>Migrates</b>
</TD>

<TD><b>Comment</b>
</TD>
</TR>
<TR ALIGN=LEFT VALIGN=TOP>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT><b>DocumentRoot</b>
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>Yes
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>To migrate this setting, right-click a Web site, choose Properties and select the Home Directory tab.  Specify the location of the home directory.

</TD>
</TR>
<TR ALIGN=LEFT VALIGN=TOP>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT><b>UserDir</b>
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>No
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>IIS does not offer a default directory for ISP user HTTP directories.

</TD>
</TR>
<TR ALIGN=LEFT VALIGN=TOP>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT><b>DirectoryIndex</b>
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>No
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>You can configure IIS 4.0 to allow directory browsing using a browser.  IIS 4.0 does not enable you to specify a pre-written HTML document as a directory index however. To migrate this setting, right-click a Web site, choose Properties, select the Home Directory tab, and click the Directory Browsing Allowed check box.

</TD>
</TR>
<TR ALIGN=LEFT VALIGN=TOP>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT><b>FancyIndexing</b>
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>No
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>IIS 4.0 offers only default indexing.

</TD>
</TR>
<TR ALIGN=LEFT VALIGN=TOP>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT><b>AddIcon</b>
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>No
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>IIS 4.0 uses the standard Windows NT Server icons when displaying a directory.  You cannot specify a substitute icon through IIS 4.0.

</TD>
</TR>
<TR ALIGN=LEFT VALIGN=TOP>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT><b>DefaultIcon</b>
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>No
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>Windows NT Server offers a standard default icon for file types that do not have a pre-set icon in the file system.

</TD>
</TR>
<TR ALIGN=LEFT VALIGN=TOP>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT><b>AddDescription</b>
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>No
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>&nbsp;
</TD>
</TR>
<TR ALIGN=LEFT VALIGN=TOP>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT><b>ReadmeName</b>
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>No
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>IIS 4.0 does not specify a default name for Read Me files.

</TD>
</TR>
<TR ALIGN=LEFT VALIGN=TOP>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT><b>HeaderName</b>
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>No
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>&nbsp;
</TD>
</TR>
<TR ALIGN=LEFT VALIGN=TOP>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT><b>IndexIgnore</b>
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>No
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>&nbsp;
</TD>
</TR>
<TR ALIGN=LEFT VALIGN=TOP>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT><b>AccessFileName</b>
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>No
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>IIS 4.0 is integrated with the Windows NT Server 4.0 security model.  If you wish to limit access to a site or directory by user, you will configure a new user account in the Windows NT Server User Manager.  IIS does not allow the use of htaccess files to limit access.

</TD>
</TR>
<TR ALIGN=LEFT VALIGN=TOP>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT><b>DefaultType</b>
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>Yes
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>IIS 4.0 contains a comprehensive list of MIME types.  You can add new MIME types to the list should you need to serve a new MIME type.  To view MIME Types specified by default in IIS, right-click a Web site, choose Properties and select the HTTP Headers tab.  Click the button labeled File Types in the MIME Map section of the tab. 
</TD>
</TR>
<TR ALIGN=LEFT VALIGN=TOP>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT><b>AddEncoding</b>
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>No
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>IIS 4.0 does not specify encoding and de-coding.

</TD>
</TR>
<TR ALIGN=LEFT VALIGN=TOP>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT><b>AddLanguage</b>
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>No
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>&nbsp;
</TD>
</TR>
<TR ALIGN=LEFT VALIGN=TOP>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT><b>LanguagePriority</b>
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>No
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>&nbsp;
</TD>
</TR>
<TR ALIGN=LEFT VALIGN=TOP>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT><b>Aliases</b>
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>Yes
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>Virtual Directories are the equivalent of aliases in IIS 4.0. 
</TD>
</TR>
<TR ALIGN=LEFT VALIGN=TOP>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT><b>ScriptAlias</b>
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>No
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>Any directory can execute scripts with the Allow Scripts permission.

</TD>
</TR>
<TR ALIGN=LEFT VALIGN=TOP>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT><b>MetaDir</b>
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>Yes
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>Specify custom HTTP headers in IIS 4.0 by using the HTTP Headers tab.  You do not need to specify a Meta Directory to serve HTTP Header information.

</TD>
</TR>
<TR ALIGN=LEFT VALIGN=TOP>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT><b>MetaSuffux</b>
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>No
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>See above.

</TD>
</TR>
<TR ALIGN=LEFT VALIGN=TOP>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT><b>ErrorDocument</b>
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>Yes
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>To enable custom error messages, right-click a Web site, choose Properties, and select the  Custom Errors property tab.

</TD>
</TR>

</TABLE>
<P><b>Migrating Apache access.conf Configuration Settings </b>
<P>
<TABLE CLASS=clsRef WIDTH=95% BORDER=0 CELLPADDING=5 CELLSPACING=2>
<TR ALIGN=LEFT VALIGN=MIDDLE BGCOLOR="#A6CAF0">

<TD><b>Setting</b>
</TD>

<TD><b>Migrates</b>
</TD>

<TD><b>Comment</b>
</TD>
</TR>
<TR ALIGN=LEFT VALIGN=TOP>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT><b>Options Indexes</b>
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>Yes
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>You can set most of the <b>Options</b> parameter IIS equivalents by enabling execution permission or scripts permission in any directory.  Virtual directories are the equivalent of symbolic links, and can be configured in Internet Services Manager.

</TD>
</TR>
<TR ALIGN=LEFT VALIGN=TOP>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT><b>AllowOverride</b>
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>No
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>IIS 4.0 utilizes Windows NT Server Security to restrict access to a site so that htaccess files are not necessary to control access.

</TD>
</TR>
<TR ALIGN=LEFT VALIGN=TOP>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT><b>Server status reports</b>
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>No
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>IIS 4.0 does not provide server status reports.

</TD>
</TR>

</TABLE>
<P>
<H3><A NAME="topic42"></A>Migrating From Netscape Enterprise Server
</H3>
<P>Migrating the server configuration settings from Netscape Enterprise Server to IIS 4.0 is a simple process. This section defines some terms and provides tables of configuration settings. For in-depth documentation on the configuration settings and capabilities of IIS 4.0, see the IIS documentation or one of the many books available from Microsoft Press and other publishers.

<P><h4>Definition of Terms</h4>
<P>Here are some essential terms used in Netscape Enterprise Server with explanations of their IIS equivalents.
<P><b>Hardware Virtual Server: </b>In Netscape Enterprise Server, a <i>hardware virtual server</i> is a site with a separate IP address; the term implies a number of Web sites on a single computer, each with a separate IP address.  IIS supports this way of running multiple sites, but does not employ a special term for these sites.
<P><b>Software Virtual Server: </b>In Netscape Enterprise Server, a <i>software virtual server</i> is a site that may share an IP address with one or more other sites.  In IIS, you can assign any number of sites to a single IP address, but no special term is employed to describe them.  Many people refer to these sites as "virtual hosts."
<P><b>Multiple Instances of the Server: </b>This method of hosting multiple Web sites on one computer can be employed if:
<UL>


<LI> The operating system does not have strong thread support

<LI> The operating system does not allow a single process to support scheduled threads on more than one processor

<LI> Multiple instances of the server provide full process isolation, protecting a Web site from failure should another site on the same system crash

</UL>It is not appropriate to run multiple instances of IIS, because IIS running on Windows NT Server offers thread support across multiple processors, full configuration of each site hosted by the server, and process isolation for applications.
<P><b>Server Manager: </b>Server manager is the Netscape Enterprise Server administration tool.  The IIS equivalent is Internet Service Manager.
<P>
<H3><A NAME="topic43"></A>Migrating Administration Settings
</H3>
<P>Each configuration setting used by Netscape Enterprise Server is listed in the table below.  The compatibility or counterpart of each setting is listed next to the setting.  Be sure to migrate all of your server settings to ensure proper performance.  Each heading within this section corresponds to a settings tab within the NES Server Manager.
<P>In IIS, administrative settings are called properties and can be set on the server, site, directory, and even file level. In IIS, you can view and change properties in the Internet Service Manager and select Properties from the menu.  For more information, see the Server Administration section in the Windows NT Server 4.0 Option Pack documentation.
<P><b>NES Server Preferences</b>
<P>
<TABLE CLASS=clsRef WIDTH=95% BORDER=0 CELLPADDING=5 CELLSPACING=2>
<TR ALIGN=LEFT VALIGN=MIDDLE BGCOLOR="#A6CAF0">

<TD><b>Setting</b>
</TD>

<TD><b>Migrates</b>
</TD>

<TD><b>Comment</b>
</TD>
</TR>
<TR ALIGN=LEFT VALIGN=TOP>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT><b>On/Off</b>
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>No
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>In IIS 4.0, you turn a site on or off by using the Internet Service Manager.

</TD>
</TR>
<TR ALIGN=LEFT VALIGN=TOP>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT><b>Restore Configuration</b>
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>No
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>Backup configurations cannot be migrated, but IIS supports configuration backups once you have successfully migrated.

</TD>
</TR>
<TR ALIGN=LEFT VALIGN=TOP>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT><b>Maximum simultaneous requests</b>
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>Yes
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>To migrate this setting, right-click a Web site, choose Properties<b>, </b>and select the Web Site tab.  Enter this setting in the Limited to: field.

</TD>
</TR>
<TR ALIGN=LEFT VALIGN=TOP>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT><b>Enable DNS</b>
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>No
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>In IIS 4.0, you can restrict access by domain name. This is a resource-intensive operation and can have a significant impact on server performance.

</TD>
</TR>
<TR ALIGN=LEFT VALIGN=TOP>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT><b>HTTP Persistent Connection Timeout</b>
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>Yes
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>To enable this setting, right-click a Web site, choose Properties,<b> </b>and select the Web site tab and enter the setting in the Connection Timeout field.

</TD>
</TR>
<TR ALIGN=LEFT VALIGN=TOP>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT><b>MIME Types</b>
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>Yes
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>To view these settings, right-click any Web site you have set up, choose the HTTP Headers tab, and choose the File Types button. 
</TD>
</TR>
<TR ALIGN=LEFT VALIGN=TOP>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT><b>Server Name</b>
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>Yes
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>The setting can be migrated to a host header name.  To migrate this setting, right-click a Web site, choose Properties, select the Web Site tab, and choose the Advanced button.

</TD>
</TR>
<TR ALIGN=LEFT VALIGN=TOP>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT><b>Server Port</b>
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>Yes
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>To migrate this setting, right-click a Web site, choose Properties, and select the Web Site tab.  The setting should be entered in the TCP Port field.

</TD>
</TR>
<TR ALIGN=LEFT VALIGN=TOP>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT><b>Bind To Address</b>
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>Yes
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>To migrate this setting, right-click a Web site, choose Properties, and select the Web Site  tab.  Change the setting  in the IP Address box.

</TD>
</TR>
<TR ALIGN=LEFT VALIGN=TOP>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT><b>MTA Host and NNTP Host</b>
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>No
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>IIS includes an SMTP and an NNTP service.  These services make it easy to set up a self-contained Web site that sends and receives e-mail and posts information to newsgroups via Active Server Pages.  The SMTP service supports one mailbox for this purpose.  The NNTP service makes it easy to build and host an NNTP site.

</TD>
</TR>
<TR ALIGN=LEFT VALIGN=TOP>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT><b>Error Responses</b>
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>Yes
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>In cases where the custom error page is a standard HTML page, you need only copy the file to the IIS system to complete the migration.  In the case of CGI custom errors, you need to test the CGI scripts after moving them to IIS.

</TD>
</TR>
<TR ALIGN=LEFT VALIGN=TOP>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT><b>Dynamic Configuration Files</b>
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>No
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>In IIS, you can select individuals or groups and classify them as Web Site Operators. They do not have to be Windows NT Server administrators, and have limited authority to administer the site.  To access this feature, right-click a Web site, choose Properties, and select the Operators<b> </b>tab.

</TD>
</TR>
<TR ALIGN=LEFT VALIGN=TOP>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT><b>Restrict Access</b>
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>Yes
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>To migrate this setting, right-click a Web site, choose Properties<b>, </b>select the Directory Security tab, and choose the Edit<b> </b>button within the IP Address and Domain Name Restrictions box.

</TD>
</TR>
<TR ALIGN=LEFT VALIGN=TOP>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT><b>Convert 2.0 ACL file</b>
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>No
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>No settings to migrate
</TD>
</TR>
<TR ALIGN=LEFT VALIGN=TOP>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT><b>Encryption</b>
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>No
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>You need to use MS Key Manager to generate a request certificate and then apply your encryption settings.

</TD>
</TR>

</TABLE>
<P>
<H3><A NAME="topic44"></A>Migrating Program Settings
</H3>
<P>The settings in this section deal with Web applications.  IIS supports CGI applications, but because CGI applications don't run efficiently in the Windows NT Server environment you should consider converting them to Active Server Pages (ASP) or ISAPI applications.  For more information, see the  <A HREF="howto.htm#topic50">Migrating CGI Applications Overview section</A>.
<P>For more information on configuring CGI applications to run on IIS, see the Configuring Applications topics in the Server Administration section of the IIS documentation.
<P><b>NES Programs Settings</b>
<P>
<TABLE CLASS=clsRef WIDTH=95% BORDER=0 CELLPADDING=5 CELLSPACING=2>
<TR ALIGN=LEFT VALIGN=MIDDLE BGCOLOR="#A6CAF0">

<TD><b>Setting</b>
</TD>

<TD><b>Migrates</b>
</TD>

<TD><b>Comment</b>
</TD>
</TR>
<TR ALIGN=LEFT VALIGN=TOP>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT><b>CGI Directory</b>
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>Yes
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>NES CGI Directories should be given the Execute permission in IIS.

</TD>
</TR>
<TR ALIGN=LEFT VALIGN=TOP>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT><b>CGI File Type</b>
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>No
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>&nbsp;
</TD>
</TR>
<TR ALIGN=LEFT VALIGN=TOP>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT><b>Query Handler</b>
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>No
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>&nbsp;
</TD>
</TR>
<TR ALIGN=LEFT VALIGN=TOP>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT><b>WAI Management</b>
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>No
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>This setting has to do with IIOP; IIS uses the COM and DCOM object models.

</TD>
</TR>
<TR ALIGN=LEFT VALIGN=TOP>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT><b>Java</b>
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>Yes
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>The Java virtual machine is already enabled in IIS, so there is no need to migrate this setting in IIS.

</TD>
</TR>
<TR ALIGN=LEFT VALIGN=TOP>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT><b>Server Side JavaScript</b>
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>Yes
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>IIS includes server-side support for JScript and VBScript.  There is no need to migrate a switch setting for these languages.

</TD>
</TR>
<TR ALIGN=LEFT VALIGN=TOP>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT><b>WinCGI Directory</b>
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>Yes
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>NES WinCGI directories are given Execute permissions in IIS. 
</TD>
</TR>
<TR ALIGN=LEFT VALIGN=TOP>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT><b>ShellCGIDirectory</b>
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>Yes
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>NES ShellCGI Directories are given Execute permissions in IIS.

</TD>
</TR>

</TABLE>
<P>
<H3><A NAME="topic45"></A>Server Status Settings
</H3>
<P>The settings in this section primarily have to do with server logging.  For more information on logging, see "Logging Web site Activity" In the Windows NT Server 4.0 Option Pack online documentation.
<P><b>NES Server Status Settings</b>
<P>
<TABLE CLASS=clsRef WIDTH=95% BORDER=0 CELLPADDING=5 CELLSPACING=2>
<TR ALIGN=LEFT VALIGN=MIDDLE BGCOLOR="#A6CAF0">

<TD><b>Setting</b>
</TD>

<TD><b>Migrates</b>
</TD>

<TD><b>Comment</b>
</TD>
</TR>
<TR ALIGN=LEFT VALIGN=TOP>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT><b>View Access Log</b>
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>No
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>No settings to migrate.  For log file analysis, use Microsoft Usage Import and Report Writer, included with the Windows NT Server 4.0 Option Pack as part of Site Server Express.  
</TD>
</TR>
<TR ALIGN=LEFT VALIGN=TOP>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT><b>View Error Log</b>
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>No
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>No settings to migrate.  When running IIS, you can view the errors in the Windows NT Server Event Viewer.

</TD>
</TR>
<TR ALIGN=LEFT VALIGN=TOP>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT><b>Monitor Current Activity</b>
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>No
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>No settings to migrate.  To monitor server activity on IIS, use the Windows NT Server Performance Monitor to evaluate performance and resource consumption.

</TD>
</TR>
<TR ALIGN=LEFT VALIGN=TOP>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT><b>Archive Log</b>
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>No
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>No settings to migrate.  When you set your logging preferences on IIS, you can use Windows NT Server Backup or other third-party backup tools to archive the log files and remove them from the server as appropriate.

</TD>
</TR>
<TR ALIGN=LEFT VALIGN=TOP>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT><b>Log Preferences</b>
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>Yes
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>Basic log file settings can be migrated.

</TD>
</TR>
<TR ALIGN=LEFT VALIGN=TOP>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT><b>Generate Report</b>
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>No
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>No settings to migrate.  Usage Import and Report writer are the preferred tool for IIS log analysis.

</TD>
</TR>
<TR ALIGN=LEFT VALIGN=TOP>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT><b>SNMP Sub-Agent Configuration</b>
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>No
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>&nbsp;
</TD>
</TR>

</TABLE>
<P>
<H3><A NAME="topic46"></A>Content Management Settings
</H3>
<P><b>NES Content Management Settings</b>
<P>
<TABLE CLASS=clsRef WIDTH=95% BORDER=0 CELLPADDING=5 CELLSPACING=2>
<TR ALIGN=LEFT VALIGN=MIDDLE BGCOLOR="#A6CAF0">

<TD><b>Setting</b>
</TD>

<TD><b>Migrates</b>
</TD>

<TD><b>Comment</b>
</TD>
</TR>
<TR ALIGN=LEFT VALIGN=TOP>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT><b>Primary Document Directory</b>
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>Yes
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>To migrate this setting, right-click a Web site, choose Properties,<b> </b>and select the Home Directory tab.

</TD>
</TR>
<TR ALIGN=LEFT VALIGN=TOP>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT><b>Additional Document Directories</b>
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>Yes
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>See above.

</TD>
</TR>
<TR ALIGN=LEFT VALIGN=TOP>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT><b>Index Filenames</b>
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>Yes
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>See the <b>Home Page/Index File</b> setting below.

</TD>
</TR>
<TR ALIGN=LEFT VALIGN=TOP>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT><b>Directory Indexing</b>
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>Yes
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>Whether you have selected Simple or Fancy directory indexing, you can migrate this setting by right-clicking a Web site, choosing Properties<b>, </b>and selecting the Home Directory tab. 
</TD>
</TR>
<TR ALIGN=LEFT VALIGN=TOP>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT><b>Home Page/Index Files</b>
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>Yes
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>To migrate the index filename and extension, right-click a Web site, choose Properties<b>, </b>and select the Documents tab.

</TD>
</TR>
<TR ALIGN=LEFT VALIGN=TOP>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT><b>Default MIME Type</b>
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>No
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>&nbsp;
</TD>
</TR>
<TR ALIGN=LEFT VALIGN=TOP>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT><b>Parse Accept Language Header</b>
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>No
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>Microsoft Index Server, included in the Windows NT Server 4.0 Option Pack, can interpret this header in order to determine the language in which a query is being written.

</TD>
</TR>
<TR ALIGN=LEFT VALIGN=TOP>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT><b>URL Forwarding</b>
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>No
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>&nbsp;
</TD>
</TR>
<TR ALIGN=LEFT VALIGN=TOP>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT><b>Hardware Virtual Servers</b>
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>Yes
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>Migrated as a component of <b>ServerBindings</b>.  See the Definition of Terms section earlier in this section for an explanation of how IIS implements hardware virtual servers.

</TD>
</TR>
<TR ALIGN=LEFT VALIGN=TOP>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT><b>Software Virtual Servers</b>
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>Yes
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>Migrated as a component of <b>ServerBindings</b>.  See the "Definition of Terms" section earlier in this chapter for an explanation of how IIS implements software virtual servers.

</TD>
</TR>
<TR ALIGN=LEFT VALIGN=TOP>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT><b>International Characters</b>
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>No
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>When using Active Server Pages, you can specify the character set by using the <b>Response.Charset </b>property.

</TD>
</TR>
<TR ALIGN=LEFT VALIGN=TOP>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT><b>Document Footer</b>
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>Yes
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>A document footer can be specified for the entire IIS Server, for a single Web site, or for a directory.  To migrate this setting, right-click a Web site or a directory; choose Properties<b> </b>from the menu, and select the Documents tab.

</TD>
</TR>
<TR ALIGN=LEFT VALIGN=TOP>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT><b>Parse HTML</b>
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>No
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>IIS uses Active Server Pages rather than SHTML.  Pages written with this technique should be rewritten as ASP pages using JScript, VBScript, or other supported script languages.

</TD>
</TR>
<TR ALIGN=LEFT VALIGN=TOP>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT><b>Cache Control Directives</b>
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>No
</TD>
<TD BGCOLOR=#EEEEEE ALIGN=LEFT>Caching is handled differently in IIS.   The default for HTML pages is to allow them to be cached by proxy servers.  The default for ASP pages is "private," meaning they can not be cached.  With IIS, you can use the Response object to control whether a proxy server will cache the page.
<b> </b>
</TD>
</TR>

</TABLE>
<P>
<H3><A NAME="topic47"></A>Web Publishing Settings
</H3>
<P>Web publishing settings cannot be migrated.  These features can be supported with client-side development and management tools such as Microsoft FrontPage, Visual InterDev&#174;, and Microsoft Content Analyzer (included in Windows NT Server 4.0 Option Pack; a more full-featured version is available as a component of Microsoft Site Server).
<P>
<H3><A NAME="topic48"></A>Agents and Search Settings
</H3>
<P>Agents and Search settings cannot be migrated.  Microsoft Index Server is used to index and search Web sites maintained on IIS.  This tool, included in the Windows NT Server 4.0 Option Pack, is easy to install and configure.  For more information on Microsoft Index Server, see the Windows NT Server 4.0 Option Pack documentation (linked to from our  <A HREF="howto.htm#resources">Resources</A> section).
<P>
<H3><A NAME="topic49"></A>Auto Catalog
</H3>
<P>Auto Catalog settings cannot be migrated.  As with Agent and Search settings, IIS uses Microsoft Index Server to build a searchable catalog of information about the Web site.
<P> <A HREF="howto.htm#top" CLASS="clsBackTop"><IMG SRC="../../../workshop/graphics/top.gif"  WIDTH="18" HEIGHT="8" BORDER="0" ALT="Top">Back to top</A>
<P>
<H2><A NAME="migapp"></A>Migrating Applications 
</H2>

<H3><A NAME="topic50"></A>Migrating CGI Applications Overview
</H3>
<P>One of the most difficult and important decisions to make in the course of migrating a Web server from a competing UNIX-based Web server to Windows NT Server 4.0 running IIS 4.0 is how to best handle migrating existing server applications.  Often these applications have been built to the Common Gateway Interface Specification (CGI) and take the form of scripts written in interpreted languages such as Tcl or Perl, or monolithic executables written in C or C++. IIS fully supports both scripts and executables written to the CGI specification.
<P>IIS offers a very hospitable environment for CGI applications; in fact, it provides both the Active Server Pages (ASP) scripting environment and the Internet Server API (ISAPI), which enables developers to write applications that are faster and more scalable than CGI applications on Windows NT Server.  In addition, IIS provides some compelling application development features, such as script debugging and built-in database connectivity.
<P>This section assumes the reader is familiar with Web-based applications and CGI.  While several migration strategies are discussed, the focus is on migrating CGI applications to Active Server Pages.
<P>
<H3><A NAME="topic51"></A>Comparing CGI Applications to Active Server Pages
</H3>
<P>A server responds to a CGI execution request from a client browser by creating a new process.  This means that a new, separate process is created for every client request handled by a CGI application, even if a single client submits more than one request.  At any given time, the server is supporting a separate process for every ongoing request.  When a request is complete, the server must perform a series of steps to delete the process.
<P>CGI was created for a UNIX environment where processes are the basic unit of operation and have less overhead than processes in Windows NT Server.  In Windows NT Server, where threads are the basic unit of operation, processes have substantial overhead.  Each process receives a private physical memory allocation, is granted space in the paged and non-paged memory pools, and is protected by the Windows NT Server Security model.  In fact, every attribute that makes processes in Windows NT Server robust also makes them costly.  Because each CGI request generates a new process, CGI applications have much higher overhead than ASP or ISAPI applications.  
<P>As a result, CGI performance is considerably reduced on Windows NT Server.  Some benchmarks show that CGI applications run anywhere from three to five times slower than ISAPI applications and two to three times slower than ASP applications.
<P>CGI applications also scale poorly on Windows NT Server.  Adding additional processing power or RAM typically does not allow a CGI application to support many more concurrent users.  Therefore, if an application will be heavily used, there are strong reasons to move to a solution that uses ISAPI or ASP and components.  ISAPI applications offer some performance advantages over ASP applications, but ASP applications can be built much more quickly.  The difference is comparable to the difference between developing in C or C++ and developing in Visual Basic.
<P>Active Server Pages is an open server-application environment in which you can combine HTML, server-side scripts, and reusable ActiveX server components to create dynamic and powerful Web-based business solutions.  ASP enables server-side scripting for IIS with native support for both Visual Basic Scripting Edition (VBScript) and JScript.  In addition to these native languages, the ASP environment supports any scripting language that conforms to the Active Scripting requirements.  For example, there are Win32 implementations of the Perl, Tcl, and Python languages.
<P>Unlike CGI applications, which cause a new process to be created with each execution request, ASP applications run lighter-weight Win32 threads.  IIS transparently and efficiently manages pools of such threads and allocates resources appropriately to service incoming requests.
<P>ASP applications can be configured to run either <i>in process</i>, that is, within the IIS Web server process (for fastest execution speed), or <i>out of process</i>, isolated from the server process and running in their own processes (for maximum safety).  Even when they run as out-of-process applications, ASP and ISAPI applications typically execute much faster than CGI applications.
<P>Developers are free to choose the level of process isolation appropriate for their needs.  For example, while an application is under development, the developer may choose to run an application in its own memory space; when the application is in production, it can be run in process with the Web server.
<P>Some developers are concerned that Active Server Pages require them to support only one browser.  ASP pages contain server-side scripts that send HTML to the browser.  The HTML generated is completely under the developer's control.  In no way does ASP tie the developer into supporting a particular browser over another.
<P>For more information on Active Server Pages, see <A HREF="../../../workshop/server/asp/aspover.htm" TARGET="_top">The ABCs of Active Server Pages</A>.

<P>
<H3><A NAME="topic52"></A>Migration Strategies
</H3>
<P>One may take several approaches when migrating an existing CGI application to IIS.  You will need to determine the best solution for your needs.  Remember to factor in development time, scalability, performance, and purpose before making the decision.  In most cases it is best to migrate all of your existing CGI scripts at once. However, you may wish to migrate the most resource-intensive or heavily used CGIs first and leave the remaining scripts as CGI for migration at a later date.  There are many factors to consider, so be sure to allow enough time in your migration timeline to appropriately migrate existing CGI applications.
<P><h4>Port the CGI Application to Win32</h4>
<P>Although CGI applications are inherently inefficient under Windows NT Server, it is possible simply to port a CGI application to Win32, leaving it as a CGI application.  IIS supports CGI applications that expect to receive input via environment variables and the standard input stream, and expect write output via the standard output stream.  If your application can port to Win32, this may be all that is required.
<P>If you port your CGI application, you should examine the code to see just how much of it is needed in the ASP environment -- you may find that within the ASP environment, much of the application's code is unnecessary.  
<P>Because CGI applications do not scale well on Windows NT Server, simply porting an application to the Win32 environment is not a good idea if the application needs to support many concurrent users.  The best way to build a scalable application is to use Active Server Pages and components.
<P>If your current application is a script, make sure you have a Win32-compatible version of the script interpreter installed.  For more information on where to get the most common Win32 script interpreters, see  <A HREF="howto.htm#topic39">Installing Tools and Utilities</A>.
<P><h4>Migrating Perl Scripts</h4>
<P>Perl scripting engines are currently available in several forms for the Win32 platform.  ActiveState Tool Corporation provides three options for running Perl scripts on Windows NT Server: Scripts can run as CGI executables (Perl for Win32), as DLLs within the IIS process (Perl for ISAPI), or within the ASP environment (PerlScript).  The ASP environment option provides the best performance, but you will need to modify your scripts to run within it. If you want to migrate a script with minimal or no modification, PERL for ISAPI offers best performance.  The advantage of Perl for ISAPI is that a separate process is not generated for every request, as is the case for CGI executables on Windows NT.  For more information, see  <A HREF="howto.htm#topic39">Installing Tools and Utilities</A>.
<P><h4>Port the CGI Application to an ISAPI DLL</h4>
<P>If a CGI application has been written in C or C++, it may be feasible to convert it into an Internet Server API (ISAPI) dynamic link library (DLL).  This would help the application's performance, and would begin to take advantage of some of the IIS application development features.
<P>Usually, ISAPI application DLLs no longer read input from the standard input stream or write to the standard output stream, but communicate through a data structure called the Extension Control Block (ECB). 
<P>IIS typically loads an ISAPI DLL the first time a request that calls the DLL is received; the DLL then stays in memory, ready to receive other requests until the server decides it is no longer needed.  IIS can also load ISAPI DLLs on startup and cache them for future use, thus enhancing performance.
<P>Under IIS 4.0, an ISAPI DLL can be deployed by the developer or system administrator to run within the IIS process or in its own process.
<P>For more details on developing ISAPI applications, see the documentation in the Microsoft Platform Software Developers Kit (SDK).  The Platform SDK can be obtained at <A HREF="http://www.microsoft.com/msdn/sdk/platform.HTM" TARGET="_top">http://www.microsoft.com/msdn/sdk/platform.htm</A> <IMG SRC="../../../sitebuilder/graphics/leave-site.gif" WIDTH="17" HEIGHT="11" BORDER="0" ALT="Non-SBN link">.  Creating ISAPI DLLs also requires a thorough understanding of the Win32 programming environment, including thread management. 
<P><h4>Port the CGI Application to Active Server Pages</h4>
<P>When you port your application to Active Server Pages, you may be able to:
<UL>


<LI> Remove a significant amount of existing CGI code.  The ASP environment provides much of the functionality for managing forms, output, and state.
<LI> Speed up execution, because you avoid the excess overhead of process creation, as well as take advantage of such features as ODBC connection pooling.
<LI> Create a more productive development environment, because you take advantage of the Microsoft Script Debugger and IIS application Management features.

</UL>You can choose the scripting language used within an ASP page.  If the CGI application is written in C or Java, it may be easiest to use JScript because of its syntactical similarity.  If the CGI application you're porting is written in Perl, it may be convenient to use PerlScript.
<P>In any case, consider using VBScript for building ASP pages.  Millions of developers use the Visual Basic language.  Organizations that move to VBScript can take advantage of this synergy and may find they have many resources available to support them.
<P>Script interpreters for JScript and VBScript are included with IIS.  Interpreters for PerlScript and other languages are available from third parties.
<P>
<H3><A NAME="topic53"></A>Migrating to Active Server Pages
</H3>
<P>The first step in planning a migration is to examine the CGI application.  Many developers find they can divide their existing applications into five major types of logic:
<UL>


<LI> Input processing (reading forms, environment variables, and decoding HTML)
<LI> Business Logic
<LI> Database logic for connecting to external services
<LI> Logic for maintaining state between forms
<LI> HTML output logic for returning results to browser clients 

</UL>A general discussion of how to handle each kind of logic follows:
<P><h4>Input Processing</h4>
<P>A great deal of CGI processing revolves around capturing the contents of HTML forms as presented to the standard input stream, then reformatting them, decoding the HTML, reading the environment variables, and so on.  Because this is one of the most tedious aspects of developing CGI applications, many developers have used third-party libraries and tools, such as the Perl utilities Cgi.pm or Cgi-lib.pl.  In most cases, the utilities are unnecessary in ASP applications; the ASP environment takes care of most housekeeping tasks for you.
<P><h4>Accessing Form Input and Decoding HTML</h4>
<P>One major difference between CGI and ASP applications is how form input is handled.  Accessing form data from an ASP page is much simpler than from a CGI application.
<P>A CGI application written in Perl receives form input from a POST request on the standard input stream using code such as :
<P>
<PRE CLASS=clsCode>$form_size = $ENV( 'CONTENT_LENGTH' ) ;
read (  STDIN, $form_data, $form_size  ) ;
</PRE>
<P>Note that this form data is encoded and must be translated. Using Perl, the translation code might look like this:
<P>
<PRE CLASS=clsCode>$value =~ s/%([0-9a-fA-F] {2} ) / pack("c", hex($1) )/ge;
</PRE>
<P>Once the form data is decoded, the developer can search for a form variable.  Here is a typical Perl routine to parse form data and place it in a list:
<P>
<PRE CLASS=clsCode>Sub get_form
{
   local (*FORM) = @_;
   local ($env_string, @collection, $key_value,
      $key, $value ) ;
read (STDIN, $env)string, $ENV{'CONTENT_LENGTH'});
@collection = split( /&amp;/ , $env_string ) ;
foreach $key_value (@collection) {
   ($key, $value) = split( /=/ , $key_value ) ;
   $value =~ tr/+/ / ;
   $value =~ s/%([0-9a-fA-F] {2} ) / pack("c", hex($1) )/ge;

   if (defined($FORM{$key})) {
      $FORM{$key} = join("\0",, $FORM{$key}, $value) ;
   } else {
      $FORM{$key} = $value;
   }
        }
}   
</PRE>
<P>Once the routine is in place, it cannot be called to parse the form.  The following code calls the get_form routine and references a variable called home_address:
<P>
<PRE CLASS=clsCode>   &amp;get_form(*my_form) ;
   print $my_form('home_address') ;
</PRE>
<P>Fortunately the ASP environment takes care of these form processing and decoding chores for you.  In ASP, the content of an HTML form is made available as a <i>collection.  </i>For developers familiar with languages like Perl or Awk, collections are analogous to "hashes" or "associative arrays."  They are named lists of Key/Value pairs.
<P>Form variables are included in the <b>Form </b>collection of the <b>Request </b>object.
<P>Instead of referring to a form variable with a Perl construction like:
<P>
<PRE CLASS=clsCode>   Print $my_form('home_address') ;
</PRE>
<P>You can refer to a form variable as shown in the following VBScript example:
<P>
<PRE CLASS=clsCode>   MyAddress = Request.Form("home_address")
</PRE>
<P>Here is the same instruction written in PerlScript:
<P>
<PRE CLASS=clsCode>   $MyAddress = $Request - &gt; Form('home_address')
</PRE>
<P>Remember that there is no need to parse the input, as was required in the CGI example, because the ASP environment takes care of it.
<P>Although ASP applications do an excellent job of eliminating form processing drudgery, developers sometimes need access to the unprocessed input stream.  The following VBScript fragment writes the unprocessed input stream back into the output stream:
<P>
<PRE CLASS=clsCode>   Response.Write Request.Form
</PRE>
<P>In addition to the <b>Form </b>collection, the <b>Request</b> object includes a collection called <b>QueryString. </b> This collection contains form elements sent in response to the GET method of the HTML &lt;form&gt; tag.  The elements in the <b>QueryString </b>collection are accessed in the same way elements of the <b>Form</b> collection are accessed.
<P>Often, quite a bit of CGI code is devoted to determining whether a given form variable exists within the QUERY_STRING environment variable or in the standard input stream.  However, in the  Active Server Pages environment, you can avoid testing many of these conditions simply by referring to a variable by name:
<P>
<PRE CLASS=clsCode>   MyVariable = Request("home_address")
</PRE>
<P>In this case the Web server will search the QUERY_STRING first, then the form, to find the correct variable.  This feature may eliminate the need to rewrite code to search both the query string and the form.
<P>If an application needs to encode URLs or HTML, you can take advantage of the built-in <b>HTMLEncode </b>and<b> URLEncode </b>methods of the <b>Server </b>object.
<P>In many cases, developers migrating CGI applications find they can remove most of the third part form decoding and processing utilities, as well as any homegrown generic form processing modules.
<P><h4>Environment Variables</h4>
<P>CGI applications that inspect environment variables can continue to do so when converted to ASP.  Environment variables are provided as part of the <b>Request </b>object's <b>ServerVariables </b>collection.
<P>In a CGI application, you might access the SERVER_NAME environment variable with something like the following line of C code:
<P>
<PRE CLASS=clsCode>   servername = getenv( "SERVER_NAME" ) ;
</PRE>
<P>or the following written in Perl:
<P>
<PRE CLASS=clsCode>   servername = $ENV{'SERVER_NAME"} ;
</PRE>
<P>In ASP, you can use the following instruction, written in VBScript:
<P>
<PRE CLASS=clsCode>   servername = Request.ServerVariables("SERVER_NAME")
</PRE>
<P>You can iterate through collections such as <b>ServerVariables</b> to examine all the values they contain.  The following ASP page written in VBScript generates an HTML table containing all the variables contained in the <b>ServerVariables </b>collection and their values:
<P>
<PRE CLASS=clsCode>
&lt;%@ LANGUAGE = VBSCRIPT %&gt;
&lt;HTML&gt;&lt;BODY&gt;
&lt;TABLE BORDER=1&gt;
&lt;% for each name in request.ServerVariables %&gt;
 &lt;TR&gt;
  &lt;TD&gt;&lt;%= request.ServerVariables( name )%&gt;&lt;/TD&gt;
 &lt;/TR&gt;
&lt;% next %&gt;
&lt;/TABLE&gt;
&lt;/BODY&gt;&lt;/HTML&gt;
</PRE>
<P><h4>Business Logic</h4>
<P>Once much of the "plumbing" is removed from a CGI application, some business logic that needs to be ported usually remains.  There are at least two approaches to migrating business logic:
<UL>


<LI> First, the logic can be ported to an Active Server Pages scripting environment.  In other words, logic written in C, C++, Perl, and so on can be rewritten in a scripting language such as VBScript, JScript, or PerlScript. If an ASP scripting engine the language currently used is available, porting may be relatively simple.
<LI> Second, if the business logic is extensive, requires more functionality than is available in a scripting environment, or is very general, the logic can be encapsulated within a component.

</UL>Components can be written in any language that supports the Component Object Model (COM), including C, C++, Java, Visual Basic, Delphi, and even some implementations of COBOL.  
<P>It is important to consider overall application architecture.  Building a successful and scalable distributed application, where application logic can reside on a Web client, a Web server, and on other back-end servers (such as databases) requires a careful separation of the application's functionality into logical groups of services, or "tiers."
<P><h4>Extenal Gateway and Database Logic</h4>
<P>CGI applications were originally created to allow Web clients access to applications outside the Web itself.  Although the majority of existing CGI applications interface with databases of some sort, many CGI applications are used to provide services such as page counters, or to access services such as electronic mail servers.  This section describes techniques for accessing databases and other external services through ASP.
<P><b>Databases</b>
<P>ActiveX Data Objects (ADO) is a highly efficient database access method that can be used in the Active Server Pages environment.  ADO is included with IIS in the Windows NT Server 4.0 Option Pack.
<P>ADO exposes an object model to abstract ideas of connecting to and executing commands against a remote database.  The database need not support Structured Query Language (SQL) commands, but a database-specific piece of software called an OLE DB Provider is required.  If your database vendor supplies an Open Database Connectivity driver for your database, you can use a provider for ODBC data sources supplied with IIS.
<P>Perl developers commonly access a database using a package like DBperl or the more current CBI package.  No special package is required in the ASP environment.  For example, the following simple ASP page written in PerlScript dumps the contents of a table called Orders using the ODBC datasource ADOSamples:
<P>
<PRE CLASS=clsCode>
&lt;%@ LANGUAGE=PerlScript %&gt;
&lt;HTML&gt;
&lt;BODY&gt;&lt;P&gt;

&lt;%
   $Conn = $Server -&gt;CreateObject("ADODB.Connetion") ;
   $Conn -&gt;Open( "ADOSamples" ) ;
   $RS = $Conn -&gt;Execute( "SELECT * FROM Orders" ) ;
%&gt;

&lt;TABLE BORDER =1&gt;
&lt;TR&gt;
&lt;%
   $count = $RS -&gt;Fields-&gt;Count;
   for  ( $i = 0; $i $count; $i++ ) {
      %&gt;&lt;TD&gt;&lt;B&gt;&lt;%= $RS-&gt;Fields($i)-&gt;Name %&gt;&lt;/B&gt;&lt;?TD&gt;&lt;%
   } ; %&gt; &lt;/TR&gt; ,%
   while ( ! $RS-&gt;EOF ) {
      %&gt; &lt;TR&gt; &lt;%
      for ( $i = 0; $i &lt; $count; $i++ ) {
         %&gt;&lt;TD VALIGN=TOP&gt;
         &lt;%= $RS-&gt;Fields($i) -&gt;value %&gt;&lt;/TD&gt;&lt;%
      } ;
      %&gt; &lt;/TR&gt; &lt;%
      $RS-&gt;MoveNext;
   } ;
   $RS-&gt;Close;
   $Conn-&gt;Close;
   %&gt;
&lt;/TABLE&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;
</PRE>
<P>ADO is designed to be highly efficient in a multithreaded environment, where many concurrent instances of the ADO code execute simultaneously.  Thus, ADO is ideal for the Web server environments, particularly when they need to scale up to many concurrent users.
<P>An additional benefit to working in the ASP environment is the ability to take advantage of the services of Microsoft Transaction Server (MTS).  MTS is an integral part of the ASP environment.  MTS not only provides support for process isolation, as discussed above, but also provides a simple way for developers to build scalable Web applications based on components.  MTS takes care of all the plumbing issues, including transactions, connection management, and thread management, thus freeing the developer to concentrate primarily on building business logic.
<P>For more information on ADO, see the  <A HREF="http://www.microsoft.com/ntserver/nts/appservice/exec/overview/Trans_Overview.asp" TARGET="_top">Transaction Server Web site</A> <IMG SRC="../../../sitebuilder/graphics/leave-site.gif" WIDTH="17" HEIGHT="11" BORDER="0" ALT="Non-SBN link">.

<P>More General information on ADO, ODBC, as well as Microsoft's overall data access strategies can be found at <A HREF="http://www.microsoft.com/data/" TARGET="_top">http://www.microsoft.com/data/</A> <IMG SRC="../../../sitebuilder/graphics/leave-site.gif" WIDTH="17" HEIGHT="11" BORDER="0" ALT="Non-SBN link"> or <A HREF="../../../workshop/database/default.htm" TARGET="_top">Data Access & Databases</A>.
<P>The Perl-based DBI package and documentation, including ideas for porting existing DBI code to the Win32 platform, can be found at <A HREF="http://www.hermetica.com/technologia/DBI" TARGET="_top">http://www.hermetica.com/technologia/DBI</A> <IMG SRC="../../../sitebuilder/graphics/leave-ms.gif" WIDTH="33" HEIGHT="11" BORDER="0" ALT="Non-MS link">.
<P>
<H3><A NAME="topic54"></A>Migrating Common CGI Applications to ASP
</H3>
<P><h4>Electronic Mail</h4>
<P>Many CGI applications exist that format RFC-822 e-mail messages for delivery to a mail server, such as Sendmail.  This functionality can be reproduced easily in the ASP environment.
<P>Note that IIS includes an SMTP Service and exposes all of its functionality through Collaboration Data Objects  (CDO) object model.  Once SMTP Service is properly installed and configured, an e-mail message can be scripted as simply as shown in the following ASP script, written in JScript:
<P>
<PRE CLASS=clsCode>
&lt;% @language=Jscript %&gt;

&lt;%
 var msg
 msg = Server.Create.Object("CDONTS.NewMail");
 msg.From = "someone@microsoft.com";
 msg.To = "someone@microsoft.com";
 msg.Subject = "Test message";
 msg.Body = "This is a sample message.";
 msg.Send():
%&gt;
</PRE>
<P><h4>The File System</h4>
<P>Many CGI applications need to interact with the file system.  There are several approaches to accessing the file system from within the ASP environment.
<P>The easiest method is to use the <b>FileSystemObject </b>and <b>TextStream </b>objects.  These objects provide high-level access to the file system.  For example, the following ASP page, written in VBScript, creates a text file, and writes the contents of the environment variable SERVER_NAME to its own line:
<P>
<PRE CLASS=clsCode>
&lt;% @language=VBScript %&gt;
&lt;HTML&gt;
&lt;BODY&gt;

&lt;%
 dim ojFS, objFile, append

 append = 8
 set objFS = Server.CreateObject("Scripting.FileSystemObject")
 set objFile = objFS.OpenTextFile("c:\servlist.txt", append, True )
 objFile.WriteLine Request.ServerVariables("SERVER_name")
 objFile.Close
%&gt;
Done
&lt;/BODY&gt;
&lt;/HTML&gt;
</PRE>
<P>If the supplied <b>FileSytemObject</b> and <b>TextStream</b> objects do not meet your needs, file system access can be encapsulated with an ActiveX component.
<P><h4>Maintaining State</h4>
<P>There are several schemes commonly used in CGI applications for maintaining state information about the client session on the Web Server.  Some of these involve scripts that save and restore data from the server-side text files.  Some involve embedding state in client-side HTML (for example, in hidden form fields).  Some CGI applications even maintain state by setting themselves up as "mini Web servers" for the duration of the session, intercepting incoming HTTP requests.
<P>Many Web developers have moved to using browser-based cookies for storing state information.
<P>Active Server Pages provides built-in state management using session variables.  When a client first connects to the application, a "session cookie" can be sent that identifies the new session.  As the browser accesses other pages in the application, the cookie is retrieved by the system and is used to manage state.
<P>All of this is transparent to the Web developer.  The developer has access to the <b>Session </b>collection variables.  For example, consider an ASP page in which the user's logon name is retrieved and assigned to a session variable:
<P>
<PRE CLASS=clsCode>
   Session("login_name") = Request.Form("login_name")
</PRE>
<P>The value of <i>login_name</i> will be available to all other pages within the application, until the session times out (the default is 20 minutes, but is configurable) or is explicitly abandoned.
<P><h4>Output Handling</h4>
<P>A key difference between ASP applications and CGI applications is that in an ASP Page, the developer can weave industry-standard HTML with scripting code to deliver appropriate HTML to the client.
<P>Many CGI applications create HTML by using the output facilities of the language in which they're written.  For example, a simple Perl-based CGI application might look like this:
<P>
<PRE CLASS=clsCode>
#!/usr/local/bin/perl

print "Content-type: trext/html", "\n\n";
$server_name = $ENV('Server_Name') ;
print "&lt;HTML&gt;&lt;BODY&gt;Your Server Name is ", $server_name;
print "&lt;/BODY&gt;&lt;/HTML&gt;" ;

exit(0) ;
</PRE>
<P>Note that the HTML is embedded within the print function.  Here is the corresponding ASP page, with code written in VBScript:
<P>
<PRE CLASS=clsCode>
&lt;HTML&gt;
&lt;BODY&gt;
Your server name is &lt;%= Request.ServerVariables("Server_Name") %&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;
</PRE>
<P>Note that the entire page is just simple HTML, except for this construct, which is a VBScript expression:
<P>
<PRE CLASS=clsCode>
&lt;%= Request.ServerVariables("Server_Name") %&gt;

</PRE>
<P>Some applications need to specify HTTP header information rather than using the default MIME type of text/html.  In  the ASP environment, this can be accomplished by using the <b>ContentType </b>property of the Response object.  For example, the following instruction sets the content type to text/plain:
<P>
<PRE CLASS=clsCode>
&lt;% Response.ContentType = "text/plain" %&gt;

</PRE>
<P>Many Perl-based CGI applications use the freely available Cgi.pm or Cgi-lib.pl modules.  These tools assist the CGI developer tremendously in formatting HTML output, as well as performing other tasks.
<P>For example, the following script uses Cgi.pm to generate a form that collects the user's address; once the form is submitted, the script redisplays the form with the address beneath it:
<P>
<PRE CLASS=clsCode>
use CGI qw( :all) ;

print header;
print start_html ('Enter your address'),
   h1('Enter your address'),
   hr,
   p,
   start_form.
   Table(
      Tr(td("Street"), td(textfield('street'))),
      Tr(td("City"), td(textfiled('city'))),
      Tr(td("State"), td(textfield('state'))),
      Tr(td("Zip"), td(textfield('zip')))
   ),
   submit,
end_form
hr;

if  (param())
{

      print
         "Street is: ", param('street'), p,
         "City is: ", param('city'), p,
         "State is: ", param('state'), p,
         "Zip is: ", param('zip'), p,
         hr;

}
</PRE>
<P>This script provides a convenient way to lay out a form if you aren't able to generate the HTML as part of the source code.  The drawback to these sorts of utilities is that they require the developer to master a "psuedo-HTML" dialect to generate the page.
<P>The corresponding ASP page (with script written in VBScript) looks almost exactly like the actual HTML page that will be sent to the browser:
<P>
<PRE CLASS=clsCode>
&lt;HTML&gt;
&lt;HEAD&gt;&lt;TITLE&gt; Enter your address&lt;/TITLE&gt;&lt;/HEAD&gt;
&lt;BODY&gt;
&lt;H1&gt;Enter Your Address &lt;/H1&gt;
&lt;HR&gt;
&lt;P&gt;
&lt;FORM METHOD=POST&gt;
&lt;TABLE&gt;
   &lt;TR&gt;&lt;TD&gt;Street&lt;/TD&gt;&lt;TD&lt;input name="street"&gt;&lt;/TD&gt;&lt;/TR&gt;
   &lt;TR&gt;&lt;TD&gt;City&lt;/TD&gt;&lt;TD&lt;input name="city"&gt;&lt;/TD&gt;&lt;/TR&gt;
   &lt;TR&gt;&lt;TD&gt;State&lt;/TD&gt;&lt;TD&lt;input name="state"&gt;&lt;/TD&gt;&lt;/TR&gt;
   &lt;TR&gt;&lt;TD&gt;Zip&lt;/TD&gt;&lt;TD&lt;input name="zip"&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;/TABLE&gt;
&lt;INPUT TYPE=SUBMIT&gt;
&lt;/FORM&gt;
&lt;HR&gt;

&lt;% if Request.Form.Count &gt; 0 %&gt;
Street is:  &lt;%= Request.Form("street") %&gt; &lt;p&gt;
City is:  &lt;%= Request.Form("city") %&gt; &lt;p&gt;
State is:  &lt;%= Request.Form("state") %&gt; &lt;p&gt;
Zip is:  &lt;%= Request.Form("zip") %&gt; &lt;p&gt;
&lt;HR&gt;

&lt;% end if %&gt;

&lt;/BODY&gt;
&lt;/HTML&gt;

</PRE>
<P>The freedom to use authentic HTML as a part of the application code is a benefit that cannot be overemphasized.  This feature enables the developer to send any HTML that the client browser supports, whereas utilities like Cgi.pm are necessarily limited to tags they have chosen to implement.  As new developments such as Dynamic HTML come along, tools like Cgi.pm have to be modified, perhaps heavily, to support new tags or other new client-side features.
<P>In addition, Web designers and staff other than programmers can author in pure HTML.  Using a special HTML dialect prevents these users from modifying the generated HTML.
<P> <A HREF="howto.htm#top" CLASS="clsBackTop"><IMG SRC="../../../workshop/graphics/top.gif"  WIDTH="18" HEIGHT="8" BORDER="0" ALT="Top">Back to top</A>
<P>
<H2><A NAME="migtools"></A>Tools For Application Migration 
</H2>
One of the greatest benefits available to those developing for the Windows Platform is the wealth of available development tools.  These tools are developed both by Microsoft and third-party software vendors, and offer a range of features for a variety of developer needs and skill sets.  By taking advantage of the available tools for ASP development, combined with the abundance of reusable server components, you will decrease development time for writing Web applications.  The following tools are recommended for developers building Web sites and Web applications for the Microsoft Platform:
<P>
<H3><A NAME="topic55"></A>ASP Development Tools
</H3>
<P><b>Visual InterDev.</b> Microsoft Visual InterDev is a powerful development environment for rapidly building database-driven Web applications.  Visual InterDev gives developers the opportunity to explore key new features and design, build, debug, and deploy cross-platform HTML and script-based Web applications faster than ever before. 
<P><b>Features</b>
<UL>


<LI> <b>WYSIWYG Page Editor.</b> The new Visual InterDev editor has a Design view that lets you edit and create content in a WYSIWYG workspace. In addition to Design view, you can write script in Source view and preview your file in QuickView. The views are integrated, so you'll be able to switch between WYSIWYG and Source view while maintaining the integrity and formatting of your source code. 

<LI> <b>Debugging Tools.</b> Visual InterDev 6.0 includes a powerful debugger that helps you test and debug script and Java-based components. Debugging is available for client-side as well as server-side code, and you can even step from code on the client to code on the server and back again. Plus, you can debug server-side code from a remote PC. 
<LI> <b>Site Designer.</b> To quickly prototype, build, and maintain large, visually consistent Web sites, use the graphical Site Designer. In the Site Designer, you can create pages and links, design themes and navigation hierarchy, and more -- all with an easy-to-use drag-and-drop design surface. 
<LI> <b>Data Environment.</b> Creating and modifying data-related objects is centralized in the graphical Data Environment. In the Data Environment, you can drag and drop objects onto ASP pages to automatically create data-bound Web pages. And, the Data Environment provides improved support for Oracle databases. 
<LI> <b>Data-Bound Design-Time Controls.</b> Design-time Controls offer you a richer, more visual editing interface for creating data-driven pages. The controls included with Visual InterDev 6.0 enable you to target a wide range of browsers, or to focus on the rich Dynamic HTML available in Microsoft Internet Explorer 4.0. 
<LI> <b>Cascading Style Sheets Editor.</b> Cascading Style Sheets (CSS) help you design and enforce standard styles throughout your site. You can edit style sheets easily in the CSS Editor. You can create or modify style sheets for a set of Web pages, and preview how your pages -- or any page on the Web -- would look with the current style sheet applied. 
<LI> <b>IntelliSense Statement Completion.</b> IntelliSense&#174; helps you create error-free script statements by presenting you with the names of methods and properties as soon as you've typed in the name of an object, and by prompting you for parameters as needed. IntelliSense makes it easier to learn VBScript or JScript, and frequently alleviates the need to refer to a reference manual as you code. 
<LI> <b>Dynamic HTML.</b> Visual InterDev supports Dynamic HTML (DHTML) in Microsoft Internet Explorer 4.0. The Visual InterDev editor helps you create script for DHTML objects and events by providing statement completion options and displaying the document object model hierarchy in Source view. Besides scripting directly to the Internet Explorer 4.0 object model, you can choose to have your Design-time Controls create client-side data binding script in order to balance processing between browser and server and reduce network traffic. For more information,  see <A HREF="http://www.microsoft.com/vinterdev/" TARGET="_top">http://www.microsoft.com/vinterdev</A> <IMG SRC="../../../sitebuilder/graphics/leave-site.gif" WIDTH="17" HEIGHT="11" BORDER="0" ALT="Non-SBN link">.

</UL><b>Elemental Drumbeat 2.0. </b> Drumbeat 2.0 is the fastest way to build Active Server Pages -- without programming, and deploy them across browsers -- without tedious manual adjustments. Generate database-driven pages in minutes. Point and click to add forms validation, record navigation, and media player controls. Take advantage of the latest Microsoft technology, including DHTML and IE 4.0 multimedia effects, data binding, ActiveX, scriptlets, IIS/ASP, COM objects, and Netshow. For more information, see  <A HREF="http://www.drumbeat.com/" TARGET="_top">http://www.drumbeat.com</A> <IMG SRC="../../../sitebuilder/graphics/leave-ms.gif" WIDTH="33" HEIGHT="11" BORDER="0" ALT="Non-MS link">.
<P><b>Chili!ASP.  </b>Chili!ASP is a Web application server that enables developers of all levels to easily build and deploy powerful, high performance, interactive Web server applications. Developers can combine HTML, server-side scripting, and components to create and run Web-based business applications using Active Server technology. Chili!ASP is a functional equivalent of Microsoft's Active Server Pages (ASP) Web application platform, which runs exclusively on Microsoft's Internet Information Server. Chili!ASP utilizes the same development tools and provides ASP functionality to Netscape, Lotus, IBM, and other Web servers. For more information, see <A HREF="http://www.chilisoft.com/" TARGET="_top">http://www.chilisoft.com/</A> <IMG SRC="../../../sitebuilder/graphics/leave-ms.gif" WIDTH="33" HEIGHT="11" BORDER="0" ALT="Non-MS link">.
<P>
<H3><A NAME="topic56"></A>ActiveX Component Development
</H3>
<P><b>Visual Basic Control Creation Edition. </b>ActiveX controls represent the most widely used, versatile component format available for the Windows platform. With the Control Creation Edition, you'll quickly invent new controls, customize (subclassing) existing controls, or assemble multiple controls in creative new ways. Ideally suited for Internet transmission, the small and fast ActiveX controls produced by the Visual Basic Control Creation Edition are based on the new ActiveX Control Framework. For more information, see <A HREF="http://www.microsoft.com/vbasic/prodinfo/cce/" TARGET="_top">http://www.microsoft.com/vbasic/prodinfo/cce/</A> <IMG SRC="../../../sitebuilder/graphics/leave-site.gif" WIDTH="17" HEIGHT="11" BORDER="0" ALT="Non-SBN link">.
<P><b>Visual C++.  </b>The Microsoft Visual C++ development system family consists of several product members. The Microsoft Visual C++ development system, Learning Edition (formerly called the Standard Edition) targets developers learning the C++ language. The Microsoft Visual C++ Professional Edition targets professional software developers who need features, such as code optimization and statically linked libraries, that are not found in the Learning Edition. The Microsoft Visual C++ Enterprise Edition development system, the newest member of the Visual C++ family, was developed specifically to meet the needs of corporate developers. For more information on Microsoft Visual C++, see <A HREF="http://www.microsoft.com/visualc/" TARGET="_top">http://www.microsoft.com/visualc/</a> <IMG SRC="../../../sitebuilder/graphics/leave-site.gif" WIDTH="17" HEIGHT="11" BORDER="0" ALT="Non-SBN link">.
<P><b>Visual J++.  </b>Microsoft Visual J++ 6.0 Technology Preview 2 is the fastest way to harness the productivity of Java and the power of Windows to build and deploy high-performance, data-driven client/server solutions. Two-way visual design tools combined with the Windows Foundation Classes (WFC), advanced cross-language and remote debugging capabilities, scalable data access, and one-button application deployment simplify the development of feature-rich Windows and Web applications, components, and middle-tier business objects. For more information on Microsoft Visual J++ , see <A HREF="http://www.microsoft.com/visualj/" TARGET="_top">http://www.microsoft.com/visualj</a> <IMG SRC="../../../sitebuilder/graphics/leave-site.gif" WIDTH="17" HEIGHT="11" BORDER="0" ALT="Non-SBN link">.

<P> <A HREF="howto.htm#top" CLASS="clsBackTop"><IMG SRC="../../../workshop/graphics/top.gif"  WIDTH="18" HEIGHT="8" BORDER="0" ALT="Top">Back to top</A>
<P>
<H2><A NAME="testing"></A>Testing and Troubleshooting 
</H2>
Testing and troubleshooting is the final stage of migrating a Web server from UNIX to Windows NT Server.  A thorough testing plan with a generous schedule will ensure a smooth transition to the Web.  Testing and troubleshooting should be broken down into four stages:
<UL>


<LI> Unit testing
<LI> Integration testing
<LI> Application testing

<LI> Pilot testing

</UL>Be sure to complete each stage of your test plan before moving on to the next stage.  
<P>
<H3><A NAME="topic57"></A>Unit Testing
</H3>
<P>Unit testing, the first test phase, is conducted in a lab environment. Unit testing involves testing each server alone, outside the context of the network and other servers and operating systems with which it may coexist. If your migration involves multiple servers, you should migrate, test, and tune one server initially and ensure that it performs properly before proceeding to the others. This learning process will help you improve your approach for migrating subsequent servers. The following are some examples of what you may want to include in your testing:
<UL>


<LI> Run as http://localhost and ensure all HTML files, images, and other media properly migrated to the new Windows NT Server
<LI> Test for broken or incorrect links
<LI> Test proper operation of application logic
<LI> Test for corrupt HTML resulting in improper formatting

</UL>
<H3><A NAME="topic58"></A>Integration Testing
</H3>
<P>Once the server has passed unit testing, you're ready to evaluate it as a member of your network or server group during integration testing. The following provides some examples of tests and performance criteria you may want to include:
<UL>


<LI> Test for proper identification on the network
<LI> Test security and access permissions
<LI> Test for capacity and stress testing.  Microsoft offers several capacity planning tools for IIS including WCAT.  For more information on IIS capacity planning, see the  <A HREF="../../../workshop/server/toolbox/wcat.htm#download.">WCATCat information and download</A>.
</UL>For more information on capacity planning in IIS, see the Internet Information Server Resource Kit from Microsoft Press (linked to from our  <A HREF="howto.htm#resources">Resources</A> section.
<P>
<H3><A NAME="topic59"></A>Application Testing
</H3>
<P>Prior to deployment on a production server, each application you migrate or port to IIS should be tested on a staging server running Windows NT Server 4.0 and IIS 4.0. It's best to begin this process well in advance of your final deadline for completion. As you know, Web applications can present unexpected problems.   The following provides some examples of tests and performance criteria you may want to include:
<UL>


<LI> Proper application execution and output
<LI> Application scalability and stress testing
<LI> CPU and memory usage under high loads
<LI> Overall performance impact on the server

</UL>
<H3><A NAME="topic60"></A>Pilot Testing
</H3>
<P>Pilot testing involves a group of users who use the system prior to its full deployment, to provide feedback on IIS features and functions. During an initial, pre-pilot phase, select a small group of users who have some technical savvy to try out the technology. You might not want to provide support during this phase because it can draw resources away from system development and affect your schedule. After making adjustments based on the input from pre-pilot users you can begin the actual pilot. For this phase, a larger group of users should review and fully use the system features. These users should be at about the same technical level as your system users in general. During this phase, you should plan to provide support for all issues, errors, or problems reported by users. The support team can then report the issues to the design team if they require that architectural changes be made. When corrections are made to the system, they should be completely re-tested.
<P>Be sure to include the following in your pilot planning:
<UL>


<LI> Adequate training for participants
<LI> A roll-out plan for staging the configurations and preparing systems for the pilot
<LI> Documentation of the installation process so improvements can be added as more is learned
<LI> A mechanism for users to provide constant feedback to the design and testing teams
<LI> Evaluation criteria for the pilot, including information about the number of users who were dissatisfied, number of problems reported, number of support calls and requests, and the resolution rate for problems

</UL>
<P> <A HREF="howto.htm#top" CLASS="clsBackTop"><IMG SRC="../../../workshop/graphics/top.gif"  WIDTH="18" HEIGHT="8" BORDER="0" ALT="Top">Back to top</A>
<P>
<H2><A NAME="deployment"></A>Deployment 
</H2>
Deployment is the final step in the migration of a Web server from UNIX to Windows NT Server.  If you have properly planned and tested the migration process it will be a smooth transition to take the new server live on the Internet.  Deployment should be broken down in several stages: planning, live deployment on the Internet, and monitoring post-deployment performance and user satisfaction.  Completing each of these stages in sequence will reduce downtime and potential performance issues.  
<P>
<H3><A NAME="topic61"></A>Deployment Planning
</H3>
<P>When preparing to deploy your new Windows NT Server based Web servers, allow yourself ample time and resources should an unexpected problem arise.  The approach you take to deploying the new server(s) is dependent on your individual needs and the acceptable amount of server unavailability.  Here are some factors to consider in planning your deployment:
<UL>


<LI> Plan your deployment around your peak traffic.  If your Web site is busiest during working hours, it is best to wait until the evening hours to make the switch. 
<LI> Announce the possibility of server downtime to your users in advance so that they do not visit your site and find it surprisingly unavailable.
<LI> Back-up your source server and keep it available for re-deployment in case of unforeseen issues.
<LI> Determine a strategy to take the server live to the network that accommodates the amount of acceptable downtime.

</UL>
<H3><A NAME="topic62"></A>Taking the New Windows NT Server Live on the Network
</H3>
<P>There are several technical approaches to taking the previous server out of service and bringing the new server up on your network to begin hosting.  The method you choose should be based on your network policies, amount of acceptable downtime, and your technical knowledge.  Here are two possible methods:
<UL>


<LI> <b>Some downtime acceptable. </b>Simply power down the old UNIX server and simultaneously boot up the Windows NT Server(s) with the old UNIX server's IP Address and network settings.  You might experience several minutes of server downtime, but if the switch happens during off-peak hours and is announced to users several days in advance, there should be no issues.
<b>
<LI></b><b>No downtime acceptable. </b>Assign the new Windows NT Server a new IP address.  Turn down the TTLs in the DNS records to allow them to expire in a 24-hour period.  Set up round-robin DNS so that requests go to both boxes in a sequential order.  Wait for the DNS to propagate.  After the first propagation turn off round-robin on the old box and wait for propagation again.  After you are sure the single new IP has been propagated, you can turn the old box off.  This leaves no downtime.  However, be careful if you are using tracking or dynamic capabilities on your site, because problems could occur.
</UL>
<H3><A NAME="topic63"></A>Monitoring Post-Deployment Performance
</H3>
<P>Monitoring performance continuously is essential for good server performance, and acts as an early warning system for application problems and capacity overload issues.  It is especially crucial to monitor your new server's performance the first few days after deployment to ensure that users are not encountering problems when visiting your site, and to further tune the server's performance.  Use the Windows NT Server Performance Monitor to keep record of your server performance. Massive degradations in performance often point to a serious problem.  The following are some suggested performance monitor settings to watch:
<UL>


<LI> Processor
<LI> Memory

<LI> Disk

<LI> Network
<LI> IIS

</UL>For more information on IIS performance monitoring and tuning, see the Internet Information Server Resource Kit (linked to from our  <A HREF="howto.htm#resources">Resources</A> section) and  <A HREF="../../../workshop/server/feature/serveroptms.htm" TARGET="_top">Performance on Microsoft's Web Site</A>. 
<P>
<H3><A NAME="topic64"></A>Monitoring User Satisfaction
</H3>
<P>As part of the post-deployment process, monitor incoming feedback from users and administrators regarding the quality of the server's performance.  If additional details are desired, set up an online, or send a targeted satisfaction survey to selected users.  This feedback combined with the Performance Monitor data is extremely valuable in providing information as to the health of your Web server, and can identify problems early enough for you to implement a plan in advance.
<P> <A HREF="howto.htm#top" CLASS="clsBackTop"><IMG SRC="../../../workshop/graphics/top.gif"  WIDTH="18" HEIGHT="8" BORDER="0" ALT="Top">Back to top</A>
<P>
<H2><A NAME="resources"></A>UNIX to Windows NT Server Migration Resources 
</H2>

<H3><A NAME="topic65"></A>Books
</H3>
<P>Microsoft Internet Information Server Resource Kit
<BR><i>Microsoft Corporation</i>; Softcover; 587 Pages 
<BR>Published by Microsoft Press Inc.; 02/1998; ISBN: 1572316381 
<BR>Buy it here:  <A HREF="http://www1.clbooks.com/asp/BookInfo/BookInfo.asp?theisbn=1572316381" TARGET="_top">http://www1.clbooks.com/asp/BookInfo/BookInfo.asp?theisbn=1572316381</A> <IMG SRC="../../../sitebuilder/graphics/leave-ms.gif" WIDTH="33" HEIGHT="11" BORDER="0" ALT="Non-MS link">
<P>Mastering Microsoft Internet Information Server 4, Second Edition
<BR><i>Dyson, Peter</i>; Softcover; 909 Pages 
<BR>Published by Sybex; 11/1997; ISBN: 0782120806 
<BR>Buy it here: <A HREF="http://www1.clbooks.com/asp/BookInfo/BookInfo.asp?theisbn=0782120806" TARGET="_top">http://www1.clbooks.com/asp/BookInfo/BookInfo.asp?theisbn=0782120806</A> <IMG SRC="../../../sitebuilder/graphics/leave-ms.gif" WIDTH="33" HEIGHT="11" BORDER="0" ALT="Non-MS link">
<P>Programming Active Server Pages
<BR><i>Hillier, Scot</i><i>/</i><i>Mezick, Daniel</i>; Softcover; 301 Pages 
<BR>Published by Microsoft Press; 12/1997; ISBN: 1572317000 
<BR>Buy it here: <A HREF="http://www1.clbooks.com/asp/BookInfo/BookInfo.asp?theisbn=1572317000" TARGET="_top">http://www1.clbooks.com/asp/BookInfo/BookInfo.asp?theisbn=1572317000</A> <IMG SRC="../../../sitebuilder/graphics/leave-ms.gif" WIDTH="33" HEIGHT="11" BORDER="0" ALT="Non-MS link">
<P>Professional Active Server Pages 2.0
<BR><i>Francis, Brian</i><i>/</i><i>Fedorov, Alex</i><i>/</i><i>Smith, Rob</i>; Softcover; 1000 Pages 
<BR>Published by Wrox Press; 03/1998; ISBN: 1861001266 
<BR>Buy it here: <A HREF="http://www1.clbooks.com/asp/BookInfo/BookInfo.asp?theisbn=1861001266" TARGET="_top">http://www1.clbooks.com/asp/BookInfo/BookInfo.asp?theisbn=1861001266</A> <IMG SRC="../../../sitebuilder/graphics/leave-ms.gif" WIDTH="33" HEIGHT="11" BORDER="0" ALT="Non-MS link">
<P>Migrating to Windows NT Server
<BR><i>Heath, Steve</i>; Softcover; 350 Pages 
<BR>Published by Digital Press; 08/1997; ISBN: 1555581854 
<BR>Buy it here: <A HREF="http://www1.clbooks.com/asp/BookInfo/BookInfo.asp?theisbn=1555581854" TARGET="_top">http://www1.clbooks.com/asp/BookInfo/BookInfo.asp?theisbn=1555581854</A> <IMG SRC="../../../sitebuilder/graphics/leave-ms.gif" WIDTH="33" HEIGHT="11" BORDER="0" ALT="Non-MS link">
<P>Windows NT Server and UNIX Integration Guide
<BR><i>Gunter, Burnett R.</i>; Softcover; 
<BR>Published by Osborne; 09/1997; ISBN: 0078823951 
<BR>Buy it here: <A HREF="http://www1.clbooks.com/asp/BookInfo/BookInfo.asp?theisbn=0078823951" TARGET="_top">http://www1.clbooks.com/asp/BookInfo/BookInfo.asp?theisbn=0078823951</A> <IMG SRC="../../../sitebuilder/graphics/leave-ms.gif" WIDTH="33" HEIGHT="11" BORDER="0" ALT="Non-MS link">
<P>Mastering Windows NT Server 4.0, Fifth Edition
<BR><i>Minasi, Mark</i><i>/</i><i>Dyson, Peter</i>; Hardcover; 1664 Pages 
<BR>Published by Sybex Inc.; 09/1997; ISBN: 0782121632 
<BR>Buy it here: <A HREF="http://www1.clbooks.com/asp/BookInfo/BookInfo.asp?theisbn=0782121632" TARGET="_top">http://www1.clbooks.com/asp/BookInfo/BookInfo.asp?theisbn=0782121632</A> <IMG SRC="../../../sitebuilder/graphics/leave-ms.gif" WIDTH="33" HEIGHT="11" BORDER="0" ALT="Non-MS link">
<P>Essential Windows NT Server System Administration, First Edition
<BR><i>Frisch, A. Eileen</i>; Softcover; 350 Pages 
<BR>Published by Reilly &amp; Associates; 01/1998; ISBN: 1565922743 
<BR>Buy it here: <A HREF="http://www1.clbooks.com/asp/BookInfo/BookInfo.asp?theisbn=1565922743" TARGET="_top">http://www1.clbooks.com/asp/BookInfo/BookInfo.asp?theisbn=1565922743</A> <IMG SRC="../../../sitebuilder/graphics/leave-ms.gif" WIDTH="33" HEIGHT="11" BORDER="0" ALT="Non-MS link">
<P>Microsoft Windows NT Server 4.0 Resource Kit
<BR><i>Microsoft Press</i>; Softcover;
<BR>Published by Microsoft Press; 11/1996; ISBN: 1572313447 
<BR>Buy it here: <A HREF="http://www1.clbooks.com/asp/BookInfo/BookInfo.asp?theisbn=1572313447" TARGET="_top">http://www1.clbooks.com/asp/BookInfo/BookInfo.asp?theisbn=1572313447</A> <IMG SRC="../../../sitebuilder/graphics/leave-ms.gif" WIDTH="33" HEIGHT="11" BORDER="0" ALT="Non-MS link">
<P>
<H3><A NAME="topic66"></A>Training
</H3>
<P>Microsoft Internet Information Server Training Kit
<BR><i>Microsoft Corporation</i>; Boxed set; 659 Pages 
<BR>Published by Microsoft Press; 03/1998; ISBN: 1572317310 
<BR>Buy it here: <A HREF="http://www1.clbooks.com/asp/BookInfo/BookInfo.asp?theisbn=1572317310" TARGET="_top">http://www1.clbooks.com/asp/BookInfo/BookInfo.asp?theisbn=1572317310</A> <IMG SRC="../../../sitebuilder/graphics/leave-ms.gif" WIDTH="33" HEIGHT="11" BORDER="0" ALT="Non-MS link">
<P>Microsoft Certified Professional + Internet Training Kit
<BR><i>Microsoft Press</i>; Softcover; 2170 Pages 
<BR>Published by Microsoft Press; 07/1998; ISBN: 1572319062 
<BR>Buy it here: <A HREF="http://www1.clbooks.com/asp/BookInfo/BookInfo.asp?theisbn=1572319062" TARGET="_top">http://www1.clbooks.com/asp/BookInfo/BookInfo.asp?theisbn=1572319062</A> <IMG SRC="../../../sitebuilder/graphics/leave-ms.gif" WIDTH="33" HEIGHT="11" BORDER="0" ALT="Non-MS link">
<P>Microsoft TCP/IP on Windows NT Server 4.0 : DNS Server 
<BR><i>CBT Systems</i>; Interactive Training; 
<BR>Published by CBT Systems; 03/1998; ISBN: it10215124 
<BR>Buy it here: <A HREF="http://www1.clbooks.com/asp/BookInfo/BookInfo.asp?theisbn=it10215124" TARGET="_top">http://www1.clbooks.com/asp/BookInfo/BookInfo.asp?theisbn=it10215124</A> <IMG SRC="../../../sitebuilder/graphics/leave-ms.gif" WIDTH="33" HEIGHT="11" BORDER="0" ALT="Non-MS link">
<P>Essentials of Windows NT Server 
<BR><i>CBT Systems</i>; Interactive Training; 
<BR>Published by CBT Systems; 06/1997; ISBN: it10214667
<BR>Buy it here: <A HREF="http://www1.clbooks.com/asp/BookInfo/BookInfo.asp?theisbn=it10214667" TARGET="_top">http://www1.clbooks.com/asp/BookInfo/BookInfo.asp?theisbn=it10214667</A> <IMG SRC="../../../sitebuilder/graphics/leave-ms.gif" WIDTH="33" HEIGHT="11" BORDER="0" ALT="Non-MS link">
<P>Microsoft Internet Information Server Training Kit
<BR><i>Microsoft Corporation</i>; Boxed set; 659 Pages 
<BR>Published by Microsoft Press; 03/1998; ISBN: 1572317310 
<BR>Buy it here: <A HREF="http://www1.clbooks.com/asp/BookInfo/BookInfo.asp?theisbn=1572317310" TARGET="_top">http://www1.clbooks.com/asp/BookInfo/BookInfo.asp?theisbn=1572317310</A> <IMG SRC="../../../sitebuilder/graphics/leave-ms.gif" WIDTH="33" HEIGHT="11" BORDER="0" ALT="Non-MS link">
<P>
<H3><A NAME="topic67"></A>Web Sites
</H3>
<P>Online Migration Lab Bookstore
<BR> <A HREF="http://www.clbooks.com/partners/sbn/MIZ/" TARGET="_top">http://www.clbooks.com/partners/sbn/MIZ</A> <IMG SRC="../../../sitebuilder/graphics/leave-ms.gif" WIDTH="33" HEIGHT="11" BORDER="0" ALT="Non-MS link">
<P>Microsoft Site Builder Network Server Workshop: a comprehensive resource for technical and developer information on IIS/ASP
<BR><A HREF="../../../workshop/server/default.htm">http://www.microsoft.com/workshop/server/default.asp</A>
<P>Microsoft Internet Information Server Web site
<BR> <A HREF="http://www.microsoft.com/ntserver/nts/web/default.asp" TARGET="_top">http://www.microsoft.com/ntserver/nts/web/default.asp</A> <IMG SRC="../../../sitebuilder/graphics/leave-site.gif" WIDTH="17" HEIGHT="11" BORDER="0" ALT="Non-SBN link">
<P>Microsoft Web Services White Papers for Windows NT 4.0
<BR><A HREF="http://www.microsoft.com/ntserver/nts/techdetails/default.asp" TARGET="_top">http://www.microsoft.com/ntserver/nts/techdetails/default.asp</A> <IMG SRC="../../../sitebuilder/graphics/leave-site.gif" WIDTH="17" HEIGHT="11" BORDER="0" ALT="Non-SBN link">
<P>Microsoft Web Services Technical Papers for Windows NT Server 5.0
<BR> <A HREF="http://www.microsoft.com/ntserver/windowsnt5/techdetails/default.asp" TARGET="_top">http://www.microsoft.com/ntserver/windowsnt5/techdetails/default.asp</A> <IMG SRC="../../../sitebuilder/graphics/leave-site.gif" WIDTH="17" HEIGHT="11" BORDER="0" ALT="Non-SBN link">
<P>Windows NT Server Online Seminars
<BR><A HREF="http://www.microsoft.com/ntserver/nts/deployment/training/mr-semionline.asp" TARGET="_top">http://www.microsoft.com/ntserver/nts/deployment/training/mr-semionline.asp</A> <IMG SRC="../../../sitebuilder/graphics/leave-site.gif" WIDTH="17" HEIGHT="11" BORDER="0" ALT="Non-SBN link">
<P>Microsoft Windows NT Server Application Services
<BR><A HREF="http://www.microsoft.com/ntserver/nts/appservice/default.asp" TARGET="_top">http://www.microsoft.com/ntserver/nts/appservice/default.asp</A> <IMG SRC="../../../sitebuilder/graphics/leave-site.gif" WIDTH="17" HEIGHT="11" BORDER="0" ALT="Non-SBN link">
<P>Microsoft Windows NT Server Interoperability Site
<BR><A HREF="http://www.microsoft.com/ntserver/nts/techdetails/overview/NTS40interop.asp" TARGET="_top">http://www.microsoft.com/ntserver/nts/techdetails/overview/NTS40interop.asp</A> <IMG SRC="../../../sitebuilder/graphics/leave-site.gif" WIDTH="17" HEIGHT="11" BORDER="0" ALT="Non-SBN link">
<P>Windows NT Server and Solaris: A Web Server Comparison
<BR><A HREF="http://www.mindcraft.com/whitepapers/nt4sol26exec.html" TARGET="_top">http://www.mindcraft.com/whitepapers/nt4sol26exec.html</A> <IMG SRC="../../../sitebuilder/graphics/leave-ms.gif" WIDTH="33" HEIGHT="11" BORDER="0" ALT="Non-MS link">
<P>Microsoft Windows NT Solutions and Demos site: Contains a great list of companies that are using Windows NT Server and IIS to host their sites
<P><A HREF="http://www.microsoft.com/windows/solutions/default.asp?HighlightedItem=solutions+%26+demos&OpenMenu=soldemo&CustArea=bus&Site=nts&Product=Internet+Information+Server&Category=&x=20&y=11" TARGET="_top">http://www.microsoft.com/windows/solutions/default.asp</A> <IMG SRC="../../../sitebuilder/graphics/leave-site.gif" WIDTH="17" HEIGHT="11" BORDER="0" ALT="Non-SBN link">
<P>15 seconds: A great resource for all IIS administrators and developers
<BR><A HREF="http://www.15seconds.com/" TARGET="_top">http://www.15seconds.com</A> <IMG SRC="../../../sitebuilder/graphics/leave-ms.gif" WIDTH="33" HEIGHT="11" BORDER="0" ALT="Non-MS link">
<P>ASPHole
<BR><A HREF="http://www.asphole.com/" TARGET="_top">http://www.asphole.com</A> <IMG SRC="../../../sitebuilder/graphics/leave-ms.gif" WIDTH="33" HEIGHT="11" BORDER="0" ALT="Non-MS link">
<P>ActiveServer Pages.Com
<BR> <A HREF="http://www.activeserverpages.com/" TARGET="_top">http://www.activeserverpages.com</A> <IMG SRC="../../../sitebuilder/graphics/leave-ms.gif" WIDTH="33" HEIGHT="11" BORDER="0" ALT="Non-MS link">
<P>ENT: The Independent Newspaper for Windows NT Enterprise Computing
<BR> <A HREF="http://www.entmag.com/" TARGET="_top">http://www.entmag.com</A> <IMG SRC="../../../sitebuilder/graphics/leave-ms.gif" WIDTH="33" HEIGHT="11" BORDER="0" ALT="Non-MS link">
<P>Windows NT Magazine
<BR> <A HREF="http://www.winntmag.com/" TARGET="_top">http://www.winntmag.com</A> <IMG SRC="../../../sitebuilder/graphics/leave-ms.gif" WIDTH="33" HEIGHT="11" BORDER="0" ALT="Non-MS link">
<P>Windows NT Web Server Tools: Pointers to Windows NT software used for providing Internet services
<BR> <A HREF="http://www.interlacken.com/winnt/ntwebsrv.htm/" TARGET="_top">http://www.interlacken.com/winnt/ntwebsrv.htm</A> <IMG SRC="../../../sitebuilder/graphics/leave-ms.gif" WIDTH="33" HEIGHT="11" BORDER="0" ALT="Non-MS link">
<P>Windows NT Sites: A vast selection of Web sites using Windows NT
<BR> <A HREF="http://www.indirect.com/www/ceridgac/ntsite.html/" TARGET="_top">http://www.indirect.com/www/ceridgac/ntsite.html</A> <IMG SRC="../../../sitebuilder/graphics/leave-ms.gif" WIDTH="33" HEIGHT="11" BORDER="0" ALT="Non-MS link">
<P>
<P>







<!-- DOCUMENT CONTENT END -->

</DIV>

<DIV CLASS="clsDocBody">
<HR SIZE="1" />
<P><I>Did you find this article useful? Gripes? Compliments? Suggestions for other articles? <A TITLE="Go ahead. Make our day! Send us your thoughts." HREF="../../../sitebuilder/pg01282.htm" TARGET="_top">Write us!</A></I></P>
<P ID="pBackTop"><A HREF="howto.htm#top" CLASS="clsBackTop"><IMG SRC="../../../workshop/graphics/top.gif" WIDTH="18" HEIGHT="8" BORDER="0" ALT="Back to top">Back to top</A></P>

<P CLASS="clsIncCpyRt">

</P>

&copy; <A CLASS="clsIncCpyRt" HREF="http://www.microsoft.com/misc/cpyright.htm" TARGET="_top">1998 Microsoft Corporation. All rights reserved. Terms of use</A>.

<P>&nbsp;</P>
</DIV>
<SCRIPT LANGUAGE="JavaScript"><!--

function CheckToTop()
{
var eBody = document.body;
if (eBody.scrollHeight > eBody.offsetHeight) pBackTop.style.display = 'block';
}

//--></SCRIPT>

<DIV ID="divMenu1" CLASS="clsMenu" ONMOUSEOVER="Menu_hover();" ONMOUSEOUT="Menu_hover();" ONCLICK="Menu_click();">
<DIV expURL="../../../sitebuilder/magazine/default.htm">Magazine Home</DIV>
<DIV expURL="../../../sitebuilder/magazine/jane.htm">Ask Jane</DIV>
<DIV expURL="../../../sitebuilder/magazine/dude.htm">DHTML Dude</DIV>
<DIV expURL="../../../sitebuilder/magazine/xml.htm">Extreme XML</DIV>
<DIV expURL="../../../sitebuilder/magazine/starters.htm">For Starters</DIV>
<DIV expURL="../../../sitebuilder/magazine/hess.htm">More or Hess</DIV>
<DIV expURL="../../../sitebuilder/magazine/server.htm">Servin' It Up</DIV>
<DIV expURL="../../../sitebuilder/magazine/site.htm">Site Lights</DIV>
<DIV expURL="../../../sitebuilder/magazine/webmen.htm">Web Men Talking</DIV>
</DIV>
<DIV ID="divMenu2" CLASS="clsMenu" ONMOUSEOVER="Menu_hover();" ONMOUSEOUT="Menu_hover();" ONCLICK="Menu_click();">
<DIV expURL="http://www.microsoft.com/sbnmember/default.asp">Member Community Home</DIV>
<DIV expURL="http://www.microsoft.com/sbnmember/freebies/default.asp">Benefits: Freebies &amp; Discounts</DIV>
<DIV expURL="http://www.microsoft.com/sbnmember/promote/default.asp">Benefits: Promote Your Site</DIV>
<DIV expURL="http://www.microsoft.com/sbnmember/connect/default.asp">Benefits: Connect with Your Peers</DIV>
<DIV expURL="http://www.microsoft.com/sbnmember/glance-lev.asp">Benefits at a Glance</DIV>
<DIV expURL="http://www.microsoft.com/sbnmember/osig/default.asp">Online Special-Interest Groups</DIV>
<DIV expURL="http://www.microsoft.com/sbnmember/levels/member.asp">Your Membership</DIV>
<DIV expURL="http://www.microsoft.com/sbnmember/freebies/stores.asp">SBN Stores</DIV>
<DIV expURL="http://www.microsoft.com/sbnmember/apply/registration.asp">Join Now</DIV>
</DIV>
<DIV ID="divMenu3" CLASS="clsMenu" ONMOUSEOVER="Menu_hover();" ONMOUSEOUT="Menu_hover();" ONCLICK="Menu_click();">
<DIV expURL="../../../workshop/default.htm">Workshop Home</DIV>
<DIV expURL="../../../workshop/c-frame.htm#/workshop/essentials/default.htm">Essentials</DIV>
<DIV expURL="../../../workshop/c-frame.htm#/workshop/delivery/default.htm">Content &amp; Component Delivery</DIV>
<DIV expURL="../../../workshop/c-frame.htm#/workshop/components/default.htm">Component Development</DIV>
<DIV expURL="../../../workshop/c-frame.htm#/workshop/database/default.htm">Data Access &amp; Databases</DIV>
<DIV expURL="../../../workshop/design/default.htm">Design</DIV>
<DIV expURL="../../../workshop/c-frame.htm#/workshop/author/default.htm">DHTML, HTML &amp; CSS</DIV>
<DIV expURL="../../../workshop/c-frame.htm#/xml/default.htm">Extensible Markup Language (XML)</DIV>
<DIV expURL="../../../workshop/c-frame.htm#/workshop/languages/default.htm">Languages &amp; Development Tools</DIV>
<DIV expURL="../../../workshop/c-frame.htm#/workshop/messaging/default.htm">Messaging &amp; Collaboration</DIV>
<DIV expURL="../../../workshop/c-frame.htm#/workshop/networking/default.htm">Networking, Protocols &amp; Data Formats</DIV>
<DIV expURL="../../../workshop/c-frame.htm#/workshop/browser/default.htm">Reusing Browser Technology</DIV>
<DIV expURL="../../../workshop/c-frame.htm#/workshop/security/default.htm">Security &amp; Cryptography</DIV>
<DIV expURL="../../../workshop/c-frame.htm#/workshop/server/default.htm">Server Technologies</DIV>
<DIV expURL="../../../workshop/c-frame.htm#/workshop/imedia/default.htm">Streaming &amp; Interactive Media</DIV>
<DIV expURL="../../../workshop/c-frame.htm#/workshop/management/default.htm">Web Content Management</DIV>
<DIV expURL="../../../workshop/index/default.htm">Workshop Index</DIV>
</DIV>
<DIV ID="divMenu4" CLASS="clsMenu" ONMOUSEOVER="Menu_hover();" ONMOUSEOUT="Menu_hover();" ONCLICK="Menu_click();">
<DIV expURL="../../../gallery/default.htm">Tools &amp; Samples Home</DIV>
<DIV expURL="../../../workshop/c-frame.htm#/gallery/tools/default.htm">Tools</DIV>
<DIV expURL="../../../workshop/c-frame.htm#/gallery/samples/default.htm">Samples, Headers, Libs</DIV>
<DIV expURL="../../../workshop/c-frame.htm#/gallery/images/default.htm">Images</DIV>
<DIV expURL="../../../workshop/c-frame.htm#/gallery/sounds/default.htm">Sounds</DIV>
<DIV expURL="../../../workshop/c-frame.htm#/gallery/stylesheets/default.htm">Style Sheets</DIV>
<DIV expURL="http://www.microsoft.com/typography/fontpack/win.htm">Web Fonts</DIV>
</DIV>
<DIV ID="divMenu5" CLASS="clsMenu" ONMOUSEOVER="Menu_hover();" ONMOUSEOUT="Menu_hover();" ONCLICK="Menu_click();">
<DIV expURL="../../../devtraining/default.htm">Training Home</DIV>
<DIV expURL="../../../workshop/c-frame.htm#/devtraining/seminars/default.htm">SBN Live Seminars</DIV>
<DIV expURL="../../../workshop/c-frame.htm#/devtraining/chat/default.htm">SBN Live Chats</DIV>
<DIV expURL="../../../workshop/c-frame.htm#/devtraining/atec.htm">Courses</DIV>
<DIV expURL="../../../workshop/c-frame.htm#/devtraining/peer/default.htm">Peer Support</DIV>
<DIV expURL="../../../workshop/c-frame.htm#/devtraining/mastering.htm">CD-ROM Training</DIV>
<DIV expURL="../../../workshop/c-frame.htm#/devtraining/books_kits.htm">Books & Training Kits</DIV>
<DIV expURL="../../../workshop/c-frame.htm#/devtraining/mscert/default.htm">Certification</DIV>
</DIV>
<DIV ID="divMenu6" CLASS="clsMenu" ONMOUSEOVER="Menu_hover();" ONMOUSEOUT="Menu_hover();" ONCLICK="Menu_click();">
<DIV expURL="../../../sitebuilder/default.htm">SBN Home</DIV>
<DIV expURL="../../../sitebuilder/siteinfo/newtosite.htm">New to SBN?</DIV>
<DIV expURL="../../../sitebuilder/whatsnew.htm">What's New on SBN</DIV>
<DIV expURL="../../../sitebuilder/siteinfo/sitemap.htm">Site Map</DIV>
<DIV expURL="http://www.microsoft.com/isapi/gosearch.asp?TARGET=/dev/web/default.asp">Site Search</DIV>
<DIV expURL="../../../sitebuilder/siteinfo/glossary/default.htm">Glossary</DIV>
<DIV expURL="../../../sitebuilder/write-us.htm">Write Us</DIV>
<DIV expURL="../../../sitebuilder/siteinfo/about.htm">About This Site</DIV>
</DIV>
<SCRIPT LANGUAGE="JavaScript" SRC="../../../sitebuilder/shared/js/navbar.js"></SCRIPT> 
<SCRIPT LANGUAGE="JavaScript" SRC="../../../sitebuilder/shared/js/navlinks.js"></SCRIPT>


</BODY>
</HTML>