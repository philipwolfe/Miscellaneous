
<HTML>
<HEAD>


<TITLE>SBN Server: Developing a Visual Basic Component for IIS/MTS</TITLE>

<META NAME="Description" CONTENT="Developing a Visual Basic Component for IIS/MTS: Tips on building components, performance and process isolation, and debugging" />
<META NAME="Keywords" CONTENT="ASP, COM, IIS, components" />
<META NAME="Robots" CONTENT="All" />

<META NAME="Author" CONTENT="Troy Cambra" />
<META NAME="Posted" CONTENT="" />
<META NAME="Updated" CONTENT="07/27/1998" />

<META NAME="MS.LOCALE" CONTENT="EN-US" />
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1" />

<LINK REL="stylesheet" TYPE="text/css" HREF="../../../sitebuilder/shared/css/navbar.css" />
<LINK REL="stylesheet" TYPE="text/css" HREF="../../../sitebuilder/shared/css/ie4-wks.css" />


<SCRIPT LANGUAGE="JavaScript"><!--

// -----------------------------------------------------------
// Client-side BrowserData constructor
// Populated using data from server-side oBD object to avoid redundancy
// -----------------------------------------------------------

function BrowserData()
{
this.userAgent = "Mozilla/4.0 (compatible; MSIE 4.01; Windows NT)";
this.browser = "MSIE";
this.majorVer = "4";
this.minorVer = "01";
this.betaVer = 0;
this.platform = "NT";
this.getsNavBar = true;
this.doesActiveX = true;

}
var oBD = new BrowserData();

//--></SCRIPT>

<SCRIPT LANGUAGE="Javascript"><!--

// -----------------------------------------------------------
// window_load()
// Container function for load.
// -----------------------------------------------------------

function window_load()
{
if (oBD.getsNavBar)
{
if ("function" == typeof(InitNavLinks)) InitNavLinks();
if ("function" == typeof(CheckToTop)) CheckToTop();
}
}
window.onload = window_load;

//--></SCRIPT>

</HEAD>

<BODY TOPMARGIN="0" LEFTMARGIN="0" MARGINHEIGHT="0" MARGINWIDTH="0" BGCOLOR="#FFFFFF">


<TABLE WIDTH="100%" CELLPADDING="0" CELLSPACING="0" BORDER="0">
<TR>
<TD ROWSPAN="2" WIDTH="460" VALIGN="top"><NOBR><A HREF="http://www.microsoft.com/" TARGET="_top"><IMG SRC="../../../library/images/gifs/toolbar/home.gif" WIDTH="103" HEIGHT="21" ALT="Microsoft Home" BORDER="0"></A><A HREF="http://www.microsoft.com/PRODUCTS/DEFAULT.asp?DIVISIONID="10"" TARGET="_top"><IMG SRC="../../../library/images/gifs/toolbar/prod.gif" WIDTH="81" HEIGHT="21" ALT="products" BORDER="0"></A><A HREF="http://www.microsoft.com/search/default.asp" TARGET="_top"><IMG SRC="../../../library/images/gifs/toolbar/search.gif" WIDTH="68" HEIGHT="21" ALT="search" BORDER="0"></A><A HREF="http://www.microsoft.com/ISAPI/GOSUPPORT.asp?TARGET=/SUPPORT/" TARGET="_top"><IMG SRC="../../../library/images/gifs/toolbar/support.gif" WIDTH="74" HEIGHT="21" ALT="support" BORDER="0"></A><A HREF="http://www.microsoft.com/referral/default.asp" TARGET="_top"><IMG SRC="../../../library/images/gifs/toolbar/shop.gif" WIDTH="55" HEIGHT="21" ALT="shop" BORDER="0"></A><A HREF="http://www.microsoft.com/ISAPI/GOREGWIZ.asp?TARGET=/REGWIZ/REGWIZ.asp" TARGET="_top"><IMG SRC="../../../library/images/gifs/toolbar/write.gif" WIDTH="78" HEIGHT="21" ALT="Write Us" BORDER="0"></A><IMG SRC="../../../library/images/gifs/toolbar/spacer.gif" WIDTH="1" HEIGHT="21" ALT="" BORDER="0"></NOBR></TD>
<TD BGCOLOR="#000000" WIDTH="100%" HEIGHT="20">&nbsp;</TD>
<TD ROWSPAN="2" WIDTH="91" ALIGN="right" VALIGN="top"><A HREF="http://www.microsoft.com/" TARGET="_top"><IMG SRC="../../../library/images/gifs/toolbar/msft.gif" WIDTH="91" HEIGHT="21" ALT="Microsoft Home" BORDER="0"></A></TD>
</TR>
<TR>
<TD COLSPAN="3" BGCOLOR="#FFFFFF" WIDTH="100%" HEIGHT="1"></TD>
</TR>
</TABLE>

<TABLE ID="tblNavBar" BORDER="0" CELLPADDING="0" CELLSPACING="0">
<TR VALIGN="top">
<TD CLASS="clsSBNLogo" TITLE="SBN Home" HEIGHT="34" WIDTH="90"><A HREF="/sitebuilder/default.htm" TARGET="_top" expNoTOC="true"><IMG HEIGHT="34" WIDTH="90" BORDER="0" SRC="../../../sitebuilder/shared/navbar/graphics/sbnbrand2.gif" ALT="SBN Home" /></A></TD>
<TD CLASS="clsNavBarItem" expItemNum="1">Magazine<BR><IMG HEIGHT="4" WIDTH="7" BORDER="0" SRC="../../../sitebuilder/shared/navbar/graphics/arrow.gif"></TD>
<TD>&nbsp;|&nbsp;</TD>
<TD CLASS="clsNavBarItem" expItemNum="2">Community<BR><IMG HEIGHT="4" WIDTH="7" BORDER="0" SRC="../../../sitebuilder/shared/navbar/graphics/arrow.gif"></TD>
<TD>&nbsp;|&nbsp;</TD>
<TD CLASS="clsNavBarItem" expItemNum="3">Workshop<BR><IMG HEIGHT="4" WIDTH="7" BORDER="0" SRC="../../../sitebuilder/shared/navbar/graphics/arrow.gif"></TD>
<TD>&nbsp;|&nbsp;</TD>
<TD CLASS="clsNavBarItem" expItemNum="4">Tools&nbsp;&amp;&nbsp;Samples<BR><IMG HEIGHT="4" WIDTH="7" BORDER="0" SRC="../../../sitebuilder/shared/navbar/graphics/arrow.gif"></TD>
<TD>&nbsp;|&nbsp;</TD>
<TD CLASS="clsNavBarItem" expItemNum="5">Training<BR><IMG HEIGHT="4" WIDTH="7" BORDER="0" SRC="../../../sitebuilder/shared/navbar/graphics/arrow.gif"></TD>
<TD>&nbsp;|&nbsp;</TD>
<TD CLASS="clsNavBarItem" expItemNum="6">Site&nbsp;Info<BR><IMG HEIGHT="4" WIDTH="7" BORDER="0" SRC="../../../sitebuilder/shared/navbar/graphics/arrow.gif"></TD>
<TD WIDTH="100%"></TD>
</TR>
</TABLE>


<TABLE ID="tblNavLinks" CLASS="clsNavLinks" CELLPADDING="0" CELLSPACING="0" BORDER="0" WIDTH="100%">
<TR>
<TD COLSPAN="2" HEIGHT="8"><IMG WIDTH="1" HEIGHT="8" SRC="../../../sitebuilder/shared/graphics/trans.gif"></TD>
<TD ROWSPAN="2"><A HREF="../../../workshop/default.htm" TARGET="_top"><IMG ALIGN="right" HEIGHT="30" WIDTH="106" BORDER="0" ALT="Click to return to the Workshop home page" SRC="../../../workshop/graphics/wrkbrand2.gif" /></A><BR /></TD>
</TR>
<TR>
<TD ROWSPAN="2">
<A HREF="../../../workshop/server/pg00164.htm"><IMG HEIGHT="32" WIDTH="31" HSPACE="25" BORDER="0" ALT="Click to return to the Server Technologies home page" SRC="../../../workshop/graphics/icons//server.gif" /></A>
</TD>
<TD>
<TABLE CELLPADDING="3" CELLSPACING="0" BORDER="0">
<TR>

<TD><A ID="lnkShowImg" HREF="../../../workshop/server/toc.htm" TARGET="_top"><IMG ID="imgShow" CLASS="clsLeftMenu" HEIGHT="15" WIDTH="18" BORDER="0" SRC="../../../workshop/graphics/icons/nl-show-0.gif" ALT="" /></A><BR></TD>
<TD NOWRAP><A ID="lnkShowText" CLASS="clsLeftMenu" HREF="../../../workshop/server/toc.htm" TARGET="_top">show toc</A> &nbsp;&nbsp; </TD>

<TD><A ID="lnkSyncImg" HREF="../../../workshop/pg08451.htm#/workshop/server/components/vbmtsiis.htm" TARGET="_top"><IMG ID="imgSync" CLASS="clsLeftMenu" HEIGHT="15" WIDTH="18" BORDER="0" SRC="../../../workshop/graphics/icons/nl-sync-0.gif" ALT="" /></A><BR></TD>
<TD NOWRAP><A ID="lnkSyncText" CLASS="clsLeftMenu" HREF="../../../workshop/pg08451.htm#/workshop/server/components/vbmtsiis.htm" TARGET="_top">sync toc</A> &nbsp;&nbsp; </TD>

<TD><A ID="lnkSearchImg" HREF="http://www.microsoft.com/isapi/gosearch.asp?TARGET=/dev/web/default.asp" TARGET="_top"><IMG ID="imgSearch" CLASS="clsLeftMenu" HEIGHT="15" WIDTH="18" BORDER="0" SRC="../../../workshop/graphics/icons/nl-search-0.gif" ALT="" /></A><BR></TD>
<TD NOWRAP><A ID="lnkSearchText" CLASS="clsLeftMenu" HREF="http://www.microsoft.com/isapi/gosearch.asp?TARGET=/dev/web/default.asp" TARGET="_top">search</A> &nbsp;&nbsp; </TD>

<TD><A ID="lnkIndexImg" HREF="../../../workshop/index/pg00001.htm"><IMG ID="imgIndex" CLASS="clsLeftMenu" HEIGHT="15" WIDTH="18" BORDER="0" SRC="../../../workshop/graphics/icons/nl-index-0.gif" ALT="" /></A><BR></TD>
<TD NOWRAP><A ID="lnkIndexText" CLASS="clsLeftMenu" HREF="../../../workshop/index/pg00001.htm">index</A> &nbsp;&nbsp; </TD>

</TR>
</TABLE>
</TD>
</TR>
<TR>
<TD COLSPAN="2" WIDTH="100%">
<TABLE CELLPADDING="2" CELLSPACING="0" BORDER="0">
<TR>
<TD>&nbsp;</TD>
</TR>
</TABLE>
</TD>
</TR>
</TABLE>

<BR CLEAR="all" />
<DIV CLASS="clsBucketBranch"><A HREF="../../../workshop/pg00004.htm" TARGET="_top">Workshop</A>&nbsp;&nbsp;|&nbsp;&nbsp;<A HREF="../../../workshop/pg08451.htm#/workshop/server/pg00164.htm" TARGET="_top">Server Technologies</A></DIV>

<DIV CLASS="clsDocBody">

<!-- DOCUMENT CONTENT START -->

<H1><A NAME="ENABLE" IDX_TYPE="task" IDX_CONCEPT="stopindex;Developing a Visual Basic component for IIS/MTS">Developing a Visual Basic Component for IIS/MTS</A></H1>
<HR SIZE="1" />
<H6><A NAME="top2" IDX_TYPE="sbngen" IDX_CONCEPT="IIS/MTS, developing components for;ASP, components: developing in Visual Basic for IIS/MTS; Components, developing in Visual Basic for IIS/MTS"></A></H6>
<P>Troy Cambra
<BR>Support Engineer
<BR>Microsoft Corporation
<P>June 19, 1998

<P><a href="vbmtsiis.zip"><IMG SRC="../../../sitebuilder/graphics/icodownl.gif" WIDTH=16 HEIGHT=20 BORDER=0 ALT="Download">Download this document in Microsoft Word (.DOC) format (zipped, 16K)</a>.
  <P> <b>Contents</b>
  <br> <A HREF="vbmtsiis.htm#topic1">Introduction</A>
  <BR> <A HREF="vbmtsiis.htm#topic2">Why Write Components?</A>
  <BR> <A HREF="vbmtsiis.htm#topic3">Why Use Microsoft Transaction Server?</A>
  <BR> <A HREF="vbmtsiis.htm#topic4">Why Use Visual Basic?</A>
  <BR> <A HREF="vbmtsiis.htm#topic5">Using the MTS Objects</A>
  <BR> <A HREF="vbmtsiis.htm#topic6">Using the ASP Intrinsic Objects</A>
  <BR> <A HREF="vbmtsiis.htm#topic7">Performance and Process Isolation Tips</A>
  <BR> <A HREF="vbmtsiis.htm#topic8">Tips for Building MTS Components</A>
  <BR> <A HREF="vbmtsiis.htm#topic9">Debugging Tips</A>
  <P>
  <h2><A NAME="topic1"></A>Introduction
  </h2>
  <P>The integration of Microsoft&#174; Internet Information Server (IIS) 4.0 with Microsoft Transaction Server (MTS) 2.0 yields a powerful server environment. The integration provides process isolation, transactional Web page support, and a rich framework for building components into IIS.  This article describes how to build components that take advantage of the new features in IIS and MTS, and provides an extensive list of tips on building components, performance and process isolation, and debugging.
  <P>This article assumes that you have a solid working knowledge of Internet Information Server, Active Server Pages (ASP), Microsoft Transaction Server, Visual Basic&#174; 5.0 and the  <A HREF="http://www.microsoft.com/com/" TARGET="_top">Component Object Model (COM)</A> <IMG SRC="../../../sitebuilder/graphics/leave-site.gif" WIDTH="17" HEIGHT="11" BORDER="0" ALT="Non-SBN link">. You can install IIS 4.0 and MTS 2.0 from the Windows NT&#174; Option Pack, which is available from  <A HREF="http://www.microsoft.com/windows/downloads/default.asp" TARGET="_top">http://www.microsoft.com/windows/downloads/default.asp</A> <IMG SRC="../../../sitebuilder/graphics/leave-site.gif" WIDTH="17" HEIGHT="11" BORDER="0" ALT="Non-SBN link">.
  <P>
  <h2><A NAME="topic2"></A>Why Write Components?
  </h2>
  <P>With ASP, it is entirely possible to build rich applications using only the features provided in IIS 4.0. You can access context, perform transactions, access databases, and so forth, without having to write your own components. So why, you might ask, would you want to write components? The three most compelling reasons are:
  <P><b>Performance and scalability.</b> Executing native code is faster and typically less memory-intensive than interpreting scripts.
  <P><b>Business logic encapsulation.</b> This creates better code organization, and also improves code debugging, distribution, and upgrading. In addition, you can reuse components within and across your applications.
  <P><b>Separation of data and user interface (UI).</b> Components make it easy to add a fresh UI to applications without having to touch business logic and data. This is important in a fast-changing Web-based application.
  <P>For more information on components, see:
  <P> <A HREF="agility.htm">Agility in Server Components</A>
  <P> <A HREF="catalog.htm">ASP Components Catalog</A>
  <P> <A HREF="outproc.htm">Enabling the Use of Out-of-Process Components in ASP Using the Metabase</A>
  <P> <A HREF="../../../workshop/components/default.htm" TARGET="_top">SBN Workshop's Component Development area</A> (on the home page, click the &quot;show contents&quot; link.)
  <P><A HREF="vbmtsiis.htm#top" CLASS="clsBackTop"><IMG SRC="../../../workshop/graphics/top.gif"  WIDTH="18" HEIGHT="8" BORDER="0" ALT="Top">Back to top</A>

      <P>
  <h2><A NAME="topic3"></A>Why Use Microsoft Transaction Server?
  </h2>
  <P>If you are using distributed transactions on your site, MTS is the obvious choice. However, even if you don't use transactions or databases, you will find that MTS is a very useful environment in which to run your components. MTS provides object brokering and run-time services as well as transaction monitoring. Consider MTS if your components require any of the following:
  <UL>


  <LI> Transactional support
  <LI> Fault tolerance
  <LI> Process isolation
  <LI> Manageable component and interface security
  <LI> Access to the ASP intrinsic objects
  <LI> Thread management
  <LI> Auditing
  <LI> Resource pooling

  </UL>For more information on MTS, see:
  <P> <A HREF="../../../workshop/server/nextgen/iismts.htm">IIS 4.0 and MTS 2.0: Technology for the Web</A> <IMG SRC="../../../sitebuilder/graphics/leave-site.gif" WIDTH="17" HEIGHT="11" BORDER="0" ALT="Non-SBN link">
  <P><A HREF="vbmtsiis.htm#top" CLASS="clsBackTop"><IMG SRC="../../../workshop/graphics/top.gif"  WIDTH="18" HEIGHT="8" BORDER="0" ALT="Top">Back to top</A>

      <P>
  <h2><A NAME="topic4"></A>Why Use Visual Basic?
  </h2>
  <P>Any language capable of creating apartment-threaded in-process COM components is suitable for developing MTS components. The choice of language should be primarily based on your familiarity with it and its suitability for the task. Familiarity with a language is the most important factor. Knowing how to use a language correctly and to its greatest efficiency and power can determine, in large part, the success of a project. However, suitability for the task also needs to be considered. For example, if raw speed were of utmost importance, a lower-level language such as C++ would be the better language to use.
  <P>Visual Basic is a solid tool for most applications. It is mature, stable, and proven. It is a sound rapid application development (RAD) tool, but has enough flexibility to get down to the underlying APIs and enable the developer to tweak performance or provide advanced features.
  <P><A HREF="vbmtsiis.htm#top" CLASS="clsBackTop"><IMG SRC="../../../workshop/graphics/top.gif"  WIDTH="18" HEIGHT="8" BORDER="0" ALT="Top">Back to top</A>

      <P>
  <h2><A NAME="topic5"></A>Using the MTS Objects
  </h2>
  <P>An MTS component is simply an ActiveX&#174; DLL project. Any class in an ActiveX DLL project can potentially be an MTS component. However, to take full advantage of the MTS features, it is necessary to use the MTS programmer's interface. The first step in doing this is to reference the Microsoft Transaction Server Type Library. This enables access to the MTS objects, the most important of which is <b>ObjectContext</b>. <b>ObjectContext</b> provides access to your object's MTS context, which provides the core MTS functionality.
  <P>In MTS, a logical thread of work is called an activity. An activity can span multiple objects and multiple method calls to any object. An activity's scope spans from the first call from the base client until either the root object calls <b>ObjectContext.SetComplete</b> and exits the method or the base client releases the root object. Although it is possible to have activities that span multiple method calls on any object in the activity, it is best to limit it to a single method call per object if possible. If this is done, you would simply obtain context in the method and release it before exiting. The code would look something like this:
  <P>
  <PRE class=clsCode>
Public Sub SomeMethod()

    Dim objCtx as ObjectContext

    Set objCtx = GetObjectContext
    If objCtx Is Nothing Then _
        Err.Raise 91 'error if failed

    'Perform work.
    'VB will release the
    'reference upon method exit

End Sub
  </PRE>
  <P>If the activity will span several method calls and the calls all require access to the object's context, it is generally a good idea to store it in a class member variable. It is bad form to obtain and release the object's context in the <b>Initiate</b> and <b>Terminate</b> events.  These events should be considered the constructor and destructor of the class, so context should not be assumed to be available. This is not always the case for Visual Basic, but should be followed for consistency with all other languages, for better error handling and reliability.
  <P>The best way to obtain and release context is to use the <b>ObjectControl</b> interface methods. <b>ObjectControl</b> provides a solid mechanism for context handling, and also allows the component to take advantage of object pooling when it becomes available in future releases.
  <P>Code using the <b>ObjectControl</b> interface methods to handle context in the class module might look something like this:
  <P>
  <PRE class=clsCode>
Option Explicit
'Private member variables
Private m_objCtx As ObjectContext

'Public class functions
'Implementation of ObjectControl interface
Implements ObjectControl

Private Sub ObjectControl_Activate()
    Set m_objCtx = GetObjectContext
    If m_objCtx Is Nothing Then _
        Err.Raise 91 'error if failed
End Sub

Private Function ObjectControl_CanBePooled() As Boolean
    ObjectControl_CanBePooled = False  'don't pool for now
End Function

Private Sub ObjectControl_Deactivate()
    Set m_objCtx = Nothing 'release
End Sub

'Actual public class functions
'TBD
  </PRE>
  <P>Once the context is obtained, you can use it to control transaction outcome and object recycling, to query context properties, and to perform various functions. The
    following function shows a typical use of the context properties and methods:
  <PRE class=clsCode>
  Public Function BasicFunction(ByVal blnAudit As Boolean) As Variant

      'sample MTS function
      Dim strAuditString As String
      Dim strErrString As String

      'This function will optionally log auditing information
      On Error GoTo ErrHand
      If blnAudit Then
          strAuditString = "Method: BasicFunction " & vbCrLf & _
              "Thread ID: 0x" & Hex(App.ThreadID) & vbCrLf & _
              "Transactional: " & m_objCtx.IsInTransaction & vbCrLf & _
              "DirectCaller: " & m_objCtx.Security.GetDirectCallerName & vbCrLf & _
              "OriginalCaller: " & m_objCtx.Security.GetOriginalCallerName
          Call App.LogEvent(strAuditString, vbLogEventTypeInformation)
      End If

      'Perform the actual work
      'Actual work TBD

      'Finish up
      BasicFunction = "Something Wonderful Happened"
      'Commit the transaction
      m_objCtx.SetComplete
      Exit Function

  ErrHand:
      'log the actual error
      strErrString = "Error Code: 0x" & Hex(Err.Number) & vbCrLf & _
          "Error Description: " & Err.Description & vbCrLf & _
          "Error Source: " & Err.Source
      On Error Resume Next
      Call App.LogEvent(strErrString, vbLogEventTypeError)
      'Abort the transaction - if one
      m_objCtx.SetAbort
      'Raise a friendly error to the caller. Minimizing the number of
      'errors returned to the client makes programming at that level
      'easier. For example, you typically have two types of errors
      'recoverable and non recoverable. You could simply send back
      'one or the other so the caller can easily make a decision
      'about how to handle it.
      Call Err.Raise(vbObjectError + 1001, _
          "Basic Component", _
          "Basic Error. Please contact the system administrator")

  End Function

    </PRE><P>&nbsp;


  <P><A HREF="vbmtsiis.htm#top" CLASS="clsBackTop"><IMG SRC="../../../workshop/graphics/top.gif"  WIDTH="18" HEIGHT="8" BORDER="0" ALT="Top">Back to top</A>

      <P>
  <h2><A NAME="topic6"></A>Using the ASP Intrinsic Objects
  </h2>
  <P>The ASP intrinsic objects are available within MTS objects through the object's context. Making use of the ASP intrinsic objects from within an MTS object is simple and can be quite effective. For example, if you have an ASP page that is building a complicated HTML page using the Response object, you can encapsulate the code in a component that will execute much faster, and be much easier to debug. Here is a sample function from a component and a sample ASP script that calls it:
  <P><b>The Component</b>
  <PRE class=clsCode>
  Public Function ASPVarUse() As Variant

      'sample mts function
      Dim strErrString As String
      Dim objApplication As Object
      Dim objResponse As Object
      Dim objRequest As Object
      Dim objServer As Object
      Dim objSession As Object
      Dim objItem As Object

      'Get the IIS intrinsic objects
      If m_objCtx.Count < 5 Then _
          Call Err.Raise(vbObjectError + 1002, "Basic Function", _
          "This object is meant to be called by ASP pages only")

      Set objApplication = m_objCtx.Item("Application")
      Set objResponse = m_objCtx.Item("Response")
      Set objRequest = m_objCtx.Item("Request")
      Set objServer = m_objCtx.Item("Server")
      Set objSession = m_objCtx.Item("Session")

      'Access the ASP objects
      objResponse.Write "&lt;p&gt; Outputting from the MTS component &lt;/p&gt;"
      Call objServer.HTMLEncode("The paragraph tag: &lt;P&gt;")
      objApplication("AppTest") = "Application Test"
      objSession("SessionTest") = "Session Test"
      For Each objItem In objRequest.QueryString("RequestTest")
          objResponse.Write objItem & "&lt;BR&gt;"
      Next

      ASPVarUse = "Successful Test"
      'Commit the transaction
      m_objCtx.SetComplete
      Exit Function

  ErrHand:
      'log the actual error
      strErrString = "Error Code: 0x" & Hex(Err.Number) & vbCrLf & _
          "Error Description: " & Err.Description & vbCrLf & _
          "Error Source: " & Err.Source
      On Error Resume Next
      Call App.LogEvent(strErrString, vbLogEventTypeError)
      'Abort the transaction - if one
      m_objCtx.SetAbort
      'Raise a friendly error to the caller.
      Call Err.Raise(vbObjectError + 1001, _
          "Basic Component", _
          "Basic Error. Please contact the system administrator")

  End Function

  </PRE>
  <P>

  <P><b>The ASP Script</b>

  <PRE class=clsCode>
  &lt;%
  Dim objTest

  On Error Resume Next
  'Create the MTS object
  Set objTest = Server.CreateObject("PMTSIISVB.IMTSIISVB")
  If Err.Number &lt;&gt; 0 Then
      Response.Clear
      Response.Write "&lt;p&gt; " & Err.Description & " &lt;/p&gt;"
      Response.End
  End If

  Response.Write "&lt;p&gt; Starting Test &lt;/p&gt;"
  Response.Write "&lt;p&gt; ASPVarUse Return: " & objTest.ASPVarUse() & " &lt;/p&gt;"
  If Err.Number &lt;&gt; 0 Then
      Response.Clear
      Response.Write "&lt;p&gt; " & Err.Description & " &lt;/p&gt;"
      Response.End
  End If
  Response.Write "&lt;p&gt; Session Variable = " & Session("SessionTest") & " &lt;/p&gt;"
  Response.Write "&lt;p&gt; Application Variable = " & Application("AppTest") & " &lt;/p&gt;"
  Response.Write "&lt;p&gt; Ending Test &lt;/p&gt;"
  %&gt;
    </PRE>

  <P>

  <P><A HREF="vbmtsiis.htm#top" CLASS="clsBackTop"><IMG SRC="../../../workshop/graphics/top.gif"  WIDTH="18" HEIGHT="8" BORDER="0" ALT="Top">Back to top</A>

      <P>
  <h2><A NAME="topic7"></A>Performance and Process Isolation Tips
  </h2>
  <P>Balancing fault tolerance, programming ease, and performance can be tricky. There are countless things that can be done to fine-tune performance. I've put together a list of some of the more common things you can do or avoid doing to improve performance. For a more detailed discussion of IIS and ASP performance tuning, please see the  <A HREF="http://mspress.microsoft.com/prod/books/1398.htm" TARGET="_top">Internet Information Server Resource Kit</A> <IMG SRC="../../../sitebuilder/graphics/leave-site.gif" WIDTH="17" HEIGHT="11" BORDER="0" ALT="Non-SBN link">.
  <UL>


  <LI> <b>Use in-process ASP pages and components as much as possible.</b> If the IIS server is a single-use server (your application is the only one) and you are confident about the robustness of your ASP pages and MTS components, it is acceptable to run them all in the IIS process. Caution: A problem in an ASP page or component can bring down the whole server when run in the IIS process.

  </UL>
  <BLOCKQUOTE>It is important to fully analyze the entire server. You might think that running every ASP page in every application or virtual Web site in-process would create better performance than running some or all out-of-process. This is not always true. There are literally thousands of variables in the performance equation.  The only way to be sure of optimum performance is to plan performance testing into your application development cycle.  For example, I have had some larger Web sites actually see a substantial performance increase by moving applications out-of-process.
  <P>If process isolation between the application and the IIS server is important, run the IIS application in a separate process, but use a library package for the MTS components. This is typically a good tradeoff. A problem in a component could bring down the application, but even if they were in two different processes, the problem would probably propagate back to the ASP in some form anyway. Further, this configuration will typically outperform running the ASP in the IIS process and the MTS components in a server process.
  </BLOCKQUOTE>
  <UL>


  <LI> <b>Watch those object references.</b> Passing object pointers around may make programming easier, but can kill performance. This is especially true over network links, but cross-process references can be quite a performance killer as well. Recordsets are objects that folks commonly want to pass around. If there is a need to pass recordsets -- especially to clients -- use the Client batch recordset that is part of the ActiveX Data Objects (ADO) and the Remote Data Service (RDS). This disconnected recordset can be marshaled by value, and it can also be marshaled via HTTP.
  <P>
  <LI> <b>Watch property Get and Set calls.</b> It is typically better to use a single method call to get a group of related properties rather than individual property <b>Get</b> and <b>Set</b> calls. Each call requires a round-trip, so minimizing calls minimizes round-trips, which maximizes performance. In other words, objects with a small number of methods that have many arguments will typically outperform objects that have many properties and methods.

  <P><LI> <b>Avoid delegation.</b>  The Visual Basic <b>Implements</b> keyword enables the programmer to delegate calls to achieve a simple form of inheritance. While this is good for code reuse, take care not to overuse it. It can quickly degrade performance -- especially in a stateless environment such as MTS where objects are constantly created and released.
  <P><LI> <b>Avoid run-time catalog queries in transactional components.</b> System tables are typically small and doing this can cause serious database blocking. This can be obvious or obscure. For example, building SQL statements based on the system table information is easy to avoid, but it's not as easy to see or avoid knowing that some database API or object accesses system tables when a certain flag is used on some method. Check ODBC and database logs and traces for signs of this before deploying the application.
  <P><LI> <b>Be careful with your shared data.</b> The Shared Property Access Manager, the Session object, and the Application object can all hold shared data. However, never store apartment-threaded objects in any of them and take care not to overuse them when storing other data. The interface marshaling and thread synchronization (respectively) can be a performance hit.
  <P><LI> <b>Avoid accessing non-tuned COM servers.</b> For example, I have seen MTS applications that call Microsoft Word to format data before storing it, and so forth. Word and other such non-tuned COM servers were not developed with this use in mind, so performance is typically less than optimal.
  <P><LI> <b>Avoid storing state.</b> There are a few cases where storing state can be beneficial, but most of the time storing state hurts scalability and leads to other problems.
  <P><LI> <b>Do not call directly off-machine from ASP pages.</b> Knowledge Base article Q159311, which is available from  <A HREF="http://www.microsoft.com/support/" TARGET="_top">http://www.microsoft.com/support/</A> <IMG SRC="../../../sitebuilder/graphics/leave-site.gif" WIDTH="17" HEIGHT="11" BORDER="0" ALT="Non-SBN link">, discusses using an intermediate MTS package that exists on the IIS machine and in turn calls the remote server. The actual reason for this is due to security considerations, and when I first heard it I thought, "What a performance nightmare." However, after I thought about it and tried a few sample tests, I realized that you can use this to improve performance.

  </UL>
  <BLOCKQUOTE>ASP pages are going to use the <b>IDispatch</b> interface of the component. This causes two calls per method call. If you use early binding in your intermediate component, you can limit the network calls to one call per method. Further, you can design your intermediate component to hold references, cache data, and so forth. This can minimize the amount and frequency of data accessed over the network.
  </BLOCKQUOTE>
  <UL>


  <LI> <b>Minimize transaction duration in transactional components.</b> MTS starts a Microsoft Distributed Transaction Coordinator (DTC) transaction for the object on instantiation of the first transactional component. This transaction is then flowed throughout the activity. Although it is instantiated, the resource manager transaction does not begin until the first attempt to access something in it. Therefore, try to begin the transaction as late as possible, delay actual resource manager access as long as possible, and end the transaction as soon as possible.

  </UL>
  <P><A HREF="vbmtsiis.htm#top" CLASS="clsBackTop"><IMG SRC="../../../workshop/graphics/top.gif"  WIDTH="18" HEIGHT="8" BORDER="0" ALT="Top">Back to top</A>

      <P>
  <h2><A NAME="topic8"></A>Tips for Building MTS Components
  </h2>
  <P>Here is a list of suggestions for building MTS components for use in IIS. This is not a set of rules, but flexible guidelines.
  <UL>


  <LI> <b>Try to SetComplete/SetAbort in every method call.</b> Stateless is the way to go in MTS. This is not to say that you should not have multiple objects as part of an activity. It simply means that you should try to limit calls to any given object in the transaction. Activities that span multiple methods can get into deadlock situations as use increases. Further, this simplifies the execution path for performance and also helps to eliminate possible failure points (especially for remote components).
  <P><LI> <b>Perform sample tests to compare methodologies, components, and tools before starting.</b> This will give you an idea of performance and problems early on. For example, using the ODBC API will result in very fast code, but is it worth the added development cost or does some careful ADO code with a little extra hardware make more sense? The MTS performance team is starting to release performance data, but a simple prototype of your application can provide you with invaluable information.
  <P><LI> <b>Consider the future.</b> How far will the application need to scale? Will it need to become more distributed? Will you need location transparency? These types of questions influence development. For example, if the application does not need to scale very far and will always run in-process, passing object references and performing many property <b>Gets</b> and <b>Sets</b> may not be a problem. If your application needs to change, performance and reliability could suffer with such a design.
  <P><LI> <b>Test with at least as many users (simulated) as you plan on deploying to and run on similar hardware.</b> Test in this manner throughout the development cycle.  All too often an application is developed and tested in single-user mode or perhaps with a couple of clients. The application is then tested under heavy load -- or worse, rolled out to many users -- and fails miserably.
  <P><LI> <b>Use a consistent and universal error-handling mechanism.</b> Error handling is often an afterthought. This will not usually cause problems in a desktop application, but in a mission-critical multi-tiered distributed application, error handling that's not carefully planned and tested can result in serious problems. Error handling techniques will likely be covered in a subsequent paper.
  <P><LI> <b>Be wary of third-party controls and object libraries.</b> Although they may provide some cool feature or core logic, many have not yet been tested with MTS and others have never been tested in a high-stress server environment. Be sure that the vendor has done some testing in this area and/or will be responsive when bugs are found.
  <P><LI> <b>Avoid callbacks.</b> Having the server call the client back is typically a problem waiting to happen. Further, the MTS programming model does not support callbacks very well. Callbacks may be explicitly done in Visual Basic code by passing object references to the server or implicitly using the <b>WithEvents</b> keyword. The <b>WithEvents</b> keyword uses connection points and therefore keeps callbacks under the hood.
  <P><LI> <b>Use the RDS components and ADO ClientBatch disconnected Recordset objects.</b> You can do this to get rowsets to clients and even to call the business objects directly via HTTP. Combined with IIS, MTS, and ASP, these technologies enable you to build Web applications that are every bit as full featured and robust as a traditional client/server solution, without sacrificing any of the Web application's advantages.
  <P><LI> <b>Do not store MTS components in session or application variables.</b> MTS treats all components as apartment-threaded, so storing them in session or application variables will cause performance and scalability problems. See the Scripter's Reference in the IIS product documentation for more information.
  <P><LI> <b>Do not use CreateObject() in ASP scripts to create MTS objects.</b> Use <b>Server.CreateObject()</b>. <b>Server.CreateObject()</b> flows context and provides improved security checks. Use <b>CreateObject</b> only if you fully understand the ramifications of doing so and really need to have the MTS component run in a different activity. See the Scripter's Reference in the IIS product documentation for more information.
  <P><LI> <b>Pass arguments ByValue whenever possible.</b> It is more efficient than <b>ByRef</b>. Only use <b>ByRef</b> if you need to return data to the client. Make sure that all method arguments that return data to the script (by reference) are of type <b>Variant</b>. Visual Basic&#174; Scripting Edition (VBScript) cannot use any other type for arguments that return data.
  <P><LI> <b>Be cautious when using the New keyword.</b> When used to create objects that exist in the same project, the <b>New</b> keyword will not use a COM creation method. Therefore, objects created using <b>New</b> will not be MTS objects even though they are installed in MTS.
  <P><LI> <b>Be sure to use binary compatibility.</b> Also, set the threading model to <b>Apartment</b> for the Visual Basic project.
  <P><LI> <b>Do not develop the server components on a client machine.</b> Developing on the client sounds convenient at first, but after going through the "compile the component, unregister component on the client, copy to server, refresh component in MTS, re-export the package to generate the client export executable, run the client export executable on the client, and then run the client" cycle a few times and sorting out all the problems along the way, you'll want to develop on the server.
  <P><LI> <b>Avoid implementing security in component code.</b> For example, it is possible to implement method-level security using <b>IsCallerInRole</b>. However, this means that security administration is not completely independent of component implementation. Administrative changes such as the changing of role names can necessitate component code changes.

  </UL>
  <P><A HREF="vbmtsiis.htm#top" CLASS="clsBackTop"><IMG SRC="../../../workshop/graphics/top.gif"  WIDTH="18" HEIGHT="8" BORDER="0" ALT="Top">Back to top</A>

      <P>
  <h2><A NAME="topic9"></A>Debugging Tips
  </h2>
  <P>Visual Basic has a strong interpreted debugger in the integrated development environment (IDE). Unfortunately, this doesn't help when you're trying to run in the MTS environment. When running in MTS, it is necessary to debug the executable code directly. Although Visual Basic is not capable of debugging MTS components directly, it can generate debugging symbols that can be used in the Visual C++&#174; debugger (Developer Studio). Although limited compared to the Visual C++ debugging functionality, this is still one of the best ways to debug Visual Basic components in MTS.
  <P>While the Visual C++ debugger is recommended because it's easy to use, the latest WinDGB.EXE can also be used to debug Visual Basic components. WinDBG is more difficult to use, but is in some ways more powerful. It is also free. The latest version is available from  <A HREF="http://www.microsoft.com/msdn/sdk/windbg.HTM" TARGET="_top">http://www.microsoft.com/msdn/sdk/windbg.htm</A>.
  <P>Any language that uses a large run-time or virtual machine (such as Visual Basic or Java) can make tracking bugs more difficult, because there's a lot going on below the level at which you are working. Further, the use of libraries that wrap underlying APIs such as ActiveX Data Objects (ADO), Remote Data Objects (RDO), and Oracle Power Objects can further complicate things. It would be nice to think that they are bug-free, but the reality is that they are not -- and finding those bugs without source code and symbols is very difficult. Finally, the run-times and wrappers can do things that are programmatically convenient but cause performance or functionality problems in the MTS environment. One such example is the querying of the database system tables that many of the data-access objects perform. This can make programming easier, but can also cause serious blocking in the database.
  <P>It is not impossible to properly debug Visual Basic components, but it is a little more difficult than some other kinds of debugging. Extra care must be taken to assure robustness. I typically follow the these guidelines when building and debugging an MTS component in Visual Basic:
  <OL>

  <LI>   Build the component in the Visual Basic IDE with the
   following registry key set:
  <PRE class=clsCode>
HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Transaction Server\Debug\RunWithoutContext
  </PRE>


  <P>
  This allows the code to run as if it were in MTS. See the "Debugging Visual Basic MTS Components" help topic in the MTS help file for details on this setting.


  <P>
  <LI>   Once it is running in the IDE as well as possible, compile to native code with optimizations off and <b>Create Symbolic Debug Info</b> on. This will create a component that can be debugged in the Visual C++ 5.0 debugger or WinDBG. See Knowledge Base article Q172869 on the  <A HREF="http://www.microsoft.com/support/" TARGET="_top">Microsoft Technical Support site</A> <IMG SRC="../../../sitebuilder/graphics/leave-site.gif" WIDTH="17" HEIGHT="11" BORDER="0" ALT="Non-SBN link"> for further details.


 Use tracing and assert "macros" throughout the code. The built-in Visual Basic support for debugging will not work when using the Visual C++ debugger. The
  following debugging functions can be very useful when debugging in this manner:


  <PRE class=clsCode>
#If DEBUGGING Then
    'API Functions
    Public Declare Sub OutputDebugStringA _
        Lib "KERNEL32" ( _
        ByVal strError As String)

    Public Declare Function MessageBoxA _
        Lib "USER32" ( _
        ByVal hwnd As Long, _
        ByVal lpText As String, _
        ByVal lpCaption As String, _
        ByVal uType As Long) As Long

    Public Declare Sub DebugBreak Lib "KERNEL32" ()

    Public Declare Function IsDebuggerPresent Lib "KERNEL32" () As Long

    'API Constants
    Private Const API_NULL As Long = 0
    Private Const API_FALSE As Long = 0
    Private Const API_TRUE As Long = 1
    Private Const MB_ICONERROR As Long = &H10
    Private Const MB_SERVICE_NOTIFICATION As Long = &H200000
    Private Const MB_YESNO As Long = 4
    Private Const IDYES As Long = 6
    Private Const IDNO As Long = 7

    'Other Constants
    Private Const ASSERT_DIALOG_STRING As String = _
"The Component has thrown an assert." _
& vbCrLf & "Press Yes to debug the application." _
& vbCrLf & "Press No to continue running the application"
    Private Const ASSERT_DIALOG_TITLE As String = "Component Assert"
    Private Const DEBUG_DIALOG_TITLE As String = "Component Debug Message"

#End If

'Exposed functions
Public Sub DebugPrint(ByVal strError As String)
#If DEBUGGING Then
    Call OutputDebugStringA(strError)
#End If
End Sub

Public Sub DebugMessage(ByVal strError As String)
#If DEBUGGING Then
    Dim lngReturn As Long

    lngReturn = MessageBoxA(API_NULL, strError, _
                            DEBUG_DIALOG_TITLE, _
                            MB_ICONERROR Or MB_SERVICE_NOTIFICATION)
#End If
End Sub

Public Sub DebugAssert(ByVal vntExpr As Variant)
#If DEBUGGING Then
    Dim lngReturn As Long
    Dim blnAssert As Boolean

    On Error GoTo ExecAlways
    blnAssert = True
    Select Case VarType(vntExpression)
    Case vbEmpty
        blnAssert = True
    Case vbNull
        blnAssert = True
    Case vbString
        If vntExpr = vbNullString Then
     blnAssert = True
Else
    blnAssert = False
End If
    Case vbObject
        If vntExpr Is Nothing Then
    blnAssert = True
Else
    blnAssert = False
End If
    Case vbError
        blnAssert = True
    Case vbBoolean
        blnAssert = Not vntExpr
    Case vbDataObject
        If vntExpr Is Nothing Then
    blnAssert = True
Else
    blnAssert = False
End If
    Case Is > vbArray
        blnAssert = False
        On Error GoTo ErrArray
        lngReturn = UBound(vntExpr) 'assert if empty
        On Error GoTo ExecAlways
    Case Else 'numeric, byte
        If vntExpr = 0 Then
    blnAssert = True
Else
    blnAssert = False
End If
    End Select

ExecAlways:
    If blnAssert = True Then
        If IsDebuggerPresent = API_TRUE Then
            Call DebugBreak
        Else
            If IDYES = MessageBoxA(API_NULL, ASSERT_DIALOG_STRING, _
                            ASSERT_DIALOG_TITLE, _
                            MB_YESNO Or MB_ICONERROR Or MB_SERVICE_NOTIFICATION) Then
                Call DebugBreak
            End If
        End If
    End If

    Exit Sub

ErrArray:
    blnAssert = True
    Resume Next

#End If
End Sub


    </PRE>

  <P>

  <P>Use the <b>DebugAssert()</b> &quot;macro&quot; throughout the project code. The other two functions are less useful, but can be useful when trying to track a stress-related bug. When building a debug version, define a conditional compile argument as <b>DEBUGGING=-1</b>, and compile. When an assert is hit, the debugger should break the application. When compiling for release code, set the conditional compile argument to <b>DEBUGGING=0</b> or remove it completely.
  <P>The lack of true macro capability in Visual Basic means that even in the release code there is still a method call for each of the above debug calls. The method call does nothing, but there is still some overhead in making the call. If performance is of utmost concern, it is possible to conditionally compile the debug calls so that they are not part of the release code:
  <P>
  <PRE class=clsCode>#If DEBUGGING Then
  DebugAssert(SomeValue)
  #End If
  </PRE>

  <LI>   Test extensively with the debug code. Often, stress will uncover many bugs that single-user and unit testing do not catch.
  <LI>   Run the same testing cycle on the release code. Sometimes removing the debugging code can unmask subtle timing problems. Finding problems of this type must be taken on a case-by-case basis. I have yet to find a technique that works for all cases -- or even most cases.
  <LI>   Always check the event log. MTS, IIS, and ASP log many error conditions. It can often be quite helpful in tracking down many types of errors.

</ol>
  <P>Sometimes there are bugs that the above simply does not catch. Tracking down hangs and performance problems is always fun. There are two things to look at first when doing so: CPU utilization and database blocking. If CPU utilization is normal on both the MTS server and the database server, blocking in the database is often the cause. Finding the underlying cause typically requires looking at the database and ODBC logs and traces. If the CPU utilization is peaking on one machine, start looking there for bottlenecks. There is no simple solution to this problem. You have to look at everything: it could be disk utilization on the database server, an indication that the objects are too large, simply an underestimate of necessary server hardware, and so forth -- all a little beyond the scope of this paper.
  <P>Tracking down sporadic exceptions is yet another time-consuming and less than enjoyable experience. The MTS, ASP, or COM environments typically handle exceptions by trapping the error, logging the event, and cleaning up as necessary. It is possible to catch these by running the application with a debugger attached. Although you can debug these, you can also simply call product support. Be prepared to install symbols, debuggers, and even RAS on the machine.
  <P>Debugging components from ASP pages adds yet another layer of difficulty. However, the  <A HREF="http://www.microsoft.com/scripting/debugger/default.htm" TARGET="_top">Script Debugger</A> <IMG SRC="../../../sitebuilder/graphics/leave-site.gif" WIDTH="17" HEIGHT="11" BORDER="0" ALT="Non-SBN link"> and the above debugging code can make it much easier to debug problems right in the application process. Copying the ASP code into a Visual Basic project and creating a client executable that can then be used to debug the component can be a useful (and sometimes necessary) trick. This can be especially useful when developing ASP scripts and Visual Basic components. Overall, Visual Basic is still the best editor for creating and testing Visual Basic code.
  <P>


 <P>
<P>







<!-- DOCUMENT CONTENT END -->

</DIV>

<DIV CLASS="clsDocBody">
<HR SIZE="1" />
<P><I>Did you find this article useful? Gripes? Compliments? Suggestions for other articles? <A TITLE="Go ahead. Make our day! Send us your thoughts." HREF="../../../sitebuilder/pg08450.htm" TARGET="_top">Write us!</A></I></P>
<P ID="pBackTop"><A HREF="vbmtsiis.htm#top" CLASS="clsBackTop"><IMG SRC="../../../workshop/graphics/top.gif" WIDTH="18" HEIGHT="8" BORDER="0" ALT="Back to top">Back to top</A></P>

<P CLASS="clsIncCpyRt">

</P>

&copy; <A CLASS="clsIncCpyRt" HREF="http://www.microsoft.com/misc/cpyright.htm" TARGET="_top">1998 Microsoft Corporation. All rights reserved. Terms of use</A>.

<P>&nbsp;</P>
</DIV>
<SCRIPT LANGUAGE="JavaScript"><!--

function CheckToTop()
{
var eBody = document.body;
if (eBody.scrollHeight > eBody.offsetHeight) pBackTop.style.display = 'block';
}

//--></SCRIPT>

<DIV ID="divMenu1" CLASS="clsMenu" ONMOUSEOVER="Menu_hover();" ONMOUSEOUT="Menu_hover();" ONCLICK="Menu_click();">
<DIV expURL="../../../sitebuilder/magazine/default.htm">Magazine Home</DIV>
<DIV expURL="../../../sitebuilder/magazine/jane.htm">Ask Jane</DIV>
<DIV expURL="../../../sitebuilder/magazine/dude.htm">DHTML Dude</DIV>
<DIV expURL="../../../sitebuilder/magazine/xml.htm">Extreme XML</DIV>
<DIV expURL="../../../sitebuilder/magazine/starters.htm">For Starters</DIV>
<DIV expURL="../../../sitebuilder/magazine/hess.htm">More or Hess</DIV>
<DIV expURL="../../../sitebuilder/magazine/server.htm">Servin' It Up</DIV>
<DIV expURL="../../../sitebuilder/magazine/site.htm">Site Lights</DIV>
<DIV expURL="../../../sitebuilder/magazine/webmen.htm">Web Men Talking</DIV>
</DIV>
<DIV ID="divMenu2" CLASS="clsMenu" ONMOUSEOVER="Menu_hover();" ONMOUSEOUT="Menu_hover();" ONCLICK="Menu_click();">
<DIV expURL="http://www.microsoft.com/sbnmember/default.asp">Member Community Home</DIV>
<DIV expURL="http://www.microsoft.com/sbnmember/freebies/default.asp">Benefits: Freebies &amp; Discounts</DIV>
<DIV expURL="http://www.microsoft.com/sbnmember/promote/default.asp">Benefits: Promote Your Site</DIV>
<DIV expURL="http://www.microsoft.com/sbnmember/connect/default.asp">Benefits: Connect with Your Peers</DIV>
<DIV expURL="http://www.microsoft.com/sbnmember/glance-lev.asp">Benefits at a Glance</DIV>
<DIV expURL="http://www.microsoft.com/sbnmember/osig/default.asp">Online Special-Interest Groups</DIV>
<DIV expURL="http://www.microsoft.com/sbnmember/levels/member.asp">Your Membership</DIV>
<DIV expURL="http://www.microsoft.com/sbnmember/freebies/stores.asp">SBN Stores</DIV>
<DIV expURL="http://www.microsoft.com/sbnmember/apply/registration.asp">Join Now</DIV>
</DIV>
<DIV ID="divMenu3" CLASS="clsMenu" ONMOUSEOVER="Menu_hover();" ONMOUSEOUT="Menu_hover();" ONCLICK="Menu_click();">
<DIV expURL="../../../workshop/default.htm">Workshop Home</DIV>
<DIV expURL="../../../workshop/c-frame.htm#/workshop/essentials/default.htm">Essentials</DIV>
<DIV expURL="../../../workshop/c-frame.htm#/workshop/delivery/default.htm">Content &amp; Component Delivery</DIV>
<DIV expURL="../../../workshop/c-frame.htm#/workshop/components/default.htm">Component Development</DIV>
<DIV expURL="../../../workshop/c-frame.htm#/workshop/database/default.htm">Data Access &amp; Databases</DIV>
<DIV expURL="../../../workshop/design/default.htm">Design</DIV>
<DIV expURL="../../../workshop/c-frame.htm#/workshop/author/default.htm">DHTML, HTML &amp; CSS</DIV>
<DIV expURL="../../../workshop/c-frame.htm#/xml/default.htm">Extensible Markup Language (XML)</DIV>
<DIV expURL="../../../workshop/c-frame.htm#/workshop/languages/default.htm">Languages &amp; Development Tools</DIV>
<DIV expURL="../../../workshop/c-frame.htm#/workshop/messaging/default.htm">Messaging &amp; Collaboration</DIV>
<DIV expURL="../../../workshop/c-frame.htm#/workshop/networking/default.htm">Networking, Protocols &amp; Data Formats</DIV>
<DIV expURL="../../../workshop/c-frame.htm#/workshop/browser/default.htm">Reusing Browser Technology</DIV>
<DIV expURL="../../../workshop/c-frame.htm#/workshop/security/default.htm">Security &amp; Cryptography</DIV>
<DIV expURL="../../../workshop/c-frame.htm#/workshop/server/default.htm">Server Technologies</DIV>
<DIV expURL="../../../workshop/c-frame.htm#/workshop/imedia/default.htm">Streaming &amp; Interactive Media</DIV>
<DIV expURL="../../../workshop/c-frame.htm#/workshop/management/default.htm">Web Content Management</DIV>
<DIV expURL="../../../workshop/index/default.htm">Workshop Index</DIV>
</DIV>
<DIV ID="divMenu4" CLASS="clsMenu" ONMOUSEOVER="Menu_hover();" ONMOUSEOUT="Menu_hover();" ONCLICK="Menu_click();">
<DIV expURL="../../../gallery/default.htm">Tools &amp; Samples Home</DIV>
<DIV expURL="../../../workshop/c-frame.htm#/gallery/tools/default.htm">Tools</DIV>
<DIV expURL="../../../workshop/c-frame.htm#/gallery/samples/default.htm">Samples, Headers, Libs</DIV>
<DIV expURL="../../../workshop/c-frame.htm#/gallery/images/default.htm">Images</DIV>
<DIV expURL="../../../workshop/c-frame.htm#/gallery/sounds/default.htm">Sounds</DIV>
<DIV expURL="../../../workshop/c-frame.htm#/gallery/stylesheets/default.htm">Style Sheets</DIV>
<DIV expURL="http://www.microsoft.com/typography/fontpack/win.htm">Web Fonts</DIV>
</DIV>
<DIV ID="divMenu5" CLASS="clsMenu" ONMOUSEOVER="Menu_hover();" ONMOUSEOUT="Menu_hover();" ONCLICK="Menu_click();">
<DIV expURL="../../../devtraining/default.htm">Training Home</DIV>
<DIV expURL="../../../workshop/c-frame.htm#/devtraining/seminars/default.htm">SBN Live Seminars</DIV>
<DIV expURL="../../../workshop/c-frame.htm#/devtraining/chat/default.htm">SBN Live Chats</DIV>
<DIV expURL="../../../workshop/c-frame.htm#/devtraining/atec.htm">Courses</DIV>
<DIV expURL="../../../workshop/c-frame.htm#/devtraining/peer/default.htm">Peer Support</DIV>
<DIV expURL="../../../workshop/c-frame.htm#/devtraining/mastering.htm">CD-ROM Training</DIV>
<DIV expURL="../../../workshop/c-frame.htm#/devtraining/books_kits.htm">Books & Training Kits</DIV>
<DIV expURL="../../../workshop/c-frame.htm#/devtraining/mscert/default.htm">Certification</DIV>
</DIV>
<DIV ID="divMenu6" CLASS="clsMenu" ONMOUSEOVER="Menu_hover();" ONMOUSEOUT="Menu_hover();" ONCLICK="Menu_click();">
<DIV expURL="../../../sitebuilder/default.htm">SBN Home</DIV>
<DIV expURL="../../../sitebuilder/siteinfo/newtosite.htm">New to SBN?</DIV>
<DIV expURL="../../../sitebuilder/whatsnew.htm">What's New on SBN</DIV>
<DIV expURL="../../../sitebuilder/siteinfo/sitemap.htm">Site Map</DIV>
<DIV expURL="http://www.microsoft.com/isapi/gosearch.asp?TARGET=/dev/web/default.asp">Site Search</DIV>
<DIV expURL="../../../sitebuilder/siteinfo/glossary/default.htm">Glossary</DIV>
<DIV expURL="../../../sitebuilder/write-us.htm">Write Us</DIV>
<DIV expURL="../../../sitebuilder/siteinfo/about.htm">About This Site</DIV>
</DIV>
<SCRIPT LANGUAGE="JavaScript" SRC="../../../sitebuilder/shared/js/navbar.js"></SCRIPT> 
<SCRIPT LANGUAGE="JavaScript" SRC="../../../sitebuilder/shared/js/navlinks.js"></SCRIPT>


</BODY>
</HTML>