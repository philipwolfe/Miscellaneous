#name: Review Apps Build
#name: $(SourceBranchName)_$(date:yyyyMMdd)$(rev:.r)

parameters:
- name: configuration
  displayName: The solution configuration (eg. Debug, Release)
  type: string
  default: WEB-TEST
  values:
  - WEB-TEST
  - WEB-STAGE

trigger: none

pool:
  name: Default
  demands:
  - msbuild
  - visualstudio
  - docker
  #- aws #need to add aws

variables:
  AWS_ID: '000000000000'
  AWS_REGION: us-east-1
  ECS_REPOSITORY_NAME: review-apps
  ECS_CLUSTER: review-apps-windows-cluster3
  ECS_REPOSITORY: ${{ format('{0}.dkr.ecr.{1}.amazonaws.com/{2}', variables.AWS_ID, variables.AWS_REGION, variables.ECS_REPOSITORY_NAME) }}
  ${{ if eq( variables['Build.Reason'], 'PullRequest' ) }}: 
    APP_REVIEW_ID: 'pr$(System.PullRequest.PullRequestId)'
  ${{ if ne( variables['Build.Reason'], 'PullRequest' ) }}: 
    APP_REVIEW_ID: 'bld$(Build.BuildId)'
  IMAGE_TAG: "${{ format('review-app-{0}', variables.APP_REVIEW_ID) }}"
  IMAGE: "${{ format('{0}:{1}', variables.ECS_REPOSITORY, variables.IMAGE_TAG) }}"

stages:
- stage: Containers_Build_Stage
  displayName: Containers Build Stage
  jobs:
  - job: Containers_Build_Job
    displayName: Containers Build Job
    steps:

    - checkout: self
      submodules: recursive

    - task: PowerShell@2
      displayName: Set Docker Path
      inputs:
        targetType: inline
        script: |
          $dockerpath = 'C:\Program Files\Docker\Docker\resources'
          if(-not($env:Path.contains($dockerpath)))
          {
              Write-Host '##vso[task.prependpath]$dockerpath'
              Write-Host 'Path updated with Docker'
          }
          else
          {
              Write-Host 'Path update not needed'
          }

    - task: PowerShell@2
      displayName: Test Docker
      inputs:
        targetType: inline
        script: docker version

    - task: NuGetToolInstaller@1
      displayName: 'Use NuGet 5.7.0'
      inputs:
        versionSpec: 5.7.0
        checkLatest: true

    - task: NuGetCommand@2
      displayName: 'NuGet restore'
      inputs:
        restoreSolution: '**/*.sln'
        vstsFeed: '093b8028-7936-4bb9-8f21-f1dbbbbab93c'

    - task: VSBuild@1
      displayName: 'Build solution **\*.sln'
      inputs:
        solution: '**\*.sln'
        platform: 'any cpu'
        configuration: '${{ parameters.configuration }}'

    - task: PowerShell@2
      enabled: false
      displayName: 'AWS Docker Login'
      env:
        AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID) #from variable group 'Review Apps AWS'
        AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY) #from variable group 'Review Apps AWS'
        AWS_DEFAULT_REGION: $(AWS_REGION)
      inputs:
        targetType: inline
        script: 'aws ecr get-login-password | docker login --password-stdin --username AWS "$(ECS_REPOSITORY)"'
    
    - task: Docker@2
      displayName: Build WebApi Image
      inputs:
        repository: '$(ECS_REPOSITORY)'
        command: build
        Dockerfile: path/Dockerfile
        tags: '$(IMAGE_TAG)-webapi'
        arguments: '--build-arg host=$(APP_REVIEW_ID).review.app --build-arg servicename=container-$(IMAGE_TAG)-webapi'
        addPipelineData: false
    
    - task: ECRPushImage@1
      displayName: Push WebApi Image
      env:
        AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID) #from variable group 'Review Apps AWS'
        AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY) #from variable group 'Review Apps AWS'
        AWS_DEFAULT_REGION: $(AWS_REGION)
      inputs:
        regionName: '$(AWS_REGION)'
        sourceImageName: '$(ECS_REPOSITORY)'
        sourceImageTag: '$(IMAGE_TAG)-webapi'
        repositoryName: '$(ECS_REPOSITORY_NAME)'
        pushTag: '$(IMAGE_TAG)-webapi'
    
    - task: Docker@2
      displayName: Build ConnectApp Image
      inputs:
        repository: '$(ECS_REPOSITORY)'
        command: build
        Dockerfile: path/Dockerfile
        tags: '$(IMAGE_TAG)-connect'
        arguments: '--build-arg host=$(APP_REVIEW_ID).review.app --build-arg servicename=container-$(IMAGE_TAG)-connect'
        addPipelineData: false
    
    - task: ECRPushImage@1
      displayName: Push ConnectApp Image
      env:
        AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID) #from variable group 'Review Apps AWS'
        AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY) #from variable group 'Review Apps AWS'
        AWS_DEFAULT_REGION: $(AWS_REGION)
      inputs:
        regionName: 'us-east-1'
        sourceImageName: '$(ECS_REPOSITORY)'
        sourceImageTag: '$(IMAGE_TAG)-connect'
        repositoryName: '$(ECS_REPOSITORY_NAME)'
        pushTag: '$(IMAGE_TAG)-connect'
    
    - task: Docker@2
      displayName: 'Build QueueProcessor'
      inputs:
        repository: '$(ECS_REPOSITORY)'
        command: build
        Dockerfile: path/Dockerfile
        tags: '$(IMAGE_TAG)-queueprocessor'
        arguments: '--build-arg slnconfig=${{ parameters.configuration }}'
        addPipelineData: false
      enabled: false
    
    - task: ECRPushImage@1
      displayName: 'Push QueueProcessor'
      inputs:
        awsCredentials: awsCredentials
        regionName: '$(AWS_REGION)'
        sourceImageName: '$(ECS_REPOSITORY)'
        sourceImageTag: '$(IMAGE_TAG)-queueprocessor'
        repositoryName: '$(ECS_REPOSITORY_NAME)'
        pushTag: '$(IMAGE_TAG)-queueprocessor'
      enabled: false
    
    - task: Docker@2
      displayName: 'Build Remote'
      inputs:
        repository: '$(ECS_REPOSITORY)'
        command: build
        Dockerfile: path/Dockerfile
        tags: '$(IMAGE_TAG)-remote'
        addPipelineData: false
      enabled: false
    
    - task: ECRPushImage@1
      displayName: 'Push Remote'
      inputs:
        awsCredentials: awsCredentials
        regionName: '$(AWS_REGION)'
        sourceImageName: '$(ECS_REPOSITORY)'
        sourceImageTag: '$(IMAGE_TAG)-oasremote'
        repositoryName: '$(ECS_REPOSITORY_NAME)'
        pushTag: '$(IMAGE_TAG)-remote'
      enabled: false
    
    - powershell: |
        docker rmi -f $(IMAGE)-webapi
        docker rmi -f $(IMAGE)-connect
        #docker rmi -f $(IMAGE)-remote
        #docker rmi -f $(IMAGE)-queueprocessor
      displayName: 'Remove images from Build Server'

  - job: AWS_Tasks_Job
    displayName: Create AWS Tasks Job
    dependsOn: Containers_Build_Job
    steps: 
    - task: AWSCLI@1
      displayName: Register the task definition
      env:
        AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID) #from variable group 'Review Apps AWS'
        AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY) #from variable group 'Review Apps AWS'
        AWS_DEFAULT_REGION: $(AWS_REGION)
      inputs:
        regionName: '$(AWS_REGION)'
        awsCommand: ecs
        awsSubCommand: 'register-task-definition'
        awsArguments: >
          --cli-input-json "{ \"family\": \"task-$(IMAGE_TAG)\", \"containerDefinitions\": [ { \"name\": 
          \"container-$(IMAGE_TAG)-webapi\", \"image\": \"$(IMAGE)-webapi\", \"essential\": 
          true, \"memory\": 1024, \"cpu\": 2048, \"dnsServers\":[ \"192.168.0.0\", \"192.168.0.1\"], 
          \"dnsSearchDomains\": [\"domain.local\"] }, { \"name\": \"container-$(IMAGE_TAG)-connect\", 
          \"image\": \"$(IMAGE)-connect\", \"essential\": true, \"memory\": 1024, \"cpu\": 1024, \"dnsServers\": 
          [ \"192.168.0.0\", \"192.168.0.1\"], \"dnsSearchDomains\": [\"domain.local\"] } ] }"
          
        failOnStandardError: false

    - task: AWSCLI@1
      displayName: Create the service to run the task
      env:
        AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID) #from variable group 'Review Apps AWS'
        AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY) #from variable group 'Review Apps AWS'
        AWS_DEFAULT_REGION: $(AWS_REGION)
      inputs:
        regionName: $(AWS_REGION)
        awsCommand: ecs
        awsSubCommand: create-service
        awsArguments: >
          --cli-input-json "{ \"cluster\": \"$(ECS_CLUSTER)\", \"taskDefinition\": 
          \"arn:aws:ecs:us-east-1:000000000000:task-definition/task-$(IMAGE_TAG):1\", \"serviceName\": 
          \"service-$(IMAGE_TAG)\", \"launchType\": \"EC2\", \"schedulingStrategy\": \"REPLICA\", 
          \"desiredCount\": 1, \"deploymentConfiguration\": { \"maximumPercent\": 200, \"minimumHealthyPercent\": 
          100 }, \"deploymentController\": { \"type\": \"ECS\" }, \"placementStrategy\": [ { \"type\": \"spread\", 
          \"field\": \"instanceId\" } ], \"enableECSManagedTags\": false }"
         
        failOnStandardError: false

    - task: PowerShell@2
      displayName: Publish URL for Pull Requests
      condition: and(succeeded(), eq( variables['Build.Reason'], 'PullRequest' ) )
      env:
        SYSTEM_ACCESSTOKEN: $(System.AccessToken)
      inputs:
        targetType: inline
        script: |
          $teamprojectid = "OAT" #$env:SYSTEM_TEAMPROJECTID
          $repositoryId = "OAT"
  
          $url = "$($env:SYSTEM_TEAMFOUNDATIONCOLLECTIONURI)$teamprojectid/_apis/git/repositories/$repositoryId/pullRequests/$(System.PullRequest.PullRequestId)/statuses?api-version=6.0-  preview.1"
          Write-Host "URL: $url"
  
          $body = @{
              iterationId = 1
              state = "succeeded"
              description = "URL: https://$(APP_REVIEW_ID).review.apps"
              context = @{
              name = "Ready"
              genre = "Review-App-Pipeline"
              }
              targetUrl = "https://$(APP_REVIEW_ID).review.apps"
          }
  
          $headers = @{ Authorization = "Bearer $env:SYSTEM_ACCESSTOKEN" }
  
          $params = @{
              Uri = $url
              Headers = $headers
              Method = "POST"
              Body = $body | ConvertTo-JSON
              ContentType = "application/json"
          }
  
          #Invoke REST API
          Write-Host Invoke REST API
          Invoke-RestMethod @params -Verbose
